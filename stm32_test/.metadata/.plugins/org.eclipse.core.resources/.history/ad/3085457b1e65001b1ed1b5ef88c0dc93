#include "test.h"





/**
 * @file ili9488.c
 */

/*********************
 *      INCLUDES
 *********************/
//#include "ili9488.h"
//#include "disp_spi.h"
//#include "driver/gpio.h"
//#include "esp_log.h"
//#include "esp_heap_caps.h"
//
//#include "freertos/FreeRTOS.h"
//#include "freertos/task.h"


#define TFT_RST_LOW
#define TFT_RST_HIGH

#define TFT_DC_LOW
#define TFT_DC_HIGH


/*********************
 *      INCLUDES
 *********************/
#include <stdbool.h>
#include <stdint.h>

//#ifdef LV_LVGL_H_INCLUDE_SIMPLE
//#include "lvgl.h"
//#else
//#include "lvgl/lvgl.h"
//#endif
//#include "../lvgl_helpers.h"

/*********************
 *      DEFINES
 *********************/
//#define ILI9488_DC   CONFIG_LV_DISP_PIN_DC
//#define ILI9488_RST  CONFIG_LV_DISP_PIN_RST
//#define ILI9488_BCKL CONFIG_LV_DISP_PIN_BCKL

//#define ILI9488_ENABLE_BACKLIGHT_CONTROL CONFIG_LV_ENABLE_BACKLIGHT_CONTROL

//#if CONFIG_LV_BACKLIGHT_ACTIVE_LVL
//  #define ILI9488_BCKL_ACTIVE_LVL 1
//#else
//  #define ILI9488_BCKL_ACTIVE_LVL 0
//#endif

/*******************
 * ILI9488 REGS
*********************/

/* Level 1 Commands (from the display Datasheet) */
#define ILI9488_CMD_NOP                             0x00
#define ILI9488_CMD_SOFTWARE_RESET                  0x01
#define ILI9488_CMD_READ_DISP_ID                    0x04
#define ILI9488_CMD_READ_ERROR_DSI                  0x05
#define ILI9488_CMD_READ_DISP_STATUS                0x09
#define ILI9488_CMD_READ_DISP_POWER_MODE            0x0A
#define ILI9488_CMD_READ_DISP_MADCTRL               0x0B
#define ILI9488_CMD_READ_DISP_PIXEL_FORMAT          0x0C
#define ILI9488_CMD_READ_DISP_IMAGE_MODE            0x0D
#define ILI9488_CMD_READ_DISP_SIGNAL_MODE           0x0E
#define ILI9488_CMD_READ_DISP_SELF_DIAGNOSTIC       0x0F
#define ILI9488_CMD_ENTER_SLEEP_MODE                0x10
#define ILI9488_CMD_SLEEP_OUT                       0x11
#define ILI9488_CMD_PARTIAL_MODE_ON                 0x12
#define ILI9488_CMD_NORMAL_DISP_MODE_ON             0x13
#define ILI9488_CMD_DISP_INVERSION_OFF              0x20
#define ILI9488_CMD_DISP_INVERSION_ON               0x21
#define ILI9488_CMD_PIXEL_OFF                       0x22
#define ILI9488_CMD_PIXEL_ON                        0x23
#define ILI9488_CMD_DISPLAY_OFF                     0x28
#define ILI9488_CMD_DISPLAY_ON                      0x29
#define ILI9488_CMD_COLUMN_ADDRESS_SET              0x2A
#define ILI9488_CMD_PAGE_ADDRESS_SET                0x2B
#define ILI9488_CMD_MEMORY_WRITE                    0x2C
#define ILI9488_CMD_MEMORY_READ                     0x2E
#define ILI9488_CMD_PARTIAL_AREA                    0x30
#define ILI9488_CMD_VERT_SCROLL_DEFINITION          0x33
#define ILI9488_CMD_TEARING_EFFECT_LINE_OFF         0x34
#define ILI9488_CMD_TEARING_EFFECT_LINE_ON          0x35
#define ILI9488_CMD_MEMORY_ACCESS_CONTROL           0x36
#define ILI9488_CMD_VERT_SCROLL_START_ADDRESS       0x37
#define ILI9488_CMD_IDLE_MODE_OFF                   0x38
#define ILI9488_CMD_IDLE_MODE_ON                    0x39
#define ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET         0x3A
#define ILI9488_CMD_WRITE_MEMORY_CONTINUE           0x3C
#define ILI9488_CMD_READ_MEMORY_CONTINUE            0x3E
#define ILI9488_CMD_SET_TEAR_SCANLINE               0x44
#define ILI9488_CMD_GET_SCANLINE                    0x45
#define ILI9488_CMD_WRITE_DISPLAY_BRIGHTNESS        0x51
#define ILI9488_CMD_READ_DISPLAY_BRIGHTNESS         0x52
#define ILI9488_CMD_WRITE_CTRL_DISPLAY              0x53
#define ILI9488_CMD_READ_CTRL_DISPLAY               0x54
#define ILI9488_CMD_WRITE_CONTENT_ADAPT_BRIGHTNESS  0x55
#define ILI9488_CMD_READ_CONTENT_ADAPT_BRIGHTNESS   0x56
#define ILI9488_CMD_WRITE_MIN_CAB_LEVEL             0x5E
#define ILI9488_CMD_READ_MIN_CAB_LEVEL              0x5F
#define ILI9488_CMD_READ_ABC_SELF_DIAG_RES          0x68
#define ILI9488_CMD_READ_ID1                        0xDA
#define ILI9488_CMD_READ_ID2                        0xDB
#define ILI9488_CMD_READ_ID3                        0xDC

/* Level 2 Commands (from the display Datasheet) */
#define ILI9488_CMD_INTERFACE_MODE_CONTROL          0xB0
#define ILI9488_CMD_FRAME_RATE_CONTROL_NORMAL       0xB1
#define ILI9488_CMD_FRAME_RATE_CONTROL_IDLE_8COLOR  0xB2
#define ILI9488_CMD_FRAME_RATE_CONTROL_PARTIAL      0xB3
#define ILI9488_CMD_DISPLAY_INVERSION_CONTROL       0xB4
#define ILI9488_CMD_BLANKING_PORCH_CONTROL          0xB5
#define ILI9488_CMD_DISPLAY_FUNCTION_CONTROL        0xB6
#define ILI9488_CMD_ENTRY_MODE_SET                  0xB7
#define ILI9488_CMD_BACKLIGHT_CONTROL_1             0xB9
#define ILI9488_CMD_BACKLIGHT_CONTROL_2             0xBA
#define ILI9488_CMD_HS_LANES_CONTROL                0xBE
#define ILI9488_CMD_POWER_CONTROL_1                 0xC0
#define ILI9488_CMD_POWER_CONTROL_2                 0xC1
#define ILI9488_CMD_POWER_CONTROL_NORMAL_3          0xC2
#define ILI9488_CMD_POWER_CONTROL_IDEL_4            0xC3
#define ILI9488_CMD_POWER_CONTROL_PARTIAL_5         0xC4
#define ILI9488_CMD_VCOM_CONTROL_1                  0xC5
#define ILI9488_CMD_CABC_CONTROL_1                  0xC6
#define ILI9488_CMD_CABC_CONTROL_2                  0xC8
#define ILI9488_CMD_CABC_CONTROL_3                  0xC9
#define ILI9488_CMD_CABC_CONTROL_4                  0xCA
#define ILI9488_CMD_CABC_CONTROL_5                  0xCB
#define ILI9488_CMD_CABC_CONTROL_6                  0xCC
#define ILI9488_CMD_CABC_CONTROL_7                  0xCD
#define ILI9488_CMD_CABC_CONTROL_8                  0xCE
#define ILI9488_CMD_CABC_CONTROL_9                  0xCF
#define ILI9488_CMD_NVMEM_WRITE                     0xD0
#define ILI9488_CMD_NVMEM_PROTECTION_KEY            0xD1
#define ILI9488_CMD_NVMEM_STATUS_READ               0xD2
#define ILI9488_CMD_READ_ID4                        0xD3
#define ILI9488_CMD_ADJUST_CONTROL_1                0xD7
#define ILI9488_CMD_READ_ID_VERSION                 0xD8
#define ILI9488_CMD_POSITIVE_GAMMA_CORRECTION       0xE0
#define ILI9488_CMD_NEGATIVE_GAMMA_CORRECTION       0xE1
#define ILI9488_CMD_DIGITAL_GAMMA_CONTROL_1         0xE2
#define ILI9488_CMD_DIGITAL_GAMMA_CONTROL_2         0xE3
#define ILI9488_CMD_SET_IMAGE_FUNCTION              0xE9
#define ILI9488_CMD_ADJUST_CONTROL_2                0xF2
#define ILI9488_CMD_ADJUST_CONTROL_3                0xF7
#define ILI9488_CMD_ADJUST_CONTROL_4                0xF8
#define ILI9488_CMD_ADJUST_CONTROL_5                0xF9
#define ILI9488_CMD_SPI_READ_SETTINGS               0xFB
#define ILI9488_CMD_ADJUST_CONTROL_6                0xFC
#define ILI9488_CMD_ADJUST_CONTROL_7                0xFF

/**********************
 *      TYPEDEFS
 **********************/
typedef struct {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
} lv_color_custom_t;

/**********************
 * GLOBAL PROTOTYPES
 **********************/

//void ili9488_init(void);
//void ili9488_flush(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_map);
//void ili9488_enable_backlight(bool backlight);

/**********************
 *      MACROS
 **********************/


/*********************
 *      DEFINES
 *********************/
 //#define TAG "ILI9488"

/**********************
 *      TYPEDEFS
 **********************/

/*The LCD needs a bunch of command/argument values to be initialized. They are stored in this struct. */
typedef struct {
    uint8_t cmd;
    uint8_t data[16];
    uint8_t databytes; //No of data in data; bit 7 = delay after set; 0xFF = end of cmds.
} lcd_init_cmd_t;

/**********************
 *  STATIC PROTOTYPES
 **********************/
static void ili9488_set_orientation(uint8_t orientation);
static void ili9488_send_cmd(uint8_t cmd);
static void ili9488_send_data(void * data, uint16_t length);
static void ili9488_send_color(void * data, uint16_t length);


/**********************
 *  STATIC VARIABLES
 **********************/

/**********************
 *      MACROS
 **********************/

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
// From github.com/jeremyjh/ESP32_TFT_library
// From github.com/mvturnho/ILI9488-lvgl-ESP32-WROVER-B

void ili9488_init(void)
{
	lcd_init_cmd_t ili_init_cmds[]={
                {ILI9488_CMD_SLEEP_OUT, {0x00}, 0x80},
		{ILI9488_CMD_POSITIVE_GAMMA_CORRECTION, {0x00, 0x03, 0x09, 0x08, 0x16, 0x0A, 0x3F, 0x78, 0x4C, 0x09, 0x0A, 0x08, 0x16, 0x1A, 0x0F}, 15},
		{ILI9488_CMD_NEGATIVE_GAMMA_CORRECTION, {0x00, 0x16, 0x19, 0x03, 0x0F, 0x05, 0x32, 0x45, 0x46, 0x04, 0x0E, 0x0D, 0x35, 0x37, 0x0F}, 15},
		{ILI9488_CMD_POWER_CONTROL_1, {0x17, 0x15}, 2},
		{ILI9488_CMD_POWER_CONTROL_2, {0x41}, 1},
		{ILI9488_CMD_VCOM_CONTROL_1, {0x00, 0x12, 0x80}, 3},
		{ILI9488_CMD_MEMORY_ACCESS_CONTROL, {(0x20 | 0x08)}, 1},
		{ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, {0x66}, 1},
		{ILI9488_CMD_INTERFACE_MODE_CONTROL, {0x00}, 1},
		{ILI9488_CMD_FRAME_RATE_CONTROL_NORMAL, {0xA0}, 1},
		{ILI9488_CMD_DISPLAY_INVERSION_CONTROL, {0x02}, 1},
		{ILI9488_CMD_DISPLAY_FUNCTION_CONTROL, {0x02, 0x02}, 2},
		{ILI9488_CMD_SET_IMAGE_FUNCTION, {0x00}, 1},
		{ILI9488_CMD_WRITE_CTRL_DISPLAY, {0x28}, 1},
		{ILI9488_CMD_WRITE_DISPLAY_BRIGHTNESS, {0x7F}, 1},
		{ILI9488_CMD_ADJUST_CONTROL_3, {0xA9, 0x51, 0x2C, 0x02}, 4},
		{ILI9488_CMD_DISPLAY_ON, {0x00}, 0x80},
		{0, {0}, 0xff},
	};

	//Initialize non-SPI GPIOs
  //      gpio_pad_select_gpio(ILI9488_DC);
	//gpio_set_direction(ILI9488_DC, GPIO_MODE_OUTPUT);
  //      gpio_pad_select_gpio(ILI9488_RST);
	//gpio_set_direction(ILI9488_RST, GPIO_MODE_OUTPUT);

//#if ILI9488_ENABLE_BACKLIGHT_CONTROL
 //       gpio_pad_select_gpio(ILI9488_BCKL);
//	gpio_set_direction(ILI9488_BCKL, GPIO_MODE_OUTPUT);
//#endif

	//Reset the display
	TFT_RST_LOW;
	//gpio_set_level(ILI9488_RST, 0);
	//vTaskDelay(100 / portTICK_RATE_MS);
	HAL_delay(100);
	TFT_RST_HIGH;
	//gpio_set_level(ILI9488_RST, 1);
	//vTaskDelay(100 / portTICK_RATE_MS);
	HAL_delay(100);


	//ESP_LOGI(TAG, "ILI9488 initialization.");

	// Exit sleep
	ili9488_send_cmd(0x01);	/* Software reset */

	//vTaskDelay(100 / portTICK_RATE_MS);
	HAL_delay(100);

	//Send all the commands
	uint16_t cmd = 0;
	while (ili_init_cmds[cmd].databytes!=0xff) {
		ili9488_send_cmd(ili_init_cmds[cmd].cmd);
		ili9488_send_data(ili_init_cmds[cmd].data, ili_init_cmds[cmd].databytes&0x1F);
		if (ili_init_cmds[cmd].databytes & 0x80) {
			//vTaskDelay(100 / portTICK_RATE_MS);
			HAL_delay(100);
		}
		cmd++;
	}

	ili9488_enable_backlight(true);

  //ili9488_set_orientation(CONFIG_LV_DISPLAY_ORIENTATION);
  ili9488_set_orientation(2);
}

// Flush function based on mvturnho repo
//void ili9488_flush(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_map)
//{
//    uint32_t size = lv_area_get_width(area) * lv_area_get_height(area);
//
//    lv_color16_t *buffer_16bit = (lv_color16_t *) color_map;
//    uint8_t *mybuf;
//    do {
//        mybuf = (uint8_t *) heap_caps_malloc(3 * size * sizeof(uint8_t), MALLOC_CAP_DMA);
//        if (mybuf == NULL)  ESP_LOGW(TAG, "Could not allocate enough DMA memory!");
//    } while (mybuf == NULL);
//
//    uint32_t LD = 0;
//    uint32_t j = 0;
//
//    for (uint32_t i = 0; i < size; i++) {
//        LD = buffer_16bit[i].full;
//        mybuf[j] = (uint8_t) (((LD & 0xF800) >> 8) | ((LD & 0x8000) >> 13));
//        j++;
//        mybuf[j] = (uint8_t) ((LD & 0x07E0) >> 3);
//        j++;
//        mybuf[j] = (uint8_t) (((LD & 0x001F) << 3) | ((LD & 0x0010) >> 2));
//        j++;
//    }
//
//	/* Column addresses  */
//	uint8_t xb[] = {
//	    (uint8_t) (area->x1 >> 8) & 0xFF,
//	    (uint8_t) (area->x1) & 0xFF,
//	    (uint8_t) (area->x2 >> 8) & 0xFF,
//	    (uint8_t) (area->x2) & 0xFF,
//	};
//
//	/* Page addresses  */
//	uint8_t yb[] = {
//	    (uint8_t) (area->y1 >> 8) & 0xFF,
//	    (uint8_t) (area->y1) & 0xFF,
//	    (uint8_t) (area->y2 >> 8) & 0xFF,
//	    (uint8_t) (area->y2) & 0xFF,
//	};
//
//	/*Column addresses*/
//	ili9488_send_cmd(ILI9488_CMD_COLUMN_ADDRESS_SET);
//	ili9488_send_data(xb, 4);
//
//	/*Page addresses*/
//	ili9488_send_cmd(ILI9488_CMD_PAGE_ADDRESS_SET);
//	ili9488_send_data(yb, 4);
//
//	/*Memory write*/
//	ili9488_send_cmd(ILI9488_CMD_MEMORY_WRITE);
//
//	ili9488_send_color((void *) mybuf, size * 3);
//	heap_caps_free(mybuf);
//}

//void ili9488_enable_backlight(bool backlight)
//{
//#if ILI9488_ENABLE_BACKLIGHT_CONTROL
//    ESP_LOGI(TAG, "%s backlight.", backlight ? "Enabling" : "Disabling");
//    uint32_t tmp = 0;
//
//#if (ILI9488_BCKL_ACTIVE_LVL==1)
//    tmp = backlight ? 1 : 0;
//#else
//    tmp = backlight ? 0 : 1;
//#endif
//
//    gpio_set_level(ILI9488_BCKL, tmp);
//#endif
//}

/**********************
 *   STATIC FUNCTIONS
 **********************/


static void ili9488_send_cmd(uint8_t cmd)
{
    disp_wait_for_pending_transactions();
    //gpio_set_level(ILI9488_DC, 0);	 /*Command mode*/
    TFT_DC_LOW;
    disp_spi_send_data(&cmd, 1);
}

static void ili9488_send_data(void * data, uint16_t length)
{
    disp_wait_for_pending_transactions();
    //gpio_set_level(ILI9488_DC, 1);	 /*Data mode*/
    TFT_DC_HIGH;
    disp_spi_send_data(data, length);
}

static void ili9488_send_color(void * data, uint16_t length)
{
    disp_wait_for_pending_transactions();
    //gpio_set_level(ILI9488_DC, 1);   /*Data mode*/
    TFT_DC_HIGH;
    disp_spi_send_colors(data, length);
}

static void ili9488_set_orientation(uint8_t orientation)
{
    // ESP_ASSERT(orientation < 4);

    const char *orientation_str[] = {
        "PORTRAIT", "PORTRAIT_INVERTED", "LANDSCAPE", "LANDSCAPE_INVERTED"
    };

    //ESP_LOGI(TAG, "Display orientation: %s", orientation_str[orientation]);

//#if defined (CONFIG_LV_PREDEFINED_DISPLAY_NONE)
    uint8_t data[] = {0x48, 0x88, 0x28, 0xE8};
//#endif

    //ESP_LOGI(TAG, "0x36 command value: 0x%02X", data[orientation]);

    ili9488_send_cmd(0x36);
    ili9488_send_data((void *) &data[orientation], 1);
}

void tft_init() {

	ili9488_init();

}
