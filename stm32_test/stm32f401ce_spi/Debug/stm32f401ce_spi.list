
stm32f401ce_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009864  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b14  08009b14  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b1c  08009b1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b1c  08009b1c  00019b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  200001e4  08009d08  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ce4  08009d08  00021ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002088b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044f6  00000000  00000000  00040a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  00044f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f8  00000000  00000000  00046790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb01  00000000  00000000  00047d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017764  00000000  00000000  00064889  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009897e  00000000  00000000  0007bfed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011496b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a20  00000000  00000000  001149e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099ec 	.word	0x080099ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080099ec 	.word	0x080099ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_ADC1_Init+0xb8>)
 8000594:	4a29      	ldr	r2, [pc, #164]	; (800063c <MX_ADC1_Init+0xbc>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_ADC1_Init+0xb8>)
 800059a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e2:	4815      	ldr	r0, [pc, #84]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005e4:	f000 fffc 	bl	80015e0 <HAL_ADC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80005ee:	f000 fa63 	bl	8000ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_ADC1_Init+0xb8>)
 8000604:	f001 f830 	bl	8001668 <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800060e:	f000 fa53 	bl	8000ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000612:	2309      	movs	r3, #9
 8000614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_ADC1_Init+0xb8>)
 8000620:	f001 f822 	bl	8001668 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800062a:	f000 fa45 	bl	8000ab8 <Error_Handler>
  }

}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000210 	.word	0x20000210
 800063c:	40012000 	.word	0x40012000

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a33      	ldr	r2, [pc, #204]	; (800072c <HAL_ADC_MspInit+0xec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d160      	bne.n	8000724 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin;
 800069a:	2303      	movs	r3, #3
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4821      	ldr	r0, [pc, #132]	; (8000734 <HAL_ADC_MspInit+0xf4>)
 80006ae:	f001 fe79 	bl	80023a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <HAL_ADC_MspInit+0xfc>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 800070a:	f001 fadd 	bl	8001cc8 <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000714:	f000 f9d0 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
 800071e:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40012000 	.word	0x40012000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400
 8000738:	20000258 	.word	0x20000258
 800073c:	40026410 	.word	0x40026410

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_DMA_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_DMA_Init+0x4c>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_DMA_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2038      	movs	r0, #56	; 0x38
 8000768:	f001 fa77 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800076c:	2038      	movs	r0, #56	; 0x38
 800076e:	f001 fa90 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	203b      	movs	r0, #59	; 0x3b
 8000778:	f001 fa6f 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800077c:	203b      	movs	r0, #59	; 0x3b
 800077e:	f001 fa88 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <MX_GPIO_Init+0x108>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a3a      	ldr	r2, [pc, #232]	; (8000898 <MX_GPIO_Init+0x108>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <MX_GPIO_Init+0x108>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b34      	ldr	r3, [pc, #208]	; (8000898 <MX_GPIO_Init+0x108>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <MX_GPIO_Init+0x108>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_GPIO_Init+0x108>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0x108>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <MX_GPIO_Init+0x108>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_GPIO_Init+0x108>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0x108>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_GPIO_Init+0x108>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0x108>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800081c:	481f      	ldr	r0, [pc, #124]	; (800089c <MX_GPIO_Init+0x10c>)
 800081e:	f001 ff43 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	481e      	ldr	r0, [pc, #120]	; (80008a0 <MX_GPIO_Init+0x110>)
 8000828:	f001 ff3e 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_BL_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000832:	481c      	ldr	r0, [pc, #112]	; (80008a4 <MX_GPIO_Init+0x114>)
 8000834:	f001 ff38 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000838:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_GPIO_Init+0x10c>)
 8000852:	f001 fda7 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000856:	2302      	movs	r3, #2
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0x110>)
 800086e:	f001 fd99 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_BL_Pin;
 8000872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x114>)
 800088c:	f001 fd8a 	bl	80023a4 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400

080008a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C1_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C1_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e6:	f001 fef9 	bl	80026dc <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f8e2 	bl	8000ab8 <Error_Handler>
  }

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200002b8 	.word	0x200002b8
 80008fc:	40005400 	.word	0x40005400
 8000900:	000186a0 	.word	0x000186a0

08000904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_I2C_MspInit+0x84>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d12b      	bne.n	800097e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_I2C_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_I2C_MspInit+0x88>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_I2C_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000942:	23c0      	movs	r3, #192	; 0xc0
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	2312      	movs	r3, #18
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000952:	2304      	movs	r3, #4
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_I2C_MspInit+0x8c>)
 800095e:	f001 fd21 	bl	80023a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_I2C_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_I2C_MspInit+0x88>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_I2C_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fd8e 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f820 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f7ff fef6 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a4:	f7ff fecc 	bl	8000740 <MX_DMA_Init>
  MX_ADC1_Init();
 80009a8:	f7ff fdea 	bl	8000580 <MX_ADC1_Init>
  MX_TIM1_Init();
 80009ac:	f000 fc5e 	bl	800126c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80009b0:	f007 fc1c 	bl	80081ec <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80009b4:	f7ff ff78 	bl	80008a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009b8:	f000 f886 	bl	8000ac8 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	LED1_ON;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <main+0x48>)
 80009be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009c2:	619a      	str	r2, [r3, #24]
  	tft_init();
 80009c4:	f000 fc4c 	bl	8001260 <tft_init>
    LED1_OFF;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <main+0x48>)
 80009ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ce:	619a      	str	r2, [r3, #24]

  	HAL_Delay(1000);
 80009d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d4:	f000 fde2 	bl	800159c <HAL_Delay>
  	LED1_ON;
 80009d8:	e7f0      	b.n	80009bc <main+0x28>
 80009da:	bf00      	nop
 80009dc:	40020800 	.word	0x40020800

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 f910 	bl	8008c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a54:	2319      	movs	r3, #25
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a62:	2307      	movs	r3, #7
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 f8f2 	bl	8003c54 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a76:	f000 f81f 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2102      	movs	r1, #2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fb4c 	bl	8004134 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aa2:	f000 f809 	bl	8000ab8 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3750      	adds	r7, #80	; 0x50
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_SPI1_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b1a:	f003 fcc3 	bl	80044a4 <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b24:	f7ff ffc8 	bl	8000ab8 <Error_Handler>
  }

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000030c 	.word	0x2000030c
 8000b30:	40013000 	.word	0x40013000

08000b34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <HAL_SPI_MspInit+0xe0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d15a      	bne.n	8000c0c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_SPI_MspInit+0xe4>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_SPI_MspInit+0xe4>)
 8000b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_SPI_MspInit+0xe4>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HAL_SPI_MspInit+0xe4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <HAL_SPI_MspInit+0xe4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_SPI_MspInit+0xe4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23e0      	movs	r3, #224	; 0xe0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481c      	ldr	r0, [pc, #112]	; (8000c1c <HAL_SPI_MspInit+0xe8>)
 8000baa:	f001 fbfb 	bl	80023a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <HAL_SPI_MspInit+0xf0>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bb6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bbe:	2240      	movs	r2, #64	; 0x40
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000be8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000bf2:	f001 f869 	bl	8001cc8 <HAL_DMA_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000bfc:	f7ff ff5c 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000c04:	649a      	str	r2, [r3, #72]	; 0x48
 8000c06:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_SPI_MspInit+0xec>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40013000 	.word	0x40013000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	20000364 	.word	0x20000364
 8000c24:	40026458 	.word	0x40026458

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 fc46 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA2_Stream0_IRQHandler+0x10>)
 8000cda:	f001 f8fb 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000258 	.word	0x20000258

08000ce8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */


  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA2_Stream3_IRQHandler+0x10>)
 8000cee:	f001 f8f1 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000364 	.word	0x20000364

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f001 ff73 	bl	8002bec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200018d8 	.word	0x200018d8

08000d10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e00a      	b.n	8000d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d22:	f3af 8000 	nop.w
 8000d26:	4601      	mov	r1, r0
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf0      	blt.n	8000d22 <_read+0x12>
	}

return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e009      	b.n	8000d70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf1      	blt.n	8000d5c <_write+0x12>
	}
	return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_close>:

int _close(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000daa:	605a      	str	r2, [r3, #4]
	return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_isatty>:

int _isatty(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f007 fec0 	bl	8008ba0 <__errno>
 8000e20:	4602      	mov	r2, r0
 8000e22:	230c      	movs	r3, #12
 8000e24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20018000 	.word	0x20018000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000200 	.word	0x20000200
 8000e54:	20001ce8 	.word	0x20001ce8

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SystemInit+0x28>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <SystemInit+0x28>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SystemInit+0x28>)
 8000e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e72:	609a      	str	r2, [r3, #8]
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <ili9488_init>:
 **********************/
// From github.com/jeremyjh/ESP32_TFT_library
// From github.com/mvturnho/ILI9488-lvgl-ESP32-WROVER-B

void ili9488_init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0d2      	sub	sp, #328	; 0x148
 8000e88:	af00      	add	r7, sp, #0
	lcd_init_cmd_t ili_init_cmds[]={
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	f007 febd 	bl	8008c14 <memset>
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2211      	movs	r2, #17
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	745a      	strb	r2, [r3, #17]
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	22e0      	movs	r2, #224	; 0xe0
 8000eaa:	749a      	strb	r2, [r3, #18]
 8000eac:	463b      	mov	r3, r7
 8000eae:	2203      	movs	r2, #3
 8000eb0:	751a      	strb	r2, [r3, #20]
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2209      	movs	r2, #9
 8000eb6:	755a      	strb	r2, [r3, #21]
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2208      	movs	r2, #8
 8000ebc:	759a      	strb	r2, [r3, #22]
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2216      	movs	r2, #22
 8000ec2:	75da      	strb	r2, [r3, #23]
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	220a      	movs	r2, #10
 8000ec8:	761a      	strb	r2, [r3, #24]
 8000eca:	463b      	mov	r3, r7
 8000ecc:	223f      	movs	r2, #63	; 0x3f
 8000ece:	765a      	strb	r2, [r3, #25]
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2278      	movs	r2, #120	; 0x78
 8000ed4:	769a      	strb	r2, [r3, #26]
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	224c      	movs	r2, #76	; 0x4c
 8000eda:	76da      	strb	r2, [r3, #27]
 8000edc:	463b      	mov	r3, r7
 8000ede:	2209      	movs	r2, #9
 8000ee0:	771a      	strb	r2, [r3, #28]
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	775a      	strb	r2, [r3, #29]
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2208      	movs	r2, #8
 8000eec:	779a      	strb	r2, [r3, #30]
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2216      	movs	r2, #22
 8000ef2:	77da      	strb	r2, [r3, #31]
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	221a      	movs	r2, #26
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]
 8000efc:	463b      	mov	r3, r7
 8000efe:	220f      	movs	r2, #15
 8000f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f04:	463b      	mov	r3, r7
 8000f06:	220f      	movs	r2, #15
 8000f08:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	22e1      	movs	r2, #225	; 0xe1
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f14:	463b      	mov	r3, r7
 8000f16:	2216      	movs	r2, #22
 8000f18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2219      	movs	r2, #25
 8000f20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8000f24:	463b      	mov	r3, r7
 8000f26:	2203      	movs	r2, #3
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	220f      	movs	r2, #15
 8000f30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000f34:	463b      	mov	r3, r7
 8000f36:	2205      	movs	r2, #5
 8000f38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2232      	movs	r2, #50	; 0x32
 8000f40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000f44:	463b      	mov	r3, r7
 8000f46:	2245      	movs	r2, #69	; 0x45
 8000f48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2246      	movs	r2, #70	; 0x46
 8000f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000f54:	463b      	mov	r3, r7
 8000f56:	2204      	movs	r2, #4
 8000f58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	220e      	movs	r2, #14
 8000f60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000f64:	463b      	mov	r3, r7
 8000f66:	220d      	movs	r2, #13
 8000f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2235      	movs	r2, #53	; 0x35
 8000f70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000f74:	463b      	mov	r3, r7
 8000f76:	2237      	movs	r2, #55	; 0x37
 8000f78:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	220f      	movs	r2, #15
 8000f80:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000f84:	463b      	mov	r3, r7
 8000f86:	220f      	movs	r2, #15
 8000f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	22c0      	movs	r2, #192	; 0xc0
 8000f90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8000f94:	463b      	mov	r3, r7
 8000f96:	2217      	movs	r2, #23
 8000f98:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2215      	movs	r2, #21
 8000fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8000fac:	463b      	mov	r3, r7
 8000fae:	22c1      	movs	r2, #193	; 0xc1
 8000fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2241      	movs	r2, #65	; 0x41
 8000fb8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	22c5      	movs	r2, #197	; 0xc5
 8000fc8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2212      	movs	r2, #18
 8000fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2203      	movs	r2, #3
 8000fe0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2236      	movs	r2, #54	; 0x36
 8000fe8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000fec:	463b      	mov	r3, r7
 8000fee:	2228      	movs	r2, #40	; 0x28
 8000ff0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	223a      	movs	r2, #58	; 0x3a
 8001000:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001004:	463b      	mov	r3, r7
 8001006:	2266      	movs	r2, #102	; 0x66
 8001008:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800100c:	463b      	mov	r3, r7
 800100e:	2201      	movs	r2, #1
 8001010:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001014:	463b      	mov	r3, r7
 8001016:	22b0      	movs	r2, #176	; 0xb0
 8001018:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800101c:	463b      	mov	r3, r7
 800101e:	2201      	movs	r2, #1
 8001020:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8001024:	463b      	mov	r3, r7
 8001026:	22b1      	movs	r2, #177	; 0xb1
 8001028:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800102c:	463b      	mov	r3, r7
 800102e:	22a0      	movs	r2, #160	; 0xa0
 8001030:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8001034:	463b      	mov	r3, r7
 8001036:	2201      	movs	r2, #1
 8001038:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 800103c:	463b      	mov	r3, r7
 800103e:	22b4      	movs	r2, #180	; 0xb4
 8001040:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8001044:	463b      	mov	r3, r7
 8001046:	2202      	movs	r2, #2
 8001048:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800104c:	463b      	mov	r3, r7
 800104e:	2201      	movs	r2, #1
 8001050:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8001054:	463b      	mov	r3, r7
 8001056:	22b6      	movs	r2, #182	; 0xb6
 8001058:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 800105c:	463b      	mov	r3, r7
 800105e:	2202      	movs	r2, #2
 8001060:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8001064:	463b      	mov	r3, r7
 8001066:	2202      	movs	r2, #2
 8001068:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800106c:	463b      	mov	r3, r7
 800106e:	2202      	movs	r2, #2
 8001070:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8001074:	463b      	mov	r3, r7
 8001076:	22e9      	movs	r2, #233	; 0xe9
 8001078:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 800107c:	463b      	mov	r3, r7
 800107e:	2201      	movs	r2, #1
 8001080:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8001084:	463b      	mov	r3, r7
 8001086:	2253      	movs	r2, #83	; 0x53
 8001088:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 800108c:	463b      	mov	r3, r7
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8001094:	463b      	mov	r3, r7
 8001096:	2201      	movs	r2, #1
 8001098:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 800109c:	463b      	mov	r3, r7
 800109e:	2251      	movs	r2, #81	; 0x51
 80010a0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 80010a4:	463b      	mov	r3, r7
 80010a6:	227f      	movs	r2, #127	; 0x7f
 80010a8:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 80010ac:	463b      	mov	r3, r7
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 80010b4:	463b      	mov	r3, r7
 80010b6:	22f7      	movs	r2, #247	; 0xf7
 80010b8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 80010bc:	463b      	mov	r3, r7
 80010be:	22a9      	movs	r2, #169	; 0xa9
 80010c0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 80010c4:	463b      	mov	r3, r7
 80010c6:	2251      	movs	r2, #81	; 0x51
 80010c8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80010cc:	463b      	mov	r3, r7
 80010ce:	222c      	movs	r2, #44	; 0x2c
 80010d0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 80010d4:	463b      	mov	r3, r7
 80010d6:	2202      	movs	r2, #2
 80010d8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 80010dc:	463b      	mov	r3, r7
 80010de:	2204      	movs	r2, #4
 80010e0:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
 80010e4:	463b      	mov	r3, r7
 80010e6:	2229      	movs	r2, #41	; 0x29
 80010e8:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 80010ec:	463b      	mov	r3, r7
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 80010f4:	463b      	mov	r3, r7
 80010f6:	22ff      	movs	r2, #255	; 0xff
 80010f8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

	//Reset the display
	TFT_RST_LOW;
	//gpio_set_level(ILI9488_RST, 0);
	//vTaskDelay(100 / portTICK_RATE_MS);
	HAL_Delay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f000 fa4d 	bl	800159c <HAL_Delay>
	TFT_RST_HIGH;
	//gpio_set_level(ILI9488_RST, 1);
	//vTaskDelay(100 / portTICK_RATE_MS);
	HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f000 fa4a 	bl	800159c <HAL_Delay>


	//ESP_LOGI(TAG, "ILI9488 initialization.");

	// Exit sleep
	ili9488_send_cmd(0x01);	/* Software reset */
 8001108:	2001      	movs	r0, #1
 800110a:	f000 f871 	bl	80011f0 <ili9488_send_cmd>

	//vTaskDelay(100 / portTICK_RATE_MS);
	HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f000 fa44 	bl	800159c <HAL_Delay>

	//Send all the commands
	uint16_t cmd = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
	while (ili_init_cmds[cmd].databytes!=0xff) {
 800111a:	e03a      	b.n	8001192 <ili9488_init+0x30e>
		ili9488_send_cmd(ili_init_cmds[cmd].cmd);
 800111c:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8001120:	4639      	mov	r1, r7
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	440b      	add	r3, r1
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f85e 	bl	80011f0 <ili9488_send_cmd>
		ili9488_send_data(ili_init_cmds[cmd].data, ili_init_cmds[cmd].databytes&0x1F);
 8001134:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8001138:	4639      	mov	r1, r7
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	440b      	add	r3, r1
 8001144:	1c58      	adds	r0, r3, #1
 8001146:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800114a:	4639      	mov	r1, r7
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	440b      	add	r3, r1
 8001156:	3311      	adds	r3, #17
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	b29b      	uxth	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	f000 f852 	bl	800120c <ili9488_send_data>
		if (ili_init_cmds[cmd].databytes & 0x80) {
 8001168:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800116c:	4639      	mov	r1, r7
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	3311      	adds	r3, #17
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	da02      	bge.n	8001188 <ili9488_init+0x304>
			//vTaskDelay(100 / portTICK_RATE_MS);
			HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	f000 fa0a 	bl	800159c <HAL_Delay>
		}
		cmd++;
 8001188:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800118c:	3301      	adds	r3, #1
 800118e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
	while (ili_init_cmds[cmd].databytes!=0xff) {
 8001192:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8001196:	4639      	mov	r1, r7
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	440b      	add	r3, r1
 80011a2:	3311      	adds	r3, #17
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	d1b8      	bne.n	800111c <ili9488_init+0x298>
	}

	//ili9488_enable_backlight(true);

  //ili9488_set_orientation(CONFIG_LV_DISPLAY_ORIENTATION);
  ili9488_set_orientation(2);
 80011aa:	2002      	movs	r0, #2
 80011ac:	f000 f83e 	bl	800122c <ili9488_set_orientation>
}
 80011b0:	bf00      	nop
 80011b2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <disp_spi_send_bytes>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static void disp_spi_send_bytes(void* data, uint16_t length) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(&hspi1, data, sizeof(length));
 80011c8:	2202      	movs	r2, #2
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <disp_spi_send_bytes+0x2c>)
 80011ce:	f003 f9cd 	bl	800456c <HAL_SPI_Transmit_DMA>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
  printf("Status: %d\n", status);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	4619      	mov	r1, r3
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <disp_spi_send_bytes+0x30>)
 80011dc:	f007 fdca 	bl	8008d74 <iprintf>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000030c 	.word	0x2000030c
 80011ec:	08009a04 	.word	0x08009a04

080011f0 <ili9488_send_cmd>:

static void ili9488_send_cmd(uint8_t cmd)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
    //disp_wait_for_pending_transactions();
    //gpio_set_level(ILI9488_DC, 0);	 /*Command mode*/
    TFT_DC_LOW;
    disp_spi_send_bytes(&cmd, 1);
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2101      	movs	r1, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffdc 	bl	80011bc <disp_spi_send_bytes>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <ili9488_send_data>:

static void ili9488_send_data(void * data, uint16_t length)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
    //disp_wait_for_pending_transactions();
    //gpio_set_level(ILI9488_DC, 1);	 /*Data mode*/
    TFT_DC_HIGH;
    disp_spi_send_bytes(data, length);
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffcd 	bl	80011bc <disp_spi_send_bytes>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <ili9488_set_orientation>:
   // disp_spi_send_colors(data, length);
    disp_spi_send_bytes(data, length);
}

static void ili9488_set_orientation(uint8_t orientation)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
   // };

    //ESP_LOGI(TAG, "Display orientation: %s", orientation_str[orientation]);

//#if defined (CONFIG_LV_PREDEFINED_DISPLAY_NONE)
    uint8_t data[] = {0x48, 0x88, 0x28, 0xE8};
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <ili9488_set_orientation+0x30>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]
//#endif

    //ESP_LOGI(TAG, "0x36 command value: 0x%02X", data[orientation]);

    ili9488_send_cmd(0x36);
 800123c:	2036      	movs	r0, #54	; 0x36
 800123e:	f7ff ffd7 	bl	80011f0 <ili9488_send_cmd>
    ili9488_send_data((void *) &data[orientation], 1);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	4413      	add	r3, r2
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffdd 	bl	800120c <ili9488_send_data>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	08009a10 	.word	0x08009a10

08001260 <tft_init>:

void tft_init() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

	ili9488_init();
 8001264:	f7ff fe0e 	bl	8000e84 <ili9488_init>

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	; 0x58
 8001270:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 fcb5 	bl	8008c14 <memset>

  htim1.Instance = TIM1;
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012ac:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <MX_TIM1_Init+0x13c>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b0:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012be:	f240 3247 	movw	r2, #839	; 0x347
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012d8:	f003 fb42 	bl	8004960 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f7ff fbe9 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f0:	4619      	mov	r1, r3
 80012f2:	482c      	ldr	r0, [pc, #176]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012f4:	f003 fc5a 	bl	8004bac <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012fe:	f7ff fbdb 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001302:	4828      	ldr	r0, [pc, #160]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001304:	f003 fb57 	bl	80049b6 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800130e:	f7ff fbd3 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001312:	2330      	movs	r3, #48	; 0x30
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001322:	f003 ffa1 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f7ff fbc4 	bl	8000ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 84-1;
 8001334:	2353      	movs	r3, #83	; 0x53
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001356:	f003 fb63 	bl	8004a20 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001360:	f7ff fbaa 	bl	8000ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001388:	f003 ffdc 	bl	8005344 <HAL_TIMEx_ConfigBreakDeadTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001392:	f7ff fb91 	bl	8000ab8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001398:	f000 f82a 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	; 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200003c4 	.word	0x200003c4
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10d      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_TIM_MspPostInit+0x68>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d11e      	bne.n	8001450 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_TIM_MspPostInit+0x6c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001440:	2301      	movs	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_TIM_MspPostInit+0x70>)
 800144c:	f000 ffaa 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010000 	.word	0x40010000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000

08001464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800149c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001468:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800146a:	e003      	b.n	8001474 <LoopCopyDataInit>

0800146c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800146e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001470:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001472:	3104      	adds	r1, #4

08001474 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001478:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800147a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800147c:	d3f6      	bcc.n	800146c <CopyDataInit>
  ldr  r2, =_sbss
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001480:	e002      	b.n	8001488 <LoopFillZerobss>

08001482 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001482:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001484:	f842 3b04 	str.w	r3, [r2], #4

08001488 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800148a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800148c:	d3f9      	bcc.n	8001482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800148e:	f7ff fce3 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001492:	f007 fb8b 	bl	8008bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001496:	f7ff fa7d 	bl	8000994 <main>
  bx  lr    
 800149a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800149c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80014a0:	08009b24 	.word	0x08009b24
  ldr  r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014a8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80014ac:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80014b0:	20001ce4 	.word	0x20001ce4

080014b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_Init+0x40>)
 80014c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_Init+0x40>)
 80014ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_Init+0x40>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 fbaf 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fb9c 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023c00 	.word	0x40023c00

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fbc7 	bl	8001cae <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 fb8f 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	20000404 	.word	0x20000404

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000404 	.word	0x20000404

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_Delay+0x40>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e033      	b.n	800165e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff f81e 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001626:	f023 0302 	bic.w	r3, r3, #2
 800162a:	f043 0202 	orr.w	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f93a 	bl	80018ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
 800164e:	e001      	b.n	8001654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1c>
 8001680:	2302      	movs	r3, #2
 8001682:	e105      	b.n	8001890 <HAL_ADC_ConfigChannel+0x228>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b09      	cmp	r3, #9
 8001692:	d925      	bls.n	80016e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68d9      	ldr	r1, [r3, #12]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	3b1e      	subs	r3, #30
 80016aa:	2207      	movs	r2, #7
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43da      	mvns	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	400a      	ands	r2, r1
 80016b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68d9      	ldr	r1, [r3, #12]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4403      	add	r3, r0
 80016d2:	3b1e      	subs	r3, #30
 80016d4:	409a      	lsls	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	e022      	b.n	8001726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6919      	ldr	r1, [r3, #16]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	2207      	movs	r2, #7
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	400a      	ands	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6919      	ldr	r1, [r3, #16]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	4603      	mov	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4403      	add	r3, r0
 800171c:	409a      	lsls	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b06      	cmp	r3, #6
 800172c:	d824      	bhi.n	8001778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b05      	subs	r3, #5
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b05      	subs	r3, #5
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
 8001776:	e04c      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d824      	bhi.n	80017ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b23      	subs	r3, #35	; 0x23
 8001792:	221f      	movs	r2, #31
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43da      	mvns	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	400a      	ands	r2, r1
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	3b23      	subs	r3, #35	; 0x23
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
 80017c8:	e023      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b41      	subs	r3, #65	; 0x41
 80017dc:	221f      	movs	r2, #31
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b41      	subs	r3, #65	; 0x41
 8001806:	fa00 f203 	lsl.w	r2, r0, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_ADC_ConfigChannel+0x234>)
 8001814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_ADC_ConfigChannel+0x238>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d109      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1cc>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b12      	cmp	r3, #18
 8001826:	d105      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_ADC_ConfigChannel+0x238>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d123      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x21e>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b10      	cmp	r3, #16
 8001844:	d003      	beq.n	800184e <HAL_ADC_ConfigChannel+0x1e6>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b11      	cmp	r3, #17
 800184c:	d11b      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b10      	cmp	r3, #16
 8001860:	d111      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_ADC_ConfigChannel+0x240>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9a      	lsrs	r2, r3, #18
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001878:	e002      	b.n	8001880 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3b01      	subs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40012300 	.word	0x40012300
 80018a0:	40012000 	.word	0x40012000
 80018a4:	20000000 	.word	0x20000000
 80018a8:	431bde83 	.word	0x431bde83

080018ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <ADC_Init+0x1f0>)
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <ADC_Init+0x1f4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d022      	beq.n	800198a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6899      	ldr	r1, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e00f      	b.n	80019aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0202 	bic.w	r2, r2, #2
 80019b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e1b      	ldrb	r3, [r3, #24]
 80019c4:	005a      	lsls	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01b      	beq.n	8001a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	3b01      	subs	r3, #1
 8001a04:	035a      	lsls	r2, r3, #13
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e007      	b.n	8001a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	051a      	lsls	r2, r3, #20
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6899      	ldr	r1, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a62:	025a      	lsls	r2, r3, #9
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	029a      	lsls	r2, r3, #10
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40012300 	.word	0x40012300
 8001aa0:	0f000001 	.word	0x0f000001

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff3e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff8e 	bl	8001b98 <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff fc56 	bl	8001584 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e099      	b.n	8001e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	e00f      	b.n	8001d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d06:	f7ff fc3d 	bl	8001584 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d908      	bls.n	8001d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e078      	b.n	8001e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e8      	bne.n	8001d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_DMA_Init+0x158>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d117      	bne.n	8001dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fa6f 	bl	80022b0 <DMA_CheckFifoParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001de6:	2301      	movs	r3, #1
 8001de8:	e016      	b.n	8001e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa26 	bl	8002244 <DMA_CalcBaseAndBitshift>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	223f      	movs	r2, #63	; 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	f010803f 	.word	0xf010803f

08001e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Start_IT+0x26>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e040      	b.n	8001ecc <HAL_DMA_Start_IT+0xa8>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12f      	bne.n	8001ebe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f9b8 	bl	80021e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	223f      	movs	r2, #63	; 0x3f
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0216 	orr.w	r2, r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_DMA_IRQHandler+0x258>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_DMA_IRQHandler+0x25c>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2208      	movs	r2, #8
 8001f00:	409a      	lsls	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0204 	bic.w	r2, r2, #4
 8001f26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2201      	movs	r2, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2201      	movs	r2, #1
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d012      	beq.n	8001fac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2204      	movs	r2, #4
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d043      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03c      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2210      	movs	r2, #16
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d108      	bne.n	8002004 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d024      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
 8002002:	e01f      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
 8002014:	e016      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0208 	bic.w	r2, r2, #8
 8002032:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2220      	movs	r2, #32
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 808e 	beq.w	8002172 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8086 	beq.w	8002172 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2220      	movs	r2, #32
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d136      	bne.n	80020ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0216 	bic.w	r2, r2, #22
 800208c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_DMA_IRQHandler+0x1da>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	223f      	movs	r2, #63	; 0x3f
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d07d      	beq.n	80021de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
        }
        return;
 80020ea:	e078      	b.n	80021de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01c      	beq.n	8002134 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d108      	bne.n	800211a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	2b00      	cmp	r3, #0
 800210e:	d030      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	e02b      	b.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d027      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e022      	b.n	8002172 <HAL_DMA_IRQHandler+0x29e>
 800212c:	20000000 	.word	0x20000000
 8002130:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	2b00      	cmp	r3, #0
 8002178:	d032      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d022      	beq.n	80021cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2205      	movs	r2, #5
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d307      	bcc.n	80021ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f2      	bne.n	800219e <HAL_DMA_IRQHandler+0x2ca>
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021de:	bf00      	nop
    }
  }
}
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop

080021e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d108      	bne.n	8002228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002226:	e007      	b.n	8002238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	60da      	str	r2, [r3, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3b10      	subs	r3, #16
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <DMA_CalcBaseAndBitshift+0x68>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d909      	bls.n	8002286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58
 8002284:	e007      	b.n	8002296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	aaaaaaab 	.word	0xaaaaaaab
 80022ac:	08009a74 	.word	0x08009a74

080022b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11f      	bne.n	800230a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d855      	bhi.n	800237c <DMA_CheckFifoParam+0xcc>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <DMA_CheckFifoParam+0x28>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022fb 	.word	0x080022fb
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	0800237d 	.word	0x0800237d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d045      	beq.n	8002380 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e042      	b.n	8002380 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002302:	d13f      	bne.n	8002384 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e03c      	b.n	8002384 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d121      	bne.n	8002358 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d836      	bhi.n	8002388 <DMA_CheckFifoParam+0xd8>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x70>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002337 	.word	0x08002337
 8002328:	08002331 	.word	0x08002331
 800232c:	08002349 	.word	0x08002349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e02f      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002346:	e021      	b.n	800238c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002350:	d11e      	bne.n	8002390 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002356:	e01b      	b.n	8002390 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d902      	bls.n	8002364 <DMA_CheckFifoParam+0xb4>
 800235e:	2b03      	cmp	r3, #3
 8002360:	d003      	beq.n	800236a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002362:	e018      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e015      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e00b      	b.n	8002394 <DMA_CheckFifoParam+0xe4>
      break;
 800237c:	bf00      	nop
 800237e:	e00a      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002380:	bf00      	nop
 8002382:	e008      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002384:	bf00      	nop
 8002386:	e006      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002388:	bf00      	nop
 800238a:	e004      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 800238c:	bf00      	nop
 800238e:	e002      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;   
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002394:	bf00      	nop
    }
  } 
  
  return status; 
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e159      	b.n	8002674 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8148 	bne.w	800266e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00b      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0xfc>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a2 	beq.w	800266e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a55      	ldr	r2, [pc, #340]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_GPIO_Init+0x2e8>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a48      	ldr	r2, [pc, #288]	; (8002690 <HAL_GPIO_Init+0x2ec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d019      	beq.n	80025a6 <HAL_GPIO_Init+0x202>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a47      	ldr	r2, [pc, #284]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_GPIO_Init+0x1fe>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a46      	ldr	r2, [pc, #280]	; (8002698 <HAL_GPIO_Init+0x2f4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00d      	beq.n	800259e <HAL_GPIO_Init+0x1fa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a45      	ldr	r2, [pc, #276]	; (800269c <HAL_GPIO_Init+0x2f8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x1f6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <HAL_GPIO_Init+0x2fc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_GPIO_Init+0x1f2>
 8002592:	2304      	movs	r3, #4
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 8002596:	2307      	movs	r3, #7
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b8:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_GPIO_Init+0x2e8>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c6:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ea:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_GPIO_Init+0x300>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_GPIO_Init+0x300>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f aea2 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	3724      	adds	r7, #36	; 0x24
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40023800 	.word	0x40023800
 800268c:	40013800 	.word	0x40013800
 8002690:	40020000 	.word	0x40020000
 8002694:	40020400 	.word	0x40020400
 8002698:	40020800 	.word	0x40020800
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e11f      	b.n	800292e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe f8fe 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002740:	f001 fe9c 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a7b      	ldr	r2, [pc, #492]	; (8002938 <HAL_I2C_Init+0x25c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d807      	bhi.n	8002760 <HAL_I2C_Init+0x84>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a7a      	ldr	r2, [pc, #488]	; (800293c <HAL_I2C_Init+0x260>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e006      	b.n	800276e <HAL_I2C_Init+0x92>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a77      	ldr	r2, [pc, #476]	; (8002940 <HAL_I2C_Init+0x264>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0db      	b.n	800292e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a72      	ldr	r2, [pc, #456]	; (8002944 <HAL_I2C_Init+0x268>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9b      	lsrs	r3, r3, #18
 8002780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_I2C_Init+0x25c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d802      	bhi.n	80027b0 <HAL_I2C_Init+0xd4>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3301      	adds	r3, #1
 80027ae:	e009      	b.n	80027c4 <HAL_I2C_Init+0xe8>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	4a63      	ldr	r2, [pc, #396]	; (8002948 <HAL_I2C_Init+0x26c>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	3301      	adds	r3, #1
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4956      	ldr	r1, [pc, #344]	; (8002938 <HAL_I2C_Init+0x25c>)
 80027e0:	428b      	cmp	r3, r1
 80027e2:	d80d      	bhi.n	8002800 <HAL_I2C_Init+0x124>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e59      	subs	r1, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	bf38      	it	cc
 80027fc:	2304      	movcc	r3, #4
 80027fe:	e04f      	b.n	80028a0 <HAL_I2C_Init+0x1c4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <HAL_I2C_Init+0x150>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	440b      	add	r3, r1
 8002816:	fbb0 f3f3 	udiv	r3, r0, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e012      	b.n	8002852 <HAL_I2C_Init+0x176>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e58      	subs	r0, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	0099      	lsls	r1, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Init+0x17e>
 8002856:	2301      	movs	r3, #1
 8002858:	e022      	b.n	80028a0 <HAL_I2C_Init+0x1c4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10e      	bne.n	8002880 <HAL_I2C_Init+0x1a4>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e58      	subs	r0, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	440b      	add	r3, r1
 8002870:	fbb0 f3f3 	udiv	r3, r0, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	e00f      	b.n	80028a0 <HAL_I2C_Init+0x1c4>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	6809      	ldr	r1, [r1, #0]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6911      	ldr	r1, [r2, #16]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	000186a0 	.word	0x000186a0
 800293c:	001e847f 	.word	0x001e847f
 8002940:	003d08ff 	.word	0x003d08ff
 8002944:	431bde83 	.word	0x431bde83
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b08f      	sub	sp, #60	; 0x3c
 8002950:	af0a      	add	r7, sp, #40	; 0x28
 8002952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e10f      	b.n	8002b7e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f005 fe15 	bl	80085a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fe38 	bl	8005612 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	687e      	ldr	r6, [r7, #4]
 80029aa:	466d      	mov	r5, sp
 80029ac:	f106 0410 	add.w	r4, r6, #16
 80029b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c0:	1d33      	adds	r3, r6, #4
 80029c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f002 fd0f 	bl	80053e8 <USB_CoreInit>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fe26 	bl	8005634 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e04a      	b.n	8002a84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	333d      	adds	r3, #61	; 0x3d
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	333c      	adds	r3, #60	; 0x3c
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3342      	adds	r3, #66	; 0x42
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	333f      	adds	r3, #63	; 0x3f
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3344      	adds	r3, #68	; 0x44
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3348      	adds	r3, #72	; 0x48
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3350      	adds	r3, #80	; 0x50
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3af      	bcc.n	80029ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e044      	b.n	8002b1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3b5      	bcc.n	8002a94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	687e      	ldr	r6, [r7, #4]
 8002b30:	466d      	mov	r5, sp
 8002b32:	f106 0410 	add.w	r4, r6, #16
 8002b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b42:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b46:	1d33      	adds	r3, r6, #4
 8002b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b4a:	6838      	ldr	r0, [r7, #0]
 8002b4c:	f002 fd9c 	bl	8005688 <USB_DevInit>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00d      	b.n	8002b7e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fde4 	bl	8006744 <USB_DevDisconnect>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_Start+0x1c>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e020      	b.n	8002be4 <HAL_PCD_Start+0x5e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d109      	bne.n	8002bc6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fd10 	bl	80055f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fd94 	bl	8006702 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b08d      	sub	sp, #52	; 0x34
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 fe52 	bl	80068ac <USB_GetMode>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f040 839d 	bne.w	800334a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fdb6 	bl	8006786 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8393 	beq.w	8003348 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fdad 	bl	8006786 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 0202 	and.w	r2, r2, #2
 8002c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fd9b 	bl	8006786 <USB_ReadInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d161      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	0c5b      	lsrs	r3, r3, #17
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d124      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d035      	beq.n	8002d0e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6a38      	ldr	r0, [r7, #32]
 8002cb6:	f003 fc01 	bl	80064bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc6:	441a      	add	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd8:	441a      	add	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	619a      	str	r2, [r3, #24]
 8002cde:	e016      	b.n	8002d0e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	0c5b      	lsrs	r3, r3, #17
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d110      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6a38      	ldr	r0, [r7, #32]
 8002cf8:	f003 fbe0 	bl	80064bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d08:	441a      	add	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0210 	orr.w	r2, r2, #16
 8002d1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fd2f 	bl	8006786 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d32:	d16e      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fd35 	bl	80067ac <USB_ReadDevAllOutEpInterrupt>
 8002d42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d44:	e062      	b.n	8002e0c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d057      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fd5a 	bl	8006814 <USB_ReadDevOutEPInterrupt>
 8002d60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fdb1 	bl	80038e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00c      	beq.n	8002daa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2308      	movs	r3, #8
 8002da0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 feab 	bl	8003b00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2320      	movs	r3, #32
 8002de0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	3301      	adds	r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d199      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fcb5 	bl	8006786 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e26:	f040 80c0 	bne.w	8002faa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fcd6 	bl	80067e0 <USB_ReadDevAllInEpInterrupt>
 8002e34:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e3a:	e0b2      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80a7 	beq.w	8002f96 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fcfc 	bl	8006850 <USB_ReadDevInEPInterrupt>
 8002e58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d057      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69f9      	ldr	r1, [r7, #28]
 8002e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e84:	4013      	ands	r3, r2
 8002e86:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d132      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3348      	adds	r3, #72	; 0x48
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4403      	add	r3, r0
 8002ec2:	3344      	adds	r3, #68	; 0x44
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4419      	add	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4403      	add	r3, r0
 8002ed6:	3348      	adds	r3, #72	; 0x48
 8002ed8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d113      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x31c>
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3350      	adds	r3, #80	; 0x50
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f00:	461a      	mov	r2, r3
 8002f02:	2101      	movs	r1, #1
 8002f04:	f003 fd04 	bl	8006910 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f005 fbcb 	bl	80086aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f46:	461a      	mov	r2, r3
 8002f48:	2310      	movs	r3, #16
 8002f4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f62:	461a      	mov	r2, r3
 8002f64:	2340      	movs	r3, #64	; 0x40
 8002f66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2302      	movs	r3, #2
 8002f82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fc1b 	bl	80037cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af49 	bne.w	8002e3c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fbe9 	bl	8006786 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fbe:	d122      	bne.n	8003006 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d108      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fe27 	bl	8003c3c <HAL_PCDEx_LPM_Callback>
 8002fee:	e002      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f005 fbd1 	bl	8008798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fbbb 	bl	8006786 <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301a:	d112      	bne.n	8003042 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f005 fb8d 	bl	800874c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003040:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fb9d 	bl	8006786 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	f040 80c7 	bne.w	80031e8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2110      	movs	r1, #16
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fc6b 	bl	8005950 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	e056      	b.n	800312e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308c:	461a      	mov	r2, r3
 800308e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003092:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	0151      	lsls	r1, r2, #5
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	440a      	add	r2, r1
 80030ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e0:	461a      	mov	r2, r3
 80030e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f8:	0151      	lsls	r1, r2, #5
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	440a      	add	r2, r1
 80030fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003106:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	0151      	lsls	r1, r2, #5
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	440a      	add	r2, r1
 800311e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003126:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	3301      	adds	r3, #1
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003134:	429a      	cmp	r2, r3
 8003136:	d3a3      	bcc.n	8003080 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003146:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800314a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003164:	f043 030b 	orr.w	r3, r3, #11
 8003168:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f043 030b 	orr.w	r3, r3, #11
 800317e:	6453      	str	r3, [r2, #68]	; 0x44
 8003180:	e015      	b.n	80031ae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003194:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003198:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a8:	f043 030b 	orr.w	r3, r3, #11
 80031ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031d2:	461a      	mov	r2, r3
 80031d4:	f003 fb9c 	bl	8006910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 faca 	bl	8006786 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fc:	d124      	bne.n	8003248 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 fb60 	bl	80068c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f002 fc00 	bl	8005a12 <USB_GetDevSpeed>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681c      	ldr	r4, [r3, #0]
 800321e:	f001 f921 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8003222:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	4620      	mov	r0, r4
 800322e:	f002 f93d 	bl	80054ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f005 fa61 	bl	80086fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003246:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fa9a 	bl	8006786 <USB_ReadInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b08      	cmp	r3, #8
 800325a:	d10a      	bne.n	8003272 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f005 fa3e 	bl	80086de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 0208 	and.w	r2, r2, #8
 8003270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fa85 	bl	8006786 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003286:	d10f      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f005 faa0 	bl	80087d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 fa6a 	bl	8006786 <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032bc:	d10f      	bne.n	80032de <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f005 fa73 	bl	80087b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f003 fa4f 	bl	8006786 <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d10a      	bne.n	800330a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f005 fa81 	bl	80087fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fa39 	bl	8006786 <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d115      	bne.n	800334a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f005 fa71 	bl	8008818 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	e000      	b.n	800334a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003348:	bf00      	nop
    }
  }
}
 800334a:	3734      	adds	r7, #52	; 0x34
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_SetAddress+0x1a>
 8003366:	2302      	movs	r3, #2
 8003368:	e013      	b.n	8003392 <HAL_PCD_SetAddress+0x42>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f003 f997 	bl	80066b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	4608      	mov	r0, r1
 80033a4:	4611      	mov	r1, r2
 80033a6:	461a      	mov	r2, r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	70fb      	strb	r3, [r7, #3]
 80033ac:	460b      	mov	r3, r1
 80033ae:	803b      	strh	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0f      	bge.n	80033e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00f      	b.n	8003400 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800340c:	883a      	ldrh	r2, [r7, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	78ba      	ldrb	r2, [r7, #2]
 8003416:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800342a:	78bb      	ldrb	r3, [r7, #2]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d102      	bne.n	8003436 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_PCD_EP_Open+0xaa>
 8003440:	2302      	movs	r3, #2
 8003442:	e00e      	b.n	8003462 <HAL_PCD_EP_Open+0xc8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fb02 	bl	8005a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003460:	7afb      	ldrb	r3, [r7, #11]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347a:	2b00      	cmp	r3, #0
 800347c:	da0f      	bge.n	800349e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 020f 	and.w	r2, r3, #15
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3338      	adds	r3, #56	; 0x38
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	705a      	strb	r2, [r3, #1]
 800349c:	e00f      	b.n	80034be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_PCD_EP_Close+0x6e>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e00e      	b.n	80034f6 <HAL_PCD_EP_Close+0x8c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 fb40 	bl	8005b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	460b      	mov	r3, r1
 800350c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800350e:	7afb      	ldrb	r3, [r7, #11]
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	3304      	adds	r3, #4
 8003526:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2200      	movs	r2, #0
 8003538:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003540:	7afb      	ldrb	r3, [r7, #11]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	b2da      	uxtb	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d102      	bne.n	800355a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	6979      	ldr	r1, [r7, #20]
 8003572:	f002 fe1b 	bl	80061ac <USB_EP0StartXfer>
 8003576:	e008      	b.n	800358a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	f002 fbcd 	bl	8005d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	460b      	mov	r3, r1
 80035d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	3338      	adds	r3, #56	; 0x38
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2201      	movs	r2, #1
 8003602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2da      	uxtb	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	f002 fdb9 	bl	80061ac <USB_EP0StartXfer>
 800363a:	e008      	b.n	800364e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	f002 fb6b 	bl	8005d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d901      	bls.n	8003676 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e050      	b.n	8003718 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	da0f      	bge.n	800369e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3338      	adds	r3, #56	; 0x38
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	705a      	strb	r2, [r3, #1]
 800369c:	e00d      	b.n	80036ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_PCD_EP_SetStall+0x82>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e01e      	b.n	8003718 <HAL_PCD_EP_SetStall+0xc0>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 ff10 	bl	800650e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	b2d9      	uxtb	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003708:	461a      	mov	r2, r3
 800370a:	f003 f901 	bl	8006910 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	429a      	cmp	r2, r3
 8003738:	d901      	bls.n	800373e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e042      	b.n	80037c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800373e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003742:	2b00      	cmp	r3, #0
 8003744:	da0f      	bge.n	8003766 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 020f 	and.w	r2, r3, #15
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3338      	adds	r3, #56	; 0x38
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	705a      	strb	r2, [r3, #1]
 8003764:	e00f      	b.n	8003786 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	3304      	adds	r3, #4
 800377e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_PCD_EP_ClrStall+0x86>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e00e      	b.n	80037c4 <HAL_PCD_EP_ClrStall+0xa4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 ff18 	bl	80065ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3338      	adds	r3, #56	; 0x38
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d901      	bls.n	8003804 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e06c      	b.n	80038de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	429a      	cmp	r2, r3
 8003818:	d902      	bls.n	8003820 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3303      	adds	r3, #3
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003828:	e02b      	b.n	8003882 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	429a      	cmp	r2, r3
 800383e:	d902      	bls.n	8003846 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3303      	adds	r3, #3
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68d9      	ldr	r1, [r3, #12]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800385e:	b2db      	uxtb	r3, r3
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	4603      	mov	r3, r0
 8003864:	6978      	ldr	r0, [r7, #20]
 8003866:	f002 fdf4 	bl	8006452 <USB_WritePacket>

    ep->xfer_buff  += len;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	441a      	add	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	b29b      	uxth	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d809      	bhi.n	80038ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d203      	bcs.n	80038ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1be      	bne.n	800382a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d811      	bhi.n	80038dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	2201      	movs	r2, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	6939      	ldr	r1, [r7, #16]
 80038d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d8:	4013      	ands	r3, r2
 80038da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	333c      	adds	r3, #60	; 0x3c
 8003900:	3304      	adds	r3, #4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	f040 80a0 	bne.w	8003a60 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d015      	beq.n	8003956 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <PCD_EP_OutXfrComplete_int+0x210>)
 800392e:	4293      	cmp	r3, r2
 8003930:	f240 80dd 	bls.w	8003aee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80d7 	beq.w	8003aee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	6093      	str	r3, [r2, #8]
 8003954:	e0cb      	b.n	8003aee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d009      	beq.n	8003974 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	2320      	movs	r3, #32
 8003970:	6093      	str	r3, [r2, #8]
 8003972:	e0bc      	b.n	8003aee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 80b7 	bne.w	8003aee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a5d      	ldr	r2, [pc, #372]	; (8003af8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d90f      	bls.n	80039a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	461a      	mov	r2, r3
 80039a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a4:	6093      	str	r3, [r2, #8]
 80039a6:	e0a2      	b.n	8003aee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	0159      	lsls	r1, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	440b      	add	r3, r1
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80039ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4403      	add	r3, r0
 80039de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4403      	add	r3, r0
 8003a06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4419      	add	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4403      	add	r3, r0
 8003a1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a20:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d114      	bne.n	8003a52 <PCD_EP_OutXfrComplete_int+0x16a>
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	f002 ff5f 	bl	8006910 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f004 fe0b 	bl	8008674 <HAL_PCD_DataOutStageCallback>
 8003a5e:	e046      	b.n	8003aee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a26      	ldr	r2, [pc, #152]	; (8003afc <PCD_EP_OutXfrComplete_int+0x214>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d124      	bne.n	8003ab2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a84:	6093      	str	r3, [r2, #8]
 8003a86:	e032      	b.n	8003aee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f004 fde2 	bl	8008674 <HAL_PCD_DataOutStageCallback>
 8003ab0:	e01d      	b.n	8003aee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d114      	bne.n	8003ae2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d108      	bne.n	8003ae2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ada:	461a      	mov	r2, r3
 8003adc:	2100      	movs	r1, #0
 8003ade:	f002 ff17 	bl	8006910 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f004 fdc3 	bl	8008674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	4f54300a 	.word	0x4f54300a
 8003afc:	4f54310a 	.word	0x4f54310a

08003b00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	333c      	adds	r3, #60	; 0x3c
 8003b18:	3304      	adds	r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d90e      	bls.n	8003b54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f004 fd7b 	bl	8008650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d90c      	bls.n	8003b7c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d108      	bne.n	8003b7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b74:	461a      	mov	r2, r3
 8003b76:	2101      	movs	r1, #1
 8003b78:	f002 feca 	bl	8006910 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	4f54300a 	.word	0x4f54300a

08003b8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003baa:	883b      	ldrh	r3, [r7, #0]
 8003bac:	0419      	lsls	r1, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb8:	e028      	b.n	8003c0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]
 8003bcc:	e00d      	b.n	8003bea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	3340      	adds	r3, #64	; 0x40
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4413      	add	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	3301      	adds	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3ec      	bcc.n	8003bce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bf4:	883b      	ldrh	r3, [r7, #0]
 8003bf6:	0418      	lsls	r0, r3, #16
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	4302      	orrs	r2, r0
 8003c04:	3340      	adds	r3, #64	; 0x40
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e25b      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d075      	beq.n	8003d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	4ba3      	ldr	r3, [pc, #652]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4ba0      	ldr	r3, [pc, #640]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d112      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8a:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05b      	beq.n	8003d5c <HAL_RCC_OscConfig+0x108>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d157      	bne.n	8003d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e236      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x74>
 8003cba:	4b91      	ldr	r3, [pc, #580]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x98>
 8003cd2:	4b8b      	ldr	r3, [pc, #556]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a8a      	ldr	r2, [pc, #552]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a87      	ldr	r2, [pc, #540]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cec:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a83      	ldr	r2, [pc, #524]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a80      	ldr	r2, [pc, #512]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fc3a 	bl	8001584 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd fc36 	bl	8001584 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1fb      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xc0>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd fc26 	bl	8001584 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fc22 	bl	8001584 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1e7      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0xe8>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b5c      	ldr	r3, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1bb      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4952      	ldr	r1, [pc, #328]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_RCC_OscConfig+0x2b0>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd fbdb 	bl	8001584 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fd fbd7 	bl	8001584 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e19c      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4940      	ldr	r1, [pc, #256]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCC_OscConfig+0x2b0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fbba 	bl	8001584 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fd fbb6 	bl	8001584 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e17b      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d030      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_RCC_OscConfig+0x2b4>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fb9a 	bl	8001584 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fd fb96 	bl	8001584 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e15b      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x200>
 8003e72:	e015      	b.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x2b4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fb83 	bl	8001584 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fd fb7f 	bl	8001584 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e144      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a0 	beq.w	8003fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d121      	bne.n	8003f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fb45 	bl	8001584 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e011      	b.n	8003f22 <HAL_RCC_OscConfig+0x2ce>
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
 8003f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f10:	f7fd fb38 	bl	8001584 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0fd      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCC_OscConfig+0x4d4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x2f0>
 8003f36:	4b7d      	ldr	r3, [pc, #500]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	e01c      	b.n	8003f7e <HAL_RCC_OscConfig+0x32a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x312>
 8003f4c:	4b77      	ldr	r3, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	4b74      	ldr	r3, [pc, #464]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a73      	ldr	r2, [pc, #460]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	e00b      	b.n	8003f7e <HAL_RCC_OscConfig+0x32a>
 8003f66:	4b71      	ldr	r3, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a6d      	ldr	r2, [pc, #436]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fd fafd 	bl	8001584 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd faf9 	bl	8001584 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0bc      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCC_OscConfig+0x33a>
 8003fb0:	e014      	b.n	8003fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fae7 	bl	8001584 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fd fae3 	bl	8001584 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0a6      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ee      	bne.n	8003fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a51      	ldr	r2, [pc, #324]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8092 	beq.w	800411c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d05c      	beq.n	80040be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d141      	bne.n	8004090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCC_OscConfig+0x4dc>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fd fab7 	bl	8001584 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd fab3 	bl	8001584 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e078      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	019b      	lsls	r3, r3, #6
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	4933      	ldr	r1, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004062:	4b33      	ldr	r3, [pc, #204]	; (8004130 <HAL_RCC_OscConfig+0x4dc>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd fa8c 	bl	8001584 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd fa88 	bl	8001584 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e04d      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x41c>
 800408e:	e045      	b.n	800411c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x4dc>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fd fa75 	bl	8001584 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409e:	f7fd fa71 	bl	8001584 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e036      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x44a>
 80040bc:	e02e      	b.n	800411c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e029      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d115      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000
 800412c:	40023800 	.word	0x40023800
 8004130:	42470060 	.word	0x42470060

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0cc      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b68      	ldr	r3, [pc, #416]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d90c      	bls.n	8004170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d044      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d119      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e067      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4934      	ldr	r1, [pc, #208]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fd f9ae 	bl	8001584 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fd f9aa 	bl	8001584 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e04f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20c      	bcs.n	800427c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4601      	mov	r1, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	5cd3      	ldrb	r3, [r2, r3]
 80042ce:	fa21 f303 	lsr.w	r3, r1, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd f90e 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08009a5c 	.word	0x08009a5c
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	2300      	movs	r3, #0
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004316:	4b50      	ldr	r3, [pc, #320]	; (8004458 <HAL_RCC_GetSysClockFreq+0x158>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b04      	cmp	r3, #4
 8004320:	d007      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x32>
 8004322:	2b08      	cmp	r3, #8
 8004324:	d008      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x38>
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 808d 	bne.w	8004446 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <HAL_RCC_GetSysClockFreq+0x15c>)
 800432e:	60bb      	str	r3, [r7, #8]
       break;
 8004330:	e08c      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004332:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004334:	60bb      	str	r3, [r7, #8]
      break;
 8004336:	e089      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004338:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCC_GetSysClockFreq+0x158>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004340:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004342:	4b45      	ldr	r3, [pc, #276]	; (8004458 <HAL_RCC_GetSysClockFreq+0x158>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d023      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_RCC_GetSysClockFreq+0x158>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	f240 11ff 	movw	r1, #511	; 0x1ff
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	ea03 0501 	and.w	r5, r3, r1
 8004364:	ea04 0602 	and.w	r6, r4, r2
 8004368:	4a3d      	ldr	r2, [pc, #244]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 800436a:	fb02 f106 	mul.w	r1, r2, r6
 800436e:	2200      	movs	r2, #0
 8004370:	fb02 f205 	mul.w	r2, r2, r5
 8004374:	440a      	add	r2, r1
 8004376:	493a      	ldr	r1, [pc, #232]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004378:	fba5 0101 	umull	r0, r1, r5, r1
 800437c:	1853      	adds	r3, r2, r1
 800437e:	4619      	mov	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	f7fb ff79 	bl	8000280 <__aeabi_uldivmod>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e049      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b30      	ldr	r3, [pc, #192]	; (8004458 <HAL_RCC_GetSysClockFreq+0x158>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	ea03 0501 	and.w	r5, r3, r1
 80043ac:	ea04 0602 	and.w	r6, r4, r2
 80043b0:	4629      	mov	r1, r5
 80043b2:	4632      	mov	r2, r6
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	f04f 0400 	mov.w	r4, #0
 80043bc:	0154      	lsls	r4, r2, #5
 80043be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043c2:	014b      	lsls	r3, r1, #5
 80043c4:	4619      	mov	r1, r3
 80043c6:	4622      	mov	r2, r4
 80043c8:	1b49      	subs	r1, r1, r5
 80043ca:	eb62 0206 	sbc.w	r2, r2, r6
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f04f 0400 	mov.w	r4, #0
 80043d6:	0194      	lsls	r4, r2, #6
 80043d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043dc:	018b      	lsls	r3, r1, #6
 80043de:	1a5b      	subs	r3, r3, r1
 80043e0:	eb64 0402 	sbc.w	r4, r4, r2
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	00e2      	lsls	r2, r4, #3
 80043ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043f2:	00d9      	lsls	r1, r3, #3
 80043f4:	460b      	mov	r3, r1
 80043f6:	4614      	mov	r4, r2
 80043f8:	195b      	adds	r3, r3, r5
 80043fa:	eb44 0406 	adc.w	r4, r4, r6
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	02a2      	lsls	r2, r4, #10
 8004408:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800440c:	0299      	lsls	r1, r3, #10
 800440e:	460b      	mov	r3, r1
 8004410:	4614      	mov	r4, r2
 8004412:	4618      	mov	r0, r3
 8004414:	4621      	mov	r1, r4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f04f 0400 	mov.w	r4, #0
 800441c:	461a      	mov	r2, r3
 800441e:	4623      	mov	r3, r4
 8004420:	f7fb ff2e 	bl	8000280 <__aeabi_uldivmod>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
 8004428:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_GetSysClockFreq+0x158>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	3301      	adds	r3, #1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	60bb      	str	r3, [r7, #8]
      break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004448:	60bb      	str	r3, [r7, #8]
      break;
 800444a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444c:	68bb      	ldr	r3, [r7, #8]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400
 8004460:	017d7840 	.word	0x017d7840

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4601      	mov	r1, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a9b      	lsrs	r3, r3, #10
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	08009a6c 	.word	0x08009a6c

080044a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e056      	b.n	8004564 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fc fb2f 	bl	8000b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	ea42 0103 	orr.w	r1, r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	f003 0104 	and.w	r1, r3, #4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004552:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_SPI_Transmit_DMA+0x20>
 8004588:	2302      	movs	r3, #2
 800458a:	e093      	b.n	80046b4 <HAL_SPI_Transmit_DMA+0x148>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
 80045a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045a4:	e081      	b.n	80046aa <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_SPI_Transmit_DMA+0x46>
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045b6:	e078      	b.n	80046aa <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2203      	movs	r2, #3
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fe:	d107      	bne.n	8004610 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800460e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	4a29      	ldr	r2, [pc, #164]	; (80046bc <HAL_SPI_Transmit_DMA+0x150>)
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	4a28      	ldr	r2, [pc, #160]	; (80046c0 <HAL_SPI_Transmit_DMA+0x154>)
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004624:	4a27      	ldr	r2, [pc, #156]	; (80046c4 <HAL_SPI_Transmit_DMA+0x158>)
 8004626:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	2200      	movs	r2, #0
 800462e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	4619      	mov	r1, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004648:	f7fd fbec 	bl	8001e24 <HAL_DMA_Start_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800466a:	e01e      	b.n	80046aa <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d007      	beq.n	800468a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0220 	orr.w	r2, r2, #32
 8004698:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0202 	orr.w	r2, r2, #2
 80046a8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	080047ad 	.word	0x080047ad
 80046c0:	08004705 	.word	0x08004705
 80046c4:	080047c9 	.word	0x080047c9

080046c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004712:	f7fc ff37 	bl	8001584 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d03b      	beq.n	80047a0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0220 	bic.w	r2, r2, #32
 8004736:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0202 	bic.w	r2, r2, #2
 8004746:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	2164      	movs	r1, #100	; 0x64
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f000 f8c5 	bl	80048dc <SPI_EndRxTxTransaction>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f7ff ffa9 	bl	80046f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800479e:	e002      	b.n	80047a6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7ff ff91 	bl	80046c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ff8e 	bl	80046dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0203 	bic.w	r2, r2, #3
 80047e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f043 0210 	orr.w	r2, r3, #16
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff78 	bl	80046f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004818:	e04c      	b.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d048      	beq.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004822:	f7fc feaf 	bl	8001584 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d902      	bls.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d13d      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004846:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004850:	d111      	bne.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485a:	d004      	beq.n	8004866 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d107      	bne.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487e:	d10f      	bne.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800489e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e00f      	b.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d1a3      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <SPI_EndRxTxTransaction+0x7c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <SPI_EndRxTxTransaction+0x80>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	0d5b      	lsrs	r3, r3, #21
 80048f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004906:	d112      	bne.n	800492e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff78 	bl	8004808 <SPI_WaitFlagStateUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00f      	b.n	800494e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3b01      	subs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	d0f2      	beq.n	800492e <SPI_EndRxTxTransaction+0x52>
 8004948:	e000      	b.n	800494c <SPI_EndRxTxTransaction+0x70>
        break;
 800494a:	bf00      	nop
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000
 800495c:	165e9f81 	.word	0x165e9f81

08004960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e01d      	b.n	80049ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fd10 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 f9bc 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e01d      	b.n	8004a04 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f815 	bl	8004a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 f991 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e0b4      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	f200 809f 	bhi.w	8004b90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a8d 	.word	0x08004a8d
 8004a5c:	08004b91 	.word	0x08004b91
 8004a60:	08004b91 	.word	0x08004b91
 8004a64:	08004b91 	.word	0x08004b91
 8004a68:	08004acd 	.word	0x08004acd
 8004a6c:	08004b91 	.word	0x08004b91
 8004a70:	08004b91 	.word	0x08004b91
 8004a74:	08004b91 	.word	0x08004b91
 8004a78:	08004b0f 	.word	0x08004b0f
 8004a7c:	08004b91 	.word	0x08004b91
 8004a80:	08004b91 	.word	0x08004b91
 8004a84:	08004b91 	.word	0x08004b91
 8004a88:	08004b4f 	.word	0x08004b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f9c2 	bl	8004e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e062      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa08 	bl	8004ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e041      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa53 	bl	8004fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e021      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa9d 	bl	8005094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e000      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_ConfigClockSource+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0a6      	b.n	8004d12 <HAL_TIM_ConfigClockSource+0x166>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d067      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x120>
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d80b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x6c>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d073      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d802      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x62>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d06f      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c0c:	e078      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d06c      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	d06a      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c16:	e073      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d00d      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x8c>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d804      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x7e>
 8004c20:	2b50      	cmp	r3, #80	; 0x50
 8004c22:	d033      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0xe0>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d041      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c28:	e06a      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d066      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x152>
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c34:	d017      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c36:	e063      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f000 faee 	bl	8005228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	609a      	str	r2, [r3, #8]
      break;
 8004c64:	e04c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6899      	ldr	r1, [r3, #8]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f000 fad7 	bl	8005228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c88:	609a      	str	r2, [r3, #8]
      break;
 8004c8a:	e039      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f000 fa4b 	bl	8005134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2150      	movs	r1, #80	; 0x50
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 faa4 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004caa:	e029      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6859      	ldr	r1, [r3, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f000 fa6a 	bl	8005192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2160      	movs	r1, #96	; 0x60
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fa94 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cca:	e019      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f000 fa2b 	bl	8005134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2140      	movs	r1, #64	; 0x40
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fa84 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cea:	e009      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fa7b 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a34      	ldr	r2, [pc, #208]	; (8004e00 <TIM_Base_SetConfig+0xe4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a31      	ldr	r2, [pc, #196]	; (8004e04 <TIM_Base_SetConfig+0xe8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a30      	ldr	r2, [pc, #192]	; (8004e08 <TIM_Base_SetConfig+0xec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <TIM_Base_SetConfig+0xf0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <TIM_Base_SetConfig+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <TIM_Base_SetConfig+0xe8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <TIM_Base_SetConfig+0xec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <TIM_Base_SetConfig+0xf0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <TIM_Base_SetConfig+0xf4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <TIM_Base_SetConfig+0xf8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <TIM_Base_SetConfig+0xfc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <TIM_Base_SetConfig+0xe4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0302 	bic.w	r3, r3, #2
 8004e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <TIM_OC1_SetConfig+0xc8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d10c      	bne.n	8004e92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 0308 	bic.w	r3, r3, #8
 8004e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 0304 	bic.w	r3, r3, #4
 8004e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <TIM_OC1_SetConfig+0xc8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d111      	bne.n	8004ebe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40010000 	.word	0x40010000

08004ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0210 	bic.w	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0320 	bic.w	r3, r3, #32
 8004f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <TIM_OC2_SetConfig+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d10d      	bne.n	8004f64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <TIM_OC2_SetConfig+0xd4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d113      	bne.n	8004f94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000

08004fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <TIM_OC3_SetConfig+0xd0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d10d      	bne.n	800503a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a14      	ldr	r2, [pc, #80]	; (8005090 <TIM_OC3_SetConfig+0xd0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d113      	bne.n	800506a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40010000 	.word	0x40010000

08005094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a10      	ldr	r2, [pc, #64]	; (8005130 <TIM_OC4_SetConfig+0x9c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000

08005134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 030a 	bic.w	r3, r3, #10
 8005170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005192:	b480      	push	{r7}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	031b      	lsls	r3, r3, #12
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e050      	b.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d018      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d013      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10c      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40014000 	.word	0x40014000

08005344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800535c:	2302      	movs	r3, #2
 800535e:	e03d      	b.n	80053dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e8:	b084      	sub	sp, #16
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	f107 001c 	add.w	r0, r7, #28
 80053f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d122      	bne.n	8005446 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 fac6 	bl	80069cc <USB_CoreReset>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e01a      	b.n	800547c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 faba 	bl	80069cc <USB_CoreReset>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
 800546e:	e005      	b.n	800547c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10b      	bne.n	800549a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f043 0206 	orr.w	r2, r3, #6
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a6:	b004      	add	sp, #16
 80054a8:	4770      	bx	lr
	...

080054ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d165      	bne.n	800558c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a41      	ldr	r2, [pc, #260]	; (80055c8 <USB_SetTurnaroundTime+0x11c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d906      	bls.n	80054d6 <USB_SetTurnaroundTime+0x2a>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a40      	ldr	r2, [pc, #256]	; (80055cc <USB_SetTurnaroundTime+0x120>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d802      	bhi.n	80054d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054d0:	230f      	movs	r3, #15
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e062      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a3c      	ldr	r2, [pc, #240]	; (80055cc <USB_SetTurnaroundTime+0x120>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d906      	bls.n	80054ec <USB_SetTurnaroundTime+0x40>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <USB_SetTurnaroundTime+0x124>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e6:	230e      	movs	r3, #14
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e057      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <USB_SetTurnaroundTime+0x124>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d906      	bls.n	8005502 <USB_SetTurnaroundTime+0x56>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <USB_SetTurnaroundTime+0x128>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d802      	bhi.n	8005502 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054fc:	230d      	movs	r3, #13
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e04c      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a33      	ldr	r2, [pc, #204]	; (80055d4 <USB_SetTurnaroundTime+0x128>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d906      	bls.n	8005518 <USB_SetTurnaroundTime+0x6c>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a32      	ldr	r2, [pc, #200]	; (80055d8 <USB_SetTurnaroundTime+0x12c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d802      	bhi.n	8005518 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005512:	230c      	movs	r3, #12
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e041      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <USB_SetTurnaroundTime+0x12c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d906      	bls.n	800552e <USB_SetTurnaroundTime+0x82>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a2e      	ldr	r2, [pc, #184]	; (80055dc <USB_SetTurnaroundTime+0x130>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d802      	bhi.n	800552e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005528:	230b      	movs	r3, #11
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e036      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <USB_SetTurnaroundTime+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d906      	bls.n	8005544 <USB_SetTurnaroundTime+0x98>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <USB_SetTurnaroundTime+0x134>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d802      	bhi.n	8005544 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553e:	230a      	movs	r3, #10
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e02b      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <USB_SetTurnaroundTime+0x134>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d906      	bls.n	800555a <USB_SetTurnaroundTime+0xae>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <USB_SetTurnaroundTime+0x138>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d802      	bhi.n	800555a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005554:	2309      	movs	r3, #9
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e020      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <USB_SetTurnaroundTime+0x138>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d906      	bls.n	8005570 <USB_SetTurnaroundTime+0xc4>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <USB_SetTurnaroundTime+0x13c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d802      	bhi.n	8005570 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800556a:	2308      	movs	r3, #8
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e015      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <USB_SetTurnaroundTime+0x13c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d906      	bls.n	8005586 <USB_SetTurnaroundTime+0xda>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <USB_SetTurnaroundTime+0x140>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d802      	bhi.n	8005586 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005580:	2307      	movs	r3, #7
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e00a      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005586:	2306      	movs	r3, #6
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e007      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005592:	2309      	movs	r3, #9
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e001      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005598:	2309      	movs	r3, #9
 800559a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	029b      	lsls	r3, r3, #10
 80055b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	00d8acbf 	.word	0x00d8acbf
 80055cc:	00e4e1bf 	.word	0x00e4e1bf
 80055d0:	00f423ff 	.word	0x00f423ff
 80055d4:	0106737f 	.word	0x0106737f
 80055d8:	011a499f 	.word	0x011a499f
 80055dc:	01312cff 	.word	0x01312cff
 80055e0:	014ca43f 	.word	0x014ca43f
 80055e4:	016e35ff 	.word	0x016e35ff
 80055e8:	01a6ab1f 	.word	0x01a6ab1f
 80055ec:	01e847ff 	.word	0x01e847ff

080055f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f023 0201 	bic.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d106      	bne.n	8005660 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	e00b      	b.n	8005678 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60da      	str	r2, [r3, #12]
 8005672:	e001      	b.n	8005678 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e003      	b.n	8005680 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005678:	2032      	movs	r0, #50	; 0x32
 800567a:	f7fb ff8f 	bl	800159c <HAL_Delay>

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005688:	b084      	sub	sp, #16
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e009      	b.n	80056bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	3340      	adds	r3, #64	; 0x40
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	2200      	movs	r2, #0
 80056b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	3301      	adds	r3, #1
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b0e      	cmp	r3, #14
 80056c0:	d9f2      	bls.n	80056a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d11c      	bne.n	8005702 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d6:	f043 0302 	orr.w	r3, r3, #2
 80056da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005700:	e00b      	b.n	800571a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005720:	461a      	mov	r2, r3
 8005722:	2300      	movs	r3, #0
 8005724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	4619      	mov	r1, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	461a      	mov	r2, r3
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10c      	bne.n	800575a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d104      	bne.n	8005750 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005746:	2100      	movs	r1, #0
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f949 	bl	80059e0 <USB_SetDevSpeed>
 800574e:	e008      	b.n	8005762 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005750:	2101      	movs	r1, #1
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f944 	bl	80059e0 <USB_SetDevSpeed>
 8005758:	e003      	b.n	8005762 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800575a:	2103      	movs	r1, #3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f93f 	bl	80059e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005762:	2110      	movs	r1, #16
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8f3 	bl	8005950 <USB_FlushTxFifo>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f911 	bl	800599c <USB_FlushRxFifo>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	461a      	mov	r2, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e043      	b.n	8005836 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c4:	d118      	bne.n	80057f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e013      	b.n	800580a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e008      	b.n	800580a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800582e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3301      	adds	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b7      	bcc.n	80057ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	e043      	b.n	80058cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800585a:	d118      	bne.n	800588e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e013      	b.n	80058a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e008      	b.n	80058a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	461a      	mov	r2, r3
 800589c:	2300      	movs	r3, #0
 800589e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3b7      	bcc.n	8005844 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f043 0210 	orr.w	r2, r3, #16
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <USB_DevInit+0x2c4>)
 800590e:	4313      	orrs	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f043 0208 	orr.w	r2, r3, #8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005948:	b004      	add	sp, #16
 800594a:	4770      	bx	lr
 800594c:	803c3800 	.word	0x803c3800

08005950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3301      	adds	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a09      	ldr	r2, [pc, #36]	; (8005998 <USB_FlushTxFifo+0x48>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e006      	b.n	800598a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b20      	cmp	r3, #32
 8005986:	d0f0      	beq.n	800596a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	00030d40 	.word	0x00030d40

0800599c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2210      	movs	r2, #16
 80059ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a09      	ldr	r2, [pc, #36]	; (80059dc <USB_FlushRxFifo+0x40>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e006      	b.n	80059ce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d0f0      	beq.n	80059ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	00030d40 	.word	0x00030d40

080059e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0306 	and.w	r3, r3, #6
 8005a2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
 8005a36:	e00a      	b.n	8005a4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d002      	beq.n	8005a44 <USB_GetDevSpeed+0x32>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b06      	cmp	r3, #6
 8005a42:	d102      	bne.n	8005a4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a44:	2302      	movs	r3, #2
 8005a46:	75fb      	strb	r3, [r7, #23]
 8005a48:	e001      	b.n	8005a4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a4a:	230f      	movs	r3, #15
 8005a4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d13a      	bne.n	8005aee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d155      	bne.n	8005b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005acc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	059b      	lsls	r3, r3, #22
 8005ad2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e036      	b.n	8005b5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	2101      	movs	r1, #1
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11a      	bne.n	8005b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b42:	430b      	orrs	r3, r1
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d161      	bne.n	8005c4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9e:	d11f      	bne.n	8005be0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c00:	4013      	ands	r3, r2
 8005c02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c24:	4013      	ands	r3, r2
 8005c26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	0159      	lsls	r1, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	4619      	mov	r1, r3
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <USB_DeactivateEndpoint+0x1b0>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]
 8005c4a:	e060      	b.n	8005d0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c62:	d11f      	bne.n	8005ca4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	2101      	movs	r1, #1
 8005cda:	fa01 f303 	lsl.w	r3, r1, r3
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	0159      	lsls	r1, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	440b      	add	r3, r1
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	4619      	mov	r1, r3
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <USB_DeactivateEndpoint+0x1b4>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	ec337800 	.word	0xec337800
 8005d20:	eff37800 	.word	0xeff37800

08005d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 815c 	bne.w	8005ffe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d132      	bne.n	8005db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	0cdb      	lsrs	r3, r3, #19
 8005dae:	04db      	lsls	r3, r3, #19
 8005db0:	6113      	str	r3, [r2, #16]
 8005db2:	e074      	b.n	8005e9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	0cdb      	lsrs	r3, r3, #19
 8005dd0:	04db      	lsls	r3, r3, #19
 8005dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6959      	ldr	r1, [r3, #20]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	440b      	add	r3, r1
 8005e10:	1e59      	subs	r1, r3, #1
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e1a:	04d9      	lsls	r1, r3, #19
 8005e1c:	4b9d      	ldr	r3, [pc, #628]	; (8006094 <USB_EPStartXfer+0x370>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	0148      	lsls	r0, r1, #5
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	4401      	add	r1, r0
 8005e28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	0148      	lsls	r0, r1, #5
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	4401      	add	r1, r0
 8005e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e52:	4313      	orrs	r3, r2
 8005e54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	78db      	ldrb	r3, [r3, #3]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d11f      	bne.n	8005e9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d14b      	bne.n	8005f3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	78db      	ldrb	r3, [r3, #3]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d128      	bne.n	8005f1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d110      	bne.n	8005efa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e00f      	b.n	8005f1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e12f      	b.n	800619c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	78db      	ldrb	r3, [r3, #3]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d015      	beq.n	8005f90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8117 	beq.w	800619c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	2101      	movs	r1, #1
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f8e:	e105      	b.n	800619c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d110      	bne.n	8005fc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e00f      	b.n	8005fe2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	68d9      	ldr	r1, [r3, #12]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	b298      	uxth	r0, r3
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa2b 	bl	8006452 <USB_WritePacket>
 8005ffc:	e0ce      	b.n	800619c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006018:	0cdb      	lsrs	r3, r3, #19
 800601a:	04db      	lsls	r3, r3, #19
 800601c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800603c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d126      	bne.n	8006098 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	4401      	add	r1, r0
 8006068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800608e:	6113      	str	r3, [r2, #16]
 8006090:	e036      	b.n	8006100 <USB_EPStartXfer+0x3dc>
 8006092:	bf00      	nop
 8006094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4413      	add	r3, r2
 80060a2:	1e5a      	subs	r2, r3, #1
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	8afb      	ldrh	r3, [r7, #22]
 80060be:	04d9      	lsls	r1, r3, #19
 80060c0:	4b39      	ldr	r3, [pc, #228]	; (80061a8 <USB_EPStartXfer+0x484>)
 80060c2:	400b      	ands	r3, r1
 80060c4:	69b9      	ldr	r1, [r7, #24]
 80060c6:	0148      	lsls	r0, r1, #5
 80060c8:	69f9      	ldr	r1, [r7, #28]
 80060ca:	4401      	add	r1, r0
 80060cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060d0:	4313      	orrs	r3, r2
 80060d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	8af9      	ldrh	r1, [r7, #22]
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f0:	69b9      	ldr	r1, [r7, #24]
 80060f2:	0148      	lsls	r0, r1, #5
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	4401      	add	r1, r0
 80060f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060fc:	4313      	orrs	r3, r2
 80060fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d10d      	bne.n	8006122 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	68d9      	ldr	r1, [r3, #12]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	460a      	mov	r2, r1
 8006120:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d128      	bne.n	800617c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d110      	bne.n	800615c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e00f      	b.n	800617c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006196:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800619a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	1ff80000 	.word	0x1ff80000

080061ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f040 80cd 	bne.w	8006368 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d132      	bne.n	800623c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006234:	0cdb      	lsrs	r3, r3, #19
 8006236:	04db      	lsls	r3, r3, #19
 8006238:	6113      	str	r3, [r2, #16]
 800623a:	e04e      	b.n	80062da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006256:	0cdb      	lsrs	r3, r3, #19
 8006258:	04db      	lsls	r3, r3, #19
 800625a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006276:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800627a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800627e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	695a      	ldr	r2, [r3, #20]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	429a      	cmp	r2, r3
 800628a:	d903      	bls.n	8006294 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	6939      	ldr	r1, [r7, #16]
 80062cc:	0148      	lsls	r0, r1, #5
 80062ce:	6979      	ldr	r1, [r7, #20]
 80062d0:	4401      	add	r1, r0
 80062d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062d6:	4313      	orrs	r3, r2
 80062d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d11e      	bne.n	800631e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e092      	b.n	8006444 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800633c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d07e      	beq.n	8006444 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	2101      	movs	r1, #1
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006362:	4313      	orrs	r3, r2
 8006364:	634b      	str	r3, [r1, #52]	; 0x34
 8006366:	e06d      	b.n	8006444 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	0cdb      	lsrs	r3, r3, #19
 8006384:	04db      	lsls	r3, r3, #19
 8006386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f2:	6939      	ldr	r1, [r7, #16]
 80063f4:	0148      	lsls	r0, r1, #5
 80063f6:	6979      	ldr	r1, [r7, #20]
 80063f8:	4401      	add	r1, r0
 80063fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063fe:	4313      	orrs	r3, r2
 8006400:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10d      	bne.n	8006424 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	68d9      	ldr	r1, [r3, #12]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	460a      	mov	r2, r1
 8006422:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006452:	b480      	push	{r7}
 8006454:	b089      	sub	sp, #36	; 0x24
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	4611      	mov	r1, r2
 800645e:	461a      	mov	r2, r3
 8006460:	460b      	mov	r3, r1
 8006462:	71fb      	strb	r3, [r7, #7]
 8006464:	4613      	mov	r3, r2
 8006466:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006470:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11a      	bne.n	80064ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006478:	88bb      	ldrh	r3, [r7, #4]
 800647a:	3303      	adds	r3, #3
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e00f      	b.n	80064a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	031a      	lsls	r2, r3, #12
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006492:	461a      	mov	r2, r3
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6013      	str	r3, [r2, #0]
      pSrc++;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	3304      	adds	r3, #4
 800649e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3eb      	bcc.n	8006486 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3724      	adds	r7, #36	; 0x24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	3303      	adds	r3, #3
 80064d6:	089b      	lsrs	r3, r3, #2
 80064d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e00b      	b.n	80064f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	3304      	adds	r3, #4
 80064f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3301      	adds	r3, #1
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d3ef      	bcc.n	80064e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006500:	69fb      	ldr	r3, [r7, #28]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3724      	adds	r7, #36	; 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d12c      	bne.n	8006584 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	db12      	blt.n	8006562 <USB_EPSetStall+0x54>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00f      	beq.n	8006562 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006560:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	440a      	add	r2, r1
 8006578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e02b      	b.n	80065dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	db12      	blt.n	80065bc <USB_EPSetStall+0xae>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00f      	beq.n	80065bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d128      	bne.n	8006658 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	78db      	ldrb	r3, [r3, #3]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d003      	beq.n	8006636 <USB_EPClearStall+0x4c>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	78db      	ldrb	r3, [r3, #3]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d138      	bne.n	80066a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e027      	b.n	80066a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	78db      	ldrb	r3, [r3, #3]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d003      	beq.n	8006688 <USB_EPClearStall+0x9e>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	78db      	ldrb	r3, [r3, #3]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d10f      	bne.n	80066a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f0:	4313      	orrs	r3, r2
 80066f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006730:	f023 0302 	bic.w	r3, r3, #2
 8006734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006772:	f043 0302 	orr.w	r3, r3, #2
 8006776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4013      	ands	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	4013      	ands	r3, r2
 80067ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	0c1b      	lsrs	r3, r3, #16
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4013      	ands	r3, r2
 8006802:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	b29b      	uxth	r3, r3
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006842:	68bb      	ldr	r3, [r7, #8]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006872:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	fa22 f303 	lsr.w	r3, r2, r3
 8006880:	01db      	lsls	r3, r3, #7
 8006882:	b2db      	uxtb	r3, r3
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4013      	ands	r3, r2
 800689c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800689e:	68bb      	ldr	r3, [r7, #8]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0301 	and.w	r3, r3, #1
}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	460b      	mov	r3, r1
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	333c      	adds	r3, #60	; 0x3c
 8006926:	3304      	adds	r3, #4
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <USB_EP0_OutStart+0xb8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d90a      	bls.n	800694a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006944:	d101      	bne.n	800694a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e037      	b.n	80069ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006950:	461a      	mov	r2, r3
 8006952:	2300      	movs	r3, #0
 8006954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006978:	f043 0318 	orr.w	r3, r3, #24
 800697c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006990:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d10f      	bne.n	80069b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	4f54300a 	.word	0x4f54300a

080069cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <USB_CoreReset+0x64>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e01b      	b.n	8006a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	daf2      	bge.n	80069d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <USB_CoreReset+0x64>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d901      	bls.n	8006a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e006      	b.n	8006a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d0f0      	beq.n	8006a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	00030d40 	.word	0x00030d40

08006a34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a44:	f002 f8d6 	bl	8008bf4 <malloc>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d105      	bne.n	8006a5e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e066      	b.n	8006b2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7c1b      	ldrb	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d119      	bne.n	8006aa2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a72:	2202      	movs	r2, #2
 8006a74:	2181      	movs	r1, #129	; 0x81
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 ff43 	bl	8008902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a86:	2202      	movs	r2, #2
 8006a88:	2101      	movs	r1, #1
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 ff39 	bl	8008902 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006aa0:	e016      	b.n	8006ad0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	2181      	movs	r1, #129	; 0x81
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 ff2a 	bl	8008902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	2101      	movs	r1, #1
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 ff21 	bl	8008902 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2210      	movs	r2, #16
 8006acc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	2182      	movs	r1, #130	; 0x82
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 ff13 	bl	8008902 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	7c1b      	ldrb	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b10:	2101      	movs	r1, #1
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 ffe4 	bl	8008ae0 <USBD_LL_PrepareReceive>
 8006b18:	e007      	b.n	8006b2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 ffdb 	bl	8008ae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b44:	2181      	movs	r1, #129	; 0x81
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 ff01 	bl	800894e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b52:	2101      	movs	r1, #1
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fefa 	bl	800894e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b62:	2182      	movs	r1, #130	; 0x82
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fef2 	bl	800894e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00e      	beq.n	8006ba2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b94:	4618      	mov	r0, r3
 8006b96:	f002 f835 	bl	8008c04 <free>
    pdev->pClassData = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bbc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d03a      	beq.n	8006c4c <USBD_CDC_Setup+0xa0>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	f040 8097 	bne.w	8006d0a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	88db      	ldrh	r3, [r3, #6]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d029      	beq.n	8006c38 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da11      	bge.n	8006c12 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006bfa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	88d2      	ldrh	r2, [r2, #6]
 8006c00:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c02:	6939      	ldr	r1, [r7, #16]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	88db      	ldrh	r3, [r3, #6]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fa6d 	bl	80080ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006c10:	e082      	b.n	8006d18 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	785a      	ldrb	r2, [r3, #1]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	88db      	ldrh	r3, [r3, #6]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c28:	6939      	ldr	r1, [r7, #16]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	88db      	ldrh	r3, [r3, #6]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fa86 	bl	8008142 <USBD_CtlPrepareRx>
    break;
 8006c36:	e06f      	b.n	8006d18 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	7850      	ldrb	r0, [r2, #1]
 8006c44:	2200      	movs	r2, #0
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	4798      	blx	r3
    break;
 8006c4a:	e065      	b.n	8006d18 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b0b      	cmp	r3, #11
 8006c52:	d84f      	bhi.n	8006cf4 <USBD_CDC_Setup+0x148>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <USBD_CDC_Setup+0xb0>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c8d 	.word	0x08006c8d
 8006c60:	08006d03 	.word	0x08006d03
 8006c64:	08006cf5 	.word	0x08006cf5
 8006c68:	08006cf5 	.word	0x08006cf5
 8006c6c:	08006cf5 	.word	0x08006cf5
 8006c70:	08006cf5 	.word	0x08006cf5
 8006c74:	08006cf5 	.word	0x08006cf5
 8006c78:	08006cf5 	.word	0x08006cf5
 8006c7c:	08006cf5 	.word	0x08006cf5
 8006c80:	08006cf5 	.word	0x08006cf5
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006cdd 	.word	0x08006cdd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d107      	bne.n	8006ca6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c96:	f107 030c 	add.w	r3, r7, #12
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fa23 	bl	80080ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ca4:	e030      	b.n	8006d08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f9ad 	bl	8008008 <USBD_CtlError>
        ret = USBD_FAIL;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb2:	e029      	b.n	8006d08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d107      	bne.n	8006cce <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cbe:	f107 030f 	add.w	r3, r7, #15
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fa0f 	bl	80080ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ccc:	e01c      	b.n	8006d08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f999 	bl	8008008 <USBD_CtlError>
        ret = USBD_FAIL;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cda:	e015      	b.n	8006d08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d00f      	beq.n	8006d06 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f98d 	bl	8008008 <USBD_CtlError>
        ret = USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cf2:	e008      	b.n	8006d06 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 f986 	bl	8008008 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	e002      	b.n	8006d08 <USBD_CDC_Setup+0x15c>
      break;
 8006d02:	bf00      	nop
 8006d04:	e008      	b.n	8006d18 <USBD_CDC_Setup+0x16c>
      break;
 8006d06:	bf00      	nop
    }
    break;
 8006d08:	e006      	b.n	8006d18 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f97b 	bl	8008008 <USBD_CtlError>
    ret = USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	75fb      	strb	r3, [r7, #23]
    break;
 8006d16:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop

08006d24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e049      	b.n	8006dda <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d029      	beq.n	8006db8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	3318      	adds	r3, #24
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	78f9      	ldrb	r1, [r7, #3]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	1a5b      	subs	r3, r3, r1
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4403      	add	r3, r0
 8006d84:	3344      	adds	r3, #68	; 0x44
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d8c:	fb03 f301 	mul.w	r3, r3, r1
 8006d90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d110      	bne.n	8006db8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	3318      	adds	r3, #24
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006daa:	78f9      	ldrb	r1, [r7, #3]
 8006dac:	2300      	movs	r3, #0
 8006dae:	2200      	movs	r2, #0
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fe74 	bl	8008a9e <USBD_LL_Transmit>
 8006db6:	e00f      	b.n	8006dd8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e015      	b.n	8006e30 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fe8a 	bl	8008b22 <USBD_LL_GetRxDataSize>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e46:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d015      	beq.n	8006e7e <USBD_CDC_EP0_RxReady+0x46>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e58:	2bff      	cmp	r3, #255	; 0xff
 8006e5a:	d010      	beq.n	8006e7e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e6a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e72:	b292      	uxth	r2, r2
 8006e74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	22ff      	movs	r2, #255	; 0xff
 8006e7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2243      	movs	r2, #67	; 0x43
 8006e94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006e96:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000094 	.word	0x20000094

08006ea8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2243      	movs	r2, #67	; 0x43
 8006eb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	20000050 	.word	0x20000050

08006ec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2243      	movs	r2, #67	; 0x43
 8006ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	200000d8 	.word	0x200000d8

08006ee8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	2000000c 	.word	0x2000000c

08006f08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e004      	b.n	8006f26 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b087      	sub	sp, #28
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f44:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f74:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e016      	b.n	8006fd8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	7c1b      	ldrb	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fd8e 	bl	8008ae0 <USBD_LL_PrepareReceive>
 8006fc4:	e007      	b.n	8006fd6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fcc:	2340      	movs	r3, #64	; 0x40
 8006fce:	2101      	movs	r1, #1
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fd85 	bl	8008ae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e025      	b.n	8007044 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	79fa      	ldrb	r2, [r7, #7]
 8007036:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f001 fbfb 	bl	8008834 <USBD_LL_Init>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	e010      	b.n	8007086 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f107 020e 	add.w	r2, r7, #14
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fc18 	bl	80088cc <USBD_LL_Start>
 800709c:	4603      	mov	r3, r0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	4611      	mov	r1, r2
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
  }

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 ff2c 	bl	8007f94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2b01      	cmp	r3, #1
 800715e:	d00e      	beq.n	800717e <USBD_LL_SetupStage+0x5a>
 8007160:	2b01      	cmp	r3, #1
 8007162:	d302      	bcc.n	800716a <USBD_LL_SetupStage+0x46>
 8007164:	2b02      	cmp	r3, #2
 8007166:	d014      	beq.n	8007192 <USBD_LL_SetupStage+0x6e>
 8007168:	e01d      	b.n	80071a6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa18 	bl	80075a8 <USBD_StdDevReq>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]
      break;
 800717c:	e020      	b.n	80071c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa7c 	bl	8007684 <USBD_StdItfReq>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
      break;
 8007190:	e016      	b.n	80071c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fab8 	bl	8007710 <USBD_StdEPReq>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
      break;
 80071a4:	e00c      	b.n	80071c0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fbe9 	bl	800898c <USBD_LL_StallEP>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	bf00      	nop
  }

  return ret;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	460b      	mov	r3, r1
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d137      	bne.n	800724e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d14a      	bne.n	8007286 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d913      	bls.n	8007224 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	1ad2      	subs	r2, r2, r3
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	4293      	cmp	r3, r2
 8007214:	bf28      	it	cs
 8007216:	4613      	movcs	r3, r2
 8007218:	461a      	mov	r2, r3
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 ffad 	bl	800817c <USBD_CtlContinueRx>
 8007222:	e030      	b.n	8007286 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007236:	2b03      	cmp	r3, #3
 8007238:	d105      	bne.n	8007246 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 ffa9 	bl	800819e <USBD_CtlSendStatus>
 800724c:	e01b      	b.n	8007286 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d013      	beq.n	8007282 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007260:	2b03      	cmp	r3, #3
 8007262:	d10e      	bne.n	8007282 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	7afa      	ldrb	r2, [r7, #11]
 800726e:	4611      	mov	r1, r2
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	4798      	blx	r3
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	e002      	b.n	8007288 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	e000      	b.n	8007288 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	460b      	mov	r3, r1
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d16a      	bne.n	800737a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3314      	adds	r3, #20
 80072a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d155      	bne.n	8007360 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d914      	bls.n	80072ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 ff22 	bl	8008120 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072dc:	2300      	movs	r3, #0
 80072de:	2200      	movs	r2, #0
 80072e0:	2100      	movs	r1, #0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f001 fbfc 	bl	8008ae0 <USBD_LL_PrepareReceive>
 80072e8:	e03a      	b.n	8007360 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d11c      	bne.n	8007330 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072fe:	429a      	cmp	r2, r3
 8007300:	d316      	bcc.n	8007330 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800730c:	429a      	cmp	r2, r3
 800730e:	d20f      	bcs.n	8007330 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007310:	2200      	movs	r2, #0
 8007312:	2100      	movs	r1, #0
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 ff03 	bl	8008120 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007322:	2300      	movs	r3, #0
 8007324:	2200      	movs	r2, #0
 8007326:	2100      	movs	r1, #0
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f001 fbd9 	bl	8008ae0 <USBD_LL_PrepareReceive>
 800732e:	e017      	b.n	8007360 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007342:	2b03      	cmp	r3, #3
 8007344:	d105      	bne.n	8007352 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007352:	2180      	movs	r1, #128	; 0x80
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f001 fb19 	bl	800898c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 ff32 	bl	80081c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007366:	2b01      	cmp	r3, #1
 8007368:	d123      	bne.n	80073b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff fe9b 	bl	80070a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007378:	e01b      	b.n	80073b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800738c:	2b03      	cmp	r3, #3
 800738e:	d10e      	bne.n	80073ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	7afa      	ldrb	r2, [r7, #11]
 800739a:	4611      	mov	r1, r2
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	4798      	blx	r3
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	e002      	b.n	80073b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e000      	b.n	80073b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6852      	ldr	r2, [r2, #4]
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	4611      	mov	r1, r2
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007400:	2340      	movs	r3, #64	; 0x40
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fa7b 	bl	8008902 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2240      	movs	r2, #64	; 0x40
 8007418:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	2200      	movs	r2, #0
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fa6d 	bl	8008902 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2240      	movs	r2, #64	; 0x40
 8007432:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007496:	2b04      	cmp	r3, #4
 8007498:	d105      	bne.n	80074a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d10b      	bne.n	80074de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6852      	ldr	r2, [r2, #4]
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	4611      	mov	r1, r2
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
  }

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800756a:	b480      	push	{r7}
 800756c:	b087      	sub	sp, #28
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3301      	adds	r3, #1
 8007580:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007588:	8a3b      	ldrh	r3, [r7, #16]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	b21a      	sxth	r2, r3
 800758e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007592:	4313      	orrs	r3, r2
 8007594:	b21b      	sxth	r3, r3
 8007596:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007598:	89fb      	ldrh	r3, [r7, #14]
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d004      	beq.n	80075cc <USBD_StdDevReq+0x24>
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d002      	beq.n	80075cc <USBD_StdDevReq+0x24>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <USBD_StdDevReq+0x38>
 80075ca:	e050      	b.n	800766e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]
    break;
 80075de:	e04b      	b.n	8007678 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d83c      	bhi.n	8007662 <USBD_StdDevReq+0xba>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_StdDevReq+0x48>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007645 	.word	0x08007645
 80075f4:	08007659 	.word	0x08007659
 80075f8:	08007663 	.word	0x08007663
 80075fc:	0800764f 	.word	0x0800764f
 8007600:	08007663 	.word	0x08007663
 8007604:	08007623 	.word	0x08007623
 8007608:	08007619 	.word	0x08007619
 800760c:	08007663 	.word	0x08007663
 8007610:	0800763b 	.word	0x0800763b
 8007614:	0800762d 	.word	0x0800762d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f9ce 	bl	80079bc <USBD_GetDescriptor>
      break;
 8007620:	e024      	b.n	800766c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb33 	bl	8007c90 <USBD_SetAddress>
      break;
 800762a:	e01f      	b.n	800766c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb70 	bl	8007d14 <USBD_SetConfig>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
      break;
 8007638:	e018      	b.n	800766c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc0d 	bl	8007e5c <USBD_GetConfig>
      break;
 8007642:	e013      	b.n	800766c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fc3c 	bl	8007ec4 <USBD_GetStatus>
      break;
 800764c:	e00e      	b.n	800766c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc6a 	bl	8007f2a <USBD_SetFeature>
      break;
 8007656:	e009      	b.n	800766c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fc79 	bl	8007f52 <USBD_ClrFeature>
      break;
 8007660:	e004      	b.n	800766c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fccf 	bl	8008008 <USBD_CtlError>
      break;
 800766a:	bf00      	nop
    }
    break;
 800766c:	e004      	b.n	8007678 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fcc9 	bl	8008008 <USBD_CtlError>
    break;
 8007676:	bf00      	nop
  }

  return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop

08007684 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769a:	2b20      	cmp	r3, #32
 800769c:	d003      	beq.n	80076a6 <USBD_StdItfReq+0x22>
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d001      	beq.n	80076a6 <USBD_StdItfReq+0x22>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d12a      	bne.n	80076fc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d81d      	bhi.n	80076ee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	889b      	ldrh	r3, [r3, #4]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d813      	bhi.n	80076e4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <USBD_StdItfReq+0x74>
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10d      	bne.n	80076f8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fd5e 	bl	800819e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80076e2:	e009      	b.n	80076f8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc8e 	bl	8008008 <USBD_CtlError>
      break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc89 	bl	8008008 <USBD_CtlError>
      break;
 80076f6:	e000      	b.n	80076fa <USBD_StdItfReq+0x76>
      break;
 80076f8:	bf00      	nop
    }
    break;
 80076fa:	e004      	b.n	8007706 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc82 	bl	8008008 <USBD_CtlError>
    break;
 8007704:	bf00      	nop
  }

  return ret;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	889b      	ldrh	r3, [r3, #4]
 8007722:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772c:	2b20      	cmp	r3, #32
 800772e:	d004      	beq.n	800773a <USBD_StdEPReq+0x2a>
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d002      	beq.n	800773a <USBD_StdEPReq+0x2a>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <USBD_StdEPReq+0x3e>
 8007738:	e135      	b.n	80079a6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	4798      	blx	r3
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
    break;
 800774c:	e130      	b.n	80079b0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d03e      	beq.n	80077d4 <USBD_StdEPReq+0xc4>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d002      	beq.n	8007760 <USBD_StdEPReq+0x50>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d077      	beq.n	800784e <USBD_StdEPReq+0x13e>
 800775e:	e11c      	b.n	800799a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007766:	2b02      	cmp	r3, #2
 8007768:	d002      	beq.n	8007770 <USBD_StdEPReq+0x60>
 800776a:	2b03      	cmp	r3, #3
 800776c:	d015      	beq.n	800779a <USBD_StdEPReq+0x8a>
 800776e:	e02b      	b.n	80077c8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00c      	beq.n	8007790 <USBD_StdEPReq+0x80>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b80      	cmp	r3, #128	; 0x80
 800777a:	d009      	beq.n	8007790 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 f903 	bl	800898c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f8ff 	bl	800898c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800778e:	e020      	b.n	80077d2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fc38 	bl	8008008 <USBD_CtlError>
        break;
 8007798:	e01b      	b.n	80077d2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10e      	bne.n	80077c0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <USBD_StdEPReq+0xb0>
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	2b80      	cmp	r3, #128	; 0x80
 80077ac:	d008      	beq.n	80077c0 <USBD_StdEPReq+0xb0>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 f8e6 	bl	800898c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fcec 	bl	800819e <USBD_CtlSendStatus>

        break;
 80077c6:	e004      	b.n	80077d2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fc1c 	bl	8008008 <USBD_CtlError>
        break;
 80077d0:	bf00      	nop
      }
      break;
 80077d2:	e0e7      	b.n	80079a4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d002      	beq.n	80077e4 <USBD_StdEPReq+0xd4>
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d015      	beq.n	800780e <USBD_StdEPReq+0xfe>
 80077e2:	e02d      	b.n	8007840 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <USBD_StdEPReq+0xf4>
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b80      	cmp	r3, #128	; 0x80
 80077ee:	d009      	beq.n	8007804 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f8c9 	bl	800898c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077fa:	2180      	movs	r1, #128	; 0x80
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f8c5 	bl	800898c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007802:	e023      	b.n	800784c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fbfe 	bl	8008008 <USBD_CtlError>
        break;
 800780c:	e01e      	b.n	800784c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	885b      	ldrh	r3, [r3, #2]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d119      	bne.n	800784a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f8d0 	bl	80089ca <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fcb7 	bl	800819e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
        }
        break;
 800783e:	e004      	b.n	800784a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fbe0 	bl	8008008 <USBD_CtlError>
        break;
 8007848:	e000      	b.n	800784c <USBD_StdEPReq+0x13c>
        break;
 800784a:	bf00      	nop
      }
      break;
 800784c:	e0aa      	b.n	80079a4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007854:	2b02      	cmp	r3, #2
 8007856:	d002      	beq.n	800785e <USBD_StdEPReq+0x14e>
 8007858:	2b03      	cmp	r3, #3
 800785a:	d032      	beq.n	80078c2 <USBD_StdEPReq+0x1b2>
 800785c:	e097      	b.n	800798e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <USBD_StdEPReq+0x164>
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d004      	beq.n	8007874 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fbcb 	bl	8008008 <USBD_CtlError>
          break;
 8007872:	e091      	b.n	8007998 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	da0b      	bge.n	8007894 <USBD_StdEPReq+0x184>
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	3310      	adds	r3, #16
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4413      	add	r3, r2
 8007890:	3304      	adds	r3, #4
 8007892:	e00b      	b.n	80078ac <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	4413      	add	r3, r2
 80078aa:	3304      	adds	r3, #4
 80078ac:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2202      	movs	r2, #2
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fc15 	bl	80080ea <USBD_CtlSendData>
        break;
 80078c0:	e06a      	b.n	8007998 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80078c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da11      	bge.n	80078ee <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	f003 020f 	and.w	r2, r3, #15
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	440b      	add	r3, r1
 80078dc:	3324      	adds	r3, #36	; 0x24
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d117      	bne.n	8007914 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fb8e 	bl	8008008 <USBD_CtlError>
            break;
 80078ec:	e054      	b.n	8007998 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	f003 020f 	and.w	r2, r3, #15
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fb7b 	bl	8008008 <USBD_CtlError>
            break;
 8007912:	e041      	b.n	8007998 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	da0b      	bge.n	8007934 <USBD_StdEPReq+0x224>
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	3310      	adds	r3, #16
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	e00b      	b.n	800794c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	4413      	add	r3, r2
 800794a:	3304      	adds	r3, #4
 800794c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <USBD_StdEPReq+0x24a>
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d103      	bne.n	8007962 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e00e      	b.n	8007980 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 f84e 	bl	8008a08 <USBD_LL_IsStallEP>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e002      	b.n	8007980 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2202      	movs	r2, #2
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fbaf 	bl	80080ea <USBD_CtlSendData>
          break;
 800798c:	e004      	b.n	8007998 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb39 	bl	8008008 <USBD_CtlError>
        break;
 8007996:	bf00      	nop
      }
      break;
 8007998:	e004      	b.n	80079a4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb33 	bl	8008008 <USBD_CtlError>
      break;
 80079a2:	bf00      	nop
    }
    break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb2d 	bl	8008008 <USBD_CtlError>
    break;
 80079ae:	bf00      	nop
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b06      	cmp	r3, #6
 80079de:	f200 8128 	bhi.w	8007c32 <USBD_GetDescriptor+0x276>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBD_GetDescriptor+0x2c>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a05 	.word	0x08007a05
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a5d 	.word	0x08007a5d
 80079f4:	08007c33 	.word	0x08007c33
 80079f8:	08007c33 	.word	0x08007c33
 80079fc:	08007bd3 	.word	0x08007bd3
 8007a00:	08007bff 	.word	0x08007bff
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	7c12      	ldrb	r2, [r2, #16]
 8007a10:	f107 0108 	add.w	r1, r7, #8
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
 8007a18:	60f8      	str	r0, [r7, #12]
    break;
 8007a1a:	e112      	b.n	8007c42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7c1b      	ldrb	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10d      	bne.n	8007a40 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	f107 0208 	add.w	r2, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007a3e:	e100      	b.n	8007c42 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	f107 0208 	add.w	r2, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
    break;
 8007a5a:	e0f2      	b.n	8007c42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	885b      	ldrh	r3, [r3, #2]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	f200 80ac 	bhi.w	8007bc0 <USBD_GetDescriptor+0x204>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <USBD_GetDescriptor+0xb4>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a89 	.word	0x08007a89
 8007a74:	08007abd 	.word	0x08007abd
 8007a78:	08007af1 	.word	0x08007af1
 8007a7c:	08007b25 	.word	0x08007b25
 8007a80:	08007b59 	.word	0x08007b59
 8007a84:	08007b8d 	.word	0x08007b8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aaa:	e091      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 faaa 	bl	8008008 <USBD_CtlError>
        err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
      break;
 8007aba:	e089      	b.n	8007bd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7c12      	ldrb	r2, [r2, #16]
 8007ad4:	f107 0108 	add.w	r1, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ade:	e077      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa90 	bl	8008008 <USBD_CtlError>
        err++;
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	3301      	adds	r3, #1
 8007aec:	72fb      	strb	r3, [r7, #11]
      break;
 8007aee:	e06f      	b.n	8007bd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7c12      	ldrb	r2, [r2, #16]
 8007b08:	f107 0108 	add.w	r1, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b12:	e05d      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa76 	bl	8008008 <USBD_CtlError>
        err++;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	72fb      	strb	r3, [r7, #11]
      break;
 8007b22:	e055      	b.n	8007bd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b46:	e043      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa5c 	bl	8008008 <USBD_CtlError>
        err++;
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	3301      	adds	r3, #1
 8007b54:	72fb      	strb	r3, [r7, #11]
      break;
 8007b56:	e03b      	b.n	8007bd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7c12      	ldrb	r2, [r2, #16]
 8007b70:	f107 0108 	add.w	r1, r7, #8
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b7a:	e029      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa42 	bl	8008008 <USBD_CtlError>
        err++;
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	3301      	adds	r3, #1
 8007b88:	72fb      	strb	r3, [r7, #11]
      break;
 8007b8a:	e021      	b.n	8007bd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7c12      	ldrb	r2, [r2, #16]
 8007ba4:	f107 0108 	add.w	r1, r7, #8
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
 8007bac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bae:	e00f      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa28 	bl	8008008 <USBD_CtlError>
        err++;
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	72fb      	strb	r3, [r7, #11]
      break;
 8007bbe:	e007      	b.n	8007bd0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa20 	bl	8008008 <USBD_CtlError>
      err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007bce:	bf00      	nop
    }
    break;
 8007bd0:	e037      	b.n	8007c42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7c1b      	ldrb	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be2:	f107 0208 	add.w	r2, r7, #8
 8007be6:	4610      	mov	r0, r2
 8007be8:	4798      	blx	r3
 8007bea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007bec:	e029      	b.n	8007c42 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa09 	bl	8008008 <USBD_CtlError>
      err++;
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	72fb      	strb	r3, [r7, #11]
    break;
 8007bfc:	e021      	b.n	8007c42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7c1b      	ldrb	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f107 0208 	add.w	r2, r7, #8
 8007c12:	4610      	mov	r0, r2
 8007c14:	4798      	blx	r3
 8007c16:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007c20:	e00f      	b.n	8007c42 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9ef 	bl	8008008 <USBD_CtlError>
      err++;
 8007c2a:	7afb      	ldrb	r3, [r7, #11]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	72fb      	strb	r3, [r7, #11]
    break;
 8007c30:	e007      	b.n	8007c42 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9e7 	bl	8008008 <USBD_CtlError>
    err++;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	72fb      	strb	r3, [r7, #11]
    break;
 8007c40:	bf00      	nop
  }

  if (err != 0U)
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11e      	bne.n	8007c86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	88db      	ldrh	r3, [r3, #6]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d016      	beq.n	8007c7e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007c50:	893b      	ldrh	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	88da      	ldrh	r2, [r3, #6]
 8007c5a:	893b      	ldrh	r3, [r7, #8]
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	bf28      	it	cs
 8007c60:	4613      	movcs	r3, r2
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c66:	893b      	ldrh	r3, [r7, #8]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa3c 	bl	80080ea <USBD_CtlSendData>
 8007c72:	e009      	b.n	8007c88 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9c6 	bl	8008008 <USBD_CtlError>
 8007c7c:	e004      	b.n	8007c88 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa8d 	bl	800819e <USBD_CtlSendStatus>
 8007c84:	e000      	b.n	8007c88 <USBD_GetDescriptor+0x2cc>
    return;
 8007c86:	bf00      	nop
    }
  }
}
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d130      	bne.n	8007d04 <USBD_SetAddress+0x74>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88db      	ldrh	r3, [r3, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d12c      	bne.n	8007d04 <USBD_SetAddress+0x74>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb0:	d828      	bhi.n	8007d04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d104      	bne.n	8007cd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f99c 	bl	8008008 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	e01c      	b.n	8007d0c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 febe 	bl	8008a60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fa5a 	bl	800819e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf8:	e008      	b.n	8007d0c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d02:	e003      	b.n	8007d0c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f97e 	bl	8008008 <USBD_CtlError>
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	885b      	ldrh	r3, [r3, #2]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	4b4b      	ldr	r3, [pc, #300]	; (8007e58 <USBD_SetConfig+0x144>)
 8007d2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d2c:	4b4a      	ldr	r3, [pc, #296]	; (8007e58 <USBD_SetConfig+0x144>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d905      	bls.n	8007d40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f966 	bl	8008008 <USBD_CtlError>
    return USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e087      	b.n	8007e50 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d002      	beq.n	8007d50 <USBD_SetConfig+0x3c>
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d025      	beq.n	8007d9a <USBD_SetConfig+0x86>
 8007d4e:	e071      	b.n	8007e34 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007d50:	4b41      	ldr	r3, [pc, #260]	; (8007e58 <USBD_SetConfig+0x144>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01c      	beq.n	8007d92 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <USBD_SetConfig+0x144>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d62:	4b3d      	ldr	r3, [pc, #244]	; (8007e58 <USBD_SetConfig+0x144>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff f9a7 	bl	80070bc <USBD_SetClassConfig>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f944 	bl	8008008 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007d80:	e065      	b.n	8007e4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa0b 	bl	800819e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007d90:	e05d      	b.n	8007e4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa03 	bl	800819e <USBD_CtlSendStatus>
    break;
 8007d98:	e059      	b.n	8007e4e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007d9a:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <USBD_SetConfig+0x144>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d112      	bne.n	8007dc8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2202      	movs	r2, #2
 8007da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007daa:	4b2b      	ldr	r3, [pc, #172]	; (8007e58 <USBD_SetConfig+0x144>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007db4:	4b28      	ldr	r3, [pc, #160]	; (8007e58 <USBD_SetConfig+0x144>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff f99a 	bl	80070f4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f9ec 	bl	800819e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007dc6:	e042      	b.n	8007e4e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007dc8:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <USBD_SetConfig+0x144>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d02a      	beq.n	8007e2c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff f988 	bl	80070f4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007de4:	4b1c      	ldr	r3, [pc, #112]	; (8007e58 <USBD_SetConfig+0x144>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dee:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <USBD_SetConfig+0x144>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff f961 	bl	80070bc <USBD_SetClassConfig>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00f      	beq.n	8007e24 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8fe 	bl	8008008 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff f96d 	bl	80070f4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e22:	e014      	b.n	8007e4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9ba 	bl	800819e <USBD_CtlSendStatus>
    break;
 8007e2a:	e010      	b.n	8007e4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f9b6 	bl	800819e <USBD_CtlSendStatus>
    break;
 8007e32:	e00c      	b.n	8007e4e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f8e6 	bl	8008008 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <USBD_SetConfig+0x144>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff f956 	bl	80070f4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e4c:	bf00      	nop
  }

  return ret;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000204 	.word	0x20000204

08007e5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d004      	beq.n	8007e78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f8c9 	bl	8008008 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007e76:	e021      	b.n	8007ebc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	db17      	blt.n	8007eb2 <USBD_GetConfig+0x56>
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	dd02      	ble.n	8007e8c <USBD_GetConfig+0x30>
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d00b      	beq.n	8007ea2 <USBD_GetConfig+0x46>
 8007e8a:	e012      	b.n	8007eb2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3308      	adds	r3, #8
 8007e96:	2201      	movs	r2, #1
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f925 	bl	80080ea <USBD_CtlSendData>
      break;
 8007ea0:	e00c      	b.n	8007ebc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f91d 	bl	80080ea <USBD_CtlSendData>
      break;
 8007eb0:	e004      	b.n	8007ebc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8a7 	bl	8008008 <USBD_CtlError>
      break;
 8007eba:	bf00      	nop
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d81e      	bhi.n	8007f18 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d004      	beq.n	8007eec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f88f 	bl	8008008 <USBD_CtlError>
      break;
 8007eea:	e01a      	b.n	8007f22 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f043 0202 	orr.w	r2, r3, #2
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f8ea 	bl	80080ea <USBD_CtlSendData>
    break;
 8007f16:	e004      	b.n	8007f22 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f874 	bl	8008008 <USBD_CtlError>
    break;
 8007f20:	bf00      	nop
  }
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	885b      	ldrh	r3, [r3, #2]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d106      	bne.n	8007f4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f92a 	bl	800819e <USBD_CtlSendStatus>
  }
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f62:	3b01      	subs	r3, #1
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d80b      	bhi.n	8007f80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	885b      	ldrh	r3, [r3, #2]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d10c      	bne.n	8007f8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f910 	bl	800819e <USBD_CtlSendStatus>
      }
      break;
 8007f7e:	e004      	b.n	8007f8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f840 	bl	8008008 <USBD_CtlError>
      break;
 8007f88:	e000      	b.n	8007f8c <USBD_ClrFeature+0x3a>
      break;
 8007f8a:	bf00      	nop
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3301      	adds	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff fad3 	bl	800756a <SWAPBYTE>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fac6 	bl	800756a <SWAPBYTE>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff fab9 	bl	800756a <SWAPBYTE>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	80da      	strh	r2, [r3, #6]
}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008012:	2180      	movs	r1, #128	; 0x80
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fcb9 	bl	800898c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800801a:	2100      	movs	r1, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fcb5 	bl	800898c <USBD_LL_StallEP>
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b086      	sub	sp, #24
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d036      	beq.n	80080ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008044:	6938      	ldr	r0, [r7, #16]
 8008046:	f000 f836 	bl	80080b6 <USBD_GetLen>
 800804a:	4603      	mov	r3, r0
 800804c:	3301      	adds	r3, #1
 800804e:	b29b      	uxth	r3, r3
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	7812      	ldrb	r2, [r2, #0]
 8008062:	701a      	strb	r2, [r3, #0]
  idx++;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	3301      	adds	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	4413      	add	r3, r2
 8008070:	2203      	movs	r2, #3
 8008072:	701a      	strb	r2, [r3, #0]
  idx++;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	3301      	adds	r3, #1
 8008078:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800807a:	e013      	b.n	80080a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	3301      	adds	r3, #1
 800808c:	613b      	str	r3, [r7, #16]
    idx++;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	3301      	adds	r3, #1
 8008092:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4413      	add	r3, r2
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
    idx++;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	3301      	adds	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e7      	bne.n	800807c <USBD_GetString+0x52>
 80080ac:	e000      	b.n	80080b0 <USBD_GetString+0x86>
    return;
 80080ae:	bf00      	nop
  }
}
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080c6:	e005      	b.n	80080d4 <USBD_GetLen+0x1e>
  {
    len++;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	3301      	adds	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	3301      	adds	r3, #1
 80080d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f5      	bne.n	80080c8 <USBD_GetLen+0x12>
  }

  return len;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2202      	movs	r2, #2
 80080fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	2100      	movs	r1, #0
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fcc4 	bl	8008a9e <USBD_LL_Transmit>

  return USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	2100      	movs	r1, #0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fcb3 	bl	8008a9e <USBD_LL_Transmit>

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2203      	movs	r2, #3
 8008152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	2100      	movs	r1, #0
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fcb7 	bl	8008ae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	2100      	movs	r1, #0
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fca6 	bl	8008ae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081ae:	2300      	movs	r3, #0
 80081b0:	2200      	movs	r2, #0
 80081b2:	2100      	movs	r1, #0
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fc72 	bl	8008a9e <USBD_LL_Transmit>

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2205      	movs	r2, #5
 80081d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fc80 	bl	8008ae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081f0:	2200      	movs	r2, #0
 80081f2:	4912      	ldr	r1, [pc, #72]	; (800823c <MX_USB_DEVICE_Init+0x50>)
 80081f4:	4812      	ldr	r0, [pc, #72]	; (8008240 <MX_USB_DEVICE_Init+0x54>)
 80081f6:	f7fe fef3 	bl	8006fe0 <USBD_Init>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008200:	f7f8 fc5a 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008204:	490f      	ldr	r1, [pc, #60]	; (8008244 <MX_USB_DEVICE_Init+0x58>)
 8008206:	480e      	ldr	r0, [pc, #56]	; (8008240 <MX_USB_DEVICE_Init+0x54>)
 8008208:	f7fe ff20 	bl	800704c <USBD_RegisterClass>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008212:	f7f8 fc51 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008216:	490c      	ldr	r1, [pc, #48]	; (8008248 <MX_USB_DEVICE_Init+0x5c>)
 8008218:	4809      	ldr	r0, [pc, #36]	; (8008240 <MX_USB_DEVICE_Init+0x54>)
 800821a:	f7fe fe75 	bl	8006f08 <USBD_CDC_RegisterInterface>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008224:	f7f8 fc48 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008228:	4805      	ldr	r0, [pc, #20]	; (8008240 <MX_USB_DEVICE_Init+0x54>)
 800822a:	f7fe ff30 	bl	800708e <USBD_Start>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008234:	f7f8 fc40 	bl	8000ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008238:	bf00      	nop
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000130 	.word	0x20000130
 8008240:	20000408 	.word	0x20000408
 8008244:	20000018 	.word	0x20000018
 8008248:	2000011c 	.word	0x2000011c

0800824c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008250:	2200      	movs	r2, #0
 8008252:	4905      	ldr	r1, [pc, #20]	; (8008268 <CDC_Init_FS+0x1c>)
 8008254:	4805      	ldr	r0, [pc, #20]	; (800826c <CDC_Init_FS+0x20>)
 8008256:	f7fe fe6c 	bl	8006f32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800825a:	4905      	ldr	r1, [pc, #20]	; (8008270 <CDC_Init_FS+0x24>)
 800825c:	4803      	ldr	r0, [pc, #12]	; (800826c <CDC_Init_FS+0x20>)
 800825e:	f7fe fe81 	bl	8006f64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008262:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008264:	4618      	mov	r0, r3
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000ed8 	.word	0x20000ed8
 800826c:	20000408 	.word	0x20000408
 8008270:	200006d8 	.word	0x200006d8

08008274 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008278:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800827a:	4618      	mov	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
 8008290:	4613      	mov	r3, r2
 8008292:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b23      	cmp	r3, #35	; 0x23
 8008298:	d84a      	bhi.n	8008330 <CDC_Control_FS+0xac>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <CDC_Control_FS+0x1c>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	08008331 	.word	0x08008331
 80082a4:	08008331 	.word	0x08008331
 80082a8:	08008331 	.word	0x08008331
 80082ac:	08008331 	.word	0x08008331
 80082b0:	08008331 	.word	0x08008331
 80082b4:	08008331 	.word	0x08008331
 80082b8:	08008331 	.word	0x08008331
 80082bc:	08008331 	.word	0x08008331
 80082c0:	08008331 	.word	0x08008331
 80082c4:	08008331 	.word	0x08008331
 80082c8:	08008331 	.word	0x08008331
 80082cc:	08008331 	.word	0x08008331
 80082d0:	08008331 	.word	0x08008331
 80082d4:	08008331 	.word	0x08008331
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008331 	.word	0x08008331
 80082e0:	08008331 	.word	0x08008331
 80082e4:	08008331 	.word	0x08008331
 80082e8:	08008331 	.word	0x08008331
 80082ec:	08008331 	.word	0x08008331
 80082f0:	08008331 	.word	0x08008331
 80082f4:	08008331 	.word	0x08008331
 80082f8:	08008331 	.word	0x08008331
 80082fc:	08008331 	.word	0x08008331
 8008300:	08008331 	.word	0x08008331
 8008304:	08008331 	.word	0x08008331
 8008308:	08008331 	.word	0x08008331
 800830c:	08008331 	.word	0x08008331
 8008310:	08008331 	.word	0x08008331
 8008314:	08008331 	.word	0x08008331
 8008318:	08008331 	.word	0x08008331
 800831c:	08008331 	.word	0x08008331
 8008320:	08008331 	.word	0x08008331
 8008324:	08008331 	.word	0x08008331
 8008328:	08008331 	.word	0x08008331
 800832c:	08008331 	.word	0x08008331
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008330:	bf00      	nop
  }

  return (USBD_OK);
 8008332:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	4805      	ldr	r0, [pc, #20]	; (8008364 <CDC_Receive_FS+0x24>)
 800834e:	f7fe fe09 	bl	8006f64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008352:	4804      	ldr	r0, [pc, #16]	; (8008364 <CDC_Receive_FS+0x24>)
 8008354:	f7fe fe1a 	bl	8006f8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008358:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000408 	.word	0x20000408

08008368 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800837a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2212      	movs	r2, #18
 800839c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	2000014c 	.word	0x2000014c

080083b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	6039      	str	r1, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2204      	movs	r2, #4
 80083c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083c2:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	20000160 	.word	0x20000160

080083d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d105      	bne.n	80083f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	4907      	ldr	r1, [pc, #28]	; (8008408 <USBD_FS_ProductStrDescriptor+0x34>)
 80083ea:	4808      	ldr	r0, [pc, #32]	; (800840c <USBD_FS_ProductStrDescriptor+0x38>)
 80083ec:	f7ff fe1d 	bl	800802a <USBD_GetString>
 80083f0:	e004      	b.n	80083fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	4904      	ldr	r1, [pc, #16]	; (8008408 <USBD_FS_ProductStrDescriptor+0x34>)
 80083f6:	4805      	ldr	r0, [pc, #20]	; (800840c <USBD_FS_ProductStrDescriptor+0x38>)
 80083f8:	f7ff fe17 	bl	800802a <USBD_GetString>
  }
  return USBD_StrDesc;
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	200016d8 	.word	0x200016d8
 800840c:	08009a14 	.word	0x08009a14

08008410 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	6039      	str	r1, [r7, #0]
 800841a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	4904      	ldr	r1, [pc, #16]	; (8008430 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008420:	4804      	ldr	r0, [pc, #16]	; (8008434 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008422:	f7ff fe02 	bl	800802a <USBD_GetString>
  return USBD_StrDesc;
 8008426:	4b02      	ldr	r3, [pc, #8]	; (8008430 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	200016d8 	.word	0x200016d8
 8008434:	08009a2c 	.word	0x08009a2c

08008438 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	221a      	movs	r2, #26
 8008448:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800844a:	f000 f843 	bl	80084d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800844e:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000164 	.word	0x20000164

0800845c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d105      	bne.n	800847a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	4907      	ldr	r1, [pc, #28]	; (8008490 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008472:	4808      	ldr	r0, [pc, #32]	; (8008494 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008474:	f7ff fdd9 	bl	800802a <USBD_GetString>
 8008478:	e004      	b.n	8008484 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4904      	ldr	r1, [pc, #16]	; (8008490 <USBD_FS_ConfigStrDescriptor+0x34>)
 800847e:	4805      	ldr	r0, [pc, #20]	; (8008494 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008480:	f7ff fdd3 	bl	800802a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008484:	4b02      	ldr	r3, [pc, #8]	; (8008490 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200016d8 	.word	0x200016d8
 8008494:	08009a40 	.word	0x08009a40

08008498 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d105      	bne.n	80084b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	4907      	ldr	r1, [pc, #28]	; (80084cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ae:	4808      	ldr	r0, [pc, #32]	; (80084d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084b0:	f7ff fdbb 	bl	800802a <USBD_GetString>
 80084b4:	e004      	b.n	80084c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	4904      	ldr	r1, [pc, #16]	; (80084cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ba:	4805      	ldr	r0, [pc, #20]	; (80084d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084bc:	f7ff fdb5 	bl	800802a <USBD_GetString>
  }
  return USBD_StrDesc;
 80084c0:	4b02      	ldr	r3, [pc, #8]	; (80084cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200016d8 	.word	0x200016d8
 80084d0:	08009a4c 	.word	0x08009a4c

080084d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <Get_SerialNum+0x44>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084e0:	4b0e      	ldr	r3, [pc, #56]	; (800851c <Get_SerialNum+0x48>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084e6:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <Get_SerialNum+0x4c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084fa:	2208      	movs	r2, #8
 80084fc:	4909      	ldr	r1, [pc, #36]	; (8008524 <Get_SerialNum+0x50>)
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f814 	bl	800852c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008504:	2204      	movs	r2, #4
 8008506:	4908      	ldr	r1, [pc, #32]	; (8008528 <Get_SerialNum+0x54>)
 8008508:	68b8      	ldr	r0, [r7, #8]
 800850a:	f000 f80f 	bl	800852c <IntToUnicode>
  }
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	1fff7a10 	.word	0x1fff7a10
 800851c:	1fff7a14 	.word	0x1fff7a14
 8008520:	1fff7a18 	.word	0x1fff7a18
 8008524:	20000166 	.word	0x20000166
 8008528:	20000176 	.word	0x20000176

0800852c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]
 8008542:	e027      	b.n	8008594 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	2b09      	cmp	r3, #9
 800854a:	d80b      	bhi.n	8008564 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	0f1b      	lsrs	r3, r3, #28
 8008550:	b2da      	uxtb	r2, r3
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	4619      	mov	r1, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	440b      	add	r3, r1
 800855c:	3230      	adds	r2, #48	; 0x30
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e00a      	b.n	800857a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	0f1b      	lsrs	r3, r3, #28
 8008568:	b2da      	uxtb	r2, r3
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	4619      	mov	r1, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	440b      	add	r3, r1
 8008574:	3237      	adds	r2, #55	; 0x37
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	3301      	adds	r3, #1
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	4413      	add	r3, r2
 800858a:	2200      	movs	r2, #0
 800858c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	3301      	adds	r3, #1
 8008592:	75fb      	strb	r3, [r7, #23]
 8008594:	7dfa      	ldrb	r2, [r7, #23]
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	429a      	cmp	r2, r3
 800859a:	d3d3      	bcc.n	8008544 <IntToUnicode+0x18>
  }
}
 800859c:	bf00      	nop
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	609a      	str	r2, [r3, #8]
 80085bc:	60da      	str	r2, [r3, #12]
 80085be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c8:	d13a      	bne.n	8008640 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ca:	2300      	movs	r3, #0
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	4a1d      	ldr	r2, [pc, #116]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	6313      	str	r3, [r2, #48]	; 0x30
 80085da:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ec:	2302      	movs	r3, #2
 80085ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f4:	2303      	movs	r3, #3
 80085f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085f8:	230a      	movs	r3, #10
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085fc:	f107 0314 	add.w	r3, r7, #20
 8008600:	4619      	mov	r1, r3
 8008602:	4812      	ldr	r0, [pc, #72]	; (800864c <HAL_PCD_MspInit+0xa4>)
 8008604:	f7f9 fece 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008608:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 800860a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860c:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 800860e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008612:	6353      	str	r3, [r2, #52]	; 0x34
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	4b0b      	ldr	r3, [pc, #44]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 800861a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861c:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 800861e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008622:	6453      	str	r3, [r2, #68]	; 0x44
 8008624:	4b08      	ldr	r3, [pc, #32]	; (8008648 <HAL_PCD_MspInit+0xa0>)
 8008626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008630:	2200      	movs	r2, #0
 8008632:	2100      	movs	r1, #0
 8008634:	2043      	movs	r0, #67	; 0x43
 8008636:	f7f9 fb10 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800863a:	2043      	movs	r0, #67	; 0x43
 800863c:	f7f9 fb29 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008640:	bf00      	nop
 8008642:	3728      	adds	r7, #40	; 0x28
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40023800 	.word	0x40023800
 800864c:	40020000 	.word	0x40020000

08008650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f7fe fd5c 	bl	8007124 <USBD_LL_SetupStage>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	4619      	mov	r1, r3
 800869e:	f7fe fd94 	bl	80071ca <USBD_LL_DataOutStage>
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	3348      	adds	r3, #72	; 0x48
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	4619      	mov	r1, r3
 80086d2:	f7fe fddd 	bl	8007290 <USBD_LL_DataInStage>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fee1 	bl	80074b4 <USBD_LL_SOF>
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
 8008712:	e008      	b.n	8008726 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d102      	bne.n	8008722 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]
 8008720:	e001      	b.n	8008726 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008722:	f7f8 f9c9 	bl	8000ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800872c:	7bfa      	ldrb	r2, [r7, #15]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe fe84 	bl	800743e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fe3d 	bl	80073bc <USBD_LL_Reset>
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fe7f 	bl	800745e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008780:	4b04      	ldr	r3, [pc, #16]	; (8008794 <HAL_PCD_SuspendCallback+0x48>)
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	4a03      	ldr	r2, [pc, #12]	; (8008794 <HAL_PCD_SuspendCallback+0x48>)
 8008786:	f043 0306 	orr.w	r3, r3, #6
 800878a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	e000ed00 	.word	0xe000ed00

08008798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fe6e 	bl	8007488 <USBD_LL_Resume>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fe99 	bl	8007502 <USBD_LL_IsoOUTIncomplete>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fe7a 	bl	80074e8 <USBD_LL_IsoINIncomplete>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fe86 	bl	800751c <USBD_LL_DevConnected>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fe83 	bl	8007532 <USBD_LL_DevDisconnected>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d13c      	bne.n	80088be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008844:	4a20      	ldr	r2, [pc, #128]	; (80088c8 <USBD_LL_Init+0x94>)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <USBD_LL_Init+0x94>)
 8008850:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008854:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <USBD_LL_Init+0x94>)
 8008856:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800885a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800885c:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <USBD_LL_Init+0x94>)
 800885e:	2204      	movs	r2, #4
 8008860:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008862:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <USBD_LL_Init+0x94>)
 8008864:	2202      	movs	r2, #2
 8008866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008868:	4b17      	ldr	r3, [pc, #92]	; (80088c8 <USBD_LL_Init+0x94>)
 800886a:	2200      	movs	r2, #0
 800886c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <USBD_LL_Init+0x94>)
 8008870:	2202      	movs	r2, #2
 8008872:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008874:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <USBD_LL_Init+0x94>)
 8008876:	2200      	movs	r2, #0
 8008878:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800887a:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <USBD_LL_Init+0x94>)
 800887c:	2200      	movs	r2, #0
 800887e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <USBD_LL_Init+0x94>)
 8008882:	2200      	movs	r2, #0
 8008884:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008886:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <USBD_LL_Init+0x94>)
 8008888:	2200      	movs	r2, #0
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800888c:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <USBD_LL_Init+0x94>)
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008892:	480d      	ldr	r0, [pc, #52]	; (80088c8 <USBD_LL_Init+0x94>)
 8008894:	f7fa f85a 	bl	800294c <HAL_PCD_Init>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800889e:	f7f8 f90b 	bl	8000ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088a2:	2180      	movs	r1, #128	; 0x80
 80088a4:	4808      	ldr	r0, [pc, #32]	; (80088c8 <USBD_LL_Init+0x94>)
 80088a6:	f7fb f9b8 	bl	8003c1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80088aa:	2240      	movs	r2, #64	; 0x40
 80088ac:	2100      	movs	r1, #0
 80088ae:	4806      	ldr	r0, [pc, #24]	; (80088c8 <USBD_LL_Init+0x94>)
 80088b0:	f7fb f96c 	bl	8003b8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80088b4:	2280      	movs	r2, #128	; 0x80
 80088b6:	2101      	movs	r1, #1
 80088b8:	4803      	ldr	r0, [pc, #12]	; (80088c8 <USBD_LL_Init+0x94>)
 80088ba:	f7fb f967 	bl	8003b8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200018d8 	.word	0x200018d8

080088cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fa f94f 	bl	8002b86 <HAL_PCD_Start>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f92a 	bl	8008b48 <USBD_Get_USB_Status>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	4608      	mov	r0, r1
 800890c:	4611      	mov	r1, r2
 800890e:	461a      	mov	r2, r3
 8008910:	4603      	mov	r3, r0
 8008912:	70fb      	strb	r3, [r7, #3]
 8008914:	460b      	mov	r3, r1
 8008916:	70bb      	strb	r3, [r7, #2]
 8008918:	4613      	mov	r3, r2
 800891a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800892a:	78bb      	ldrb	r3, [r7, #2]
 800892c:	883a      	ldrh	r2, [r7, #0]
 800892e:	78f9      	ldrb	r1, [r7, #3]
 8008930:	f7fa fd33 	bl	800339a <HAL_PCD_EP_Open>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f904 	bl	8008b48 <USBD_Get_USB_Status>
 8008940:	4603      	mov	r3, r0
 8008942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008944:	7bbb      	ldrb	r3, [r7, #14]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f7fa fd7c 	bl	800346a <HAL_PCD_EP_Close>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f8e5 	bl	8008b48 <USBD_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008982:	7bbb      	ldrb	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fa fe54 	bl	8003658 <HAL_PCD_EP_SetStall>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f8c6 	bl	8008b48 <USBD_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fa fe99 	bl	8003720 <HAL_PCD_EP_ClrStall>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f8a7 	bl	8008b48 <USBD_Get_USB_Status>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da0b      	bge.n	8008a3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	1a9b      	subs	r3, r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	333e      	adds	r3, #62	; 0x3e
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	e00b      	b.n	8008a54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	4613      	mov	r3, r2
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fa fc66 	bl	8003350 <HAL_PCD_SetAddress>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 f85c 	bl	8008b48 <USBD_Get_USB_Status>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b086      	sub	sp, #24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008abc:	7af9      	ldrb	r1, [r7, #11]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	f7fa fd7f 	bl	80035c4 <HAL_PCD_EP_Transmit>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f83b 	bl	8008b48 <USBD_Get_USB_Status>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ad6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	460b      	mov	r3, r1
 8008aee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008afe:	7af9      	ldrb	r1, [r7, #11]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	f7fa fcfb 	bl	80034fe <HAL_PCD_EP_Receive>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f81a 	bl	8008b48 <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b18:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fa fd2b 	bl	8003594 <HAL_PCD_EP_GetRxCount>
 8008b3e:	4603      	mov	r3, r0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d817      	bhi.n	8008b8c <USBD_Get_USB_Status+0x44>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBD_Get_USB_Status+0x1c>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b7b 	.word	0x08008b7b
 8008b6c:	08008b81 	.word	0x08008b81
 8008b70:	08008b87 	.word	0x08008b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	e00b      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7e:	e008      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e005      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b86:	2303      	movs	r3, #3
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e002      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	bf00      	nop
  }
  return usb_status;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	; (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	20000180 	.word	0x20000180

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4e0d      	ldr	r6, [pc, #52]	; (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1ba4      	subs	r4, r4, r6
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	42a5      	cmp	r5, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4e0b      	ldr	r6, [pc, #44]	; (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f000 ff14 	bl	80099ec <_init>
 8008bc4:	1ba4      	subs	r4, r4, r6
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2500      	movs	r5, #0
 8008bca:	42a5      	cmp	r5, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bd4:	4798      	blx	r3
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bde:	4798      	blx	r3
 8008be0:	3501      	adds	r5, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08009b1c 	.word	0x08009b1c
 8008be8:	08009b1c 	.word	0x08009b1c
 8008bec:	08009b1c 	.word	0x08009b1c
 8008bf0:	08009b20 	.word	0x08009b20

08008bf4 <malloc>:
 8008bf4:	4b02      	ldr	r3, [pc, #8]	; (8008c00 <malloc+0xc>)
 8008bf6:	4601      	mov	r1, r0
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	f000 b861 	b.w	8008cc0 <_malloc_r>
 8008bfe:	bf00      	nop
 8008c00:	20000180 	.word	0x20000180

08008c04 <free>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <free+0xc>)
 8008c06:	4601      	mov	r1, r0
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f000 b80b 	b.w	8008c24 <_free_r>
 8008c0e:	bf00      	nop
 8008c10:	20000180 	.word	0x20000180

08008c14 <memset>:
 8008c14:	4402      	add	r2, r0
 8008c16:	4603      	mov	r3, r0
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d100      	bne.n	8008c1e <memset+0xa>
 8008c1c:	4770      	bx	lr
 8008c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c22:	e7f9      	b.n	8008c18 <memset+0x4>

08008c24 <_free_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4605      	mov	r5, r0
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d045      	beq.n	8008cb8 <_free_r+0x94>
 8008c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c30:	1f0c      	subs	r4, r1, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bfb8      	it	lt
 8008c36:	18e4      	addlt	r4, r4, r3
 8008c38:	f000 f98e 	bl	8008f58 <__malloc_lock>
 8008c3c:	4a1f      	ldr	r2, [pc, #124]	; (8008cbc <_free_r+0x98>)
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	4610      	mov	r0, r2
 8008c42:	b933      	cbnz	r3, 8008c52 <_free_r+0x2e>
 8008c44:	6063      	str	r3, [r4, #4]
 8008c46:	6014      	str	r4, [r2, #0]
 8008c48:	4628      	mov	r0, r5
 8008c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c4e:	f000 b984 	b.w	8008f5a <__malloc_unlock>
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	d90c      	bls.n	8008c70 <_free_r+0x4c>
 8008c56:	6821      	ldr	r1, [r4, #0]
 8008c58:	1862      	adds	r2, r4, r1
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	bf04      	itt	eq
 8008c5e:	681a      	ldreq	r2, [r3, #0]
 8008c60:	685b      	ldreq	r3, [r3, #4]
 8008c62:	6063      	str	r3, [r4, #4]
 8008c64:	bf04      	itt	eq
 8008c66:	1852      	addeq	r2, r2, r1
 8008c68:	6022      	streq	r2, [r4, #0]
 8008c6a:	6004      	str	r4, [r0, #0]
 8008c6c:	e7ec      	b.n	8008c48 <_free_r+0x24>
 8008c6e:	4613      	mov	r3, r2
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	b10a      	cbz	r2, 8008c78 <_free_r+0x54>
 8008c74:	42a2      	cmp	r2, r4
 8008c76:	d9fa      	bls.n	8008c6e <_free_r+0x4a>
 8008c78:	6819      	ldr	r1, [r3, #0]
 8008c7a:	1858      	adds	r0, r3, r1
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d10b      	bne.n	8008c98 <_free_r+0x74>
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	4401      	add	r1, r0
 8008c84:	1858      	adds	r0, r3, r1
 8008c86:	4282      	cmp	r2, r0
 8008c88:	6019      	str	r1, [r3, #0]
 8008c8a:	d1dd      	bne.n	8008c48 <_free_r+0x24>
 8008c8c:	6810      	ldr	r0, [r2, #0]
 8008c8e:	6852      	ldr	r2, [r2, #4]
 8008c90:	605a      	str	r2, [r3, #4]
 8008c92:	4401      	add	r1, r0
 8008c94:	6019      	str	r1, [r3, #0]
 8008c96:	e7d7      	b.n	8008c48 <_free_r+0x24>
 8008c98:	d902      	bls.n	8008ca0 <_free_r+0x7c>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	e7d3      	b.n	8008c48 <_free_r+0x24>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	1821      	adds	r1, r4, r0
 8008ca4:	428a      	cmp	r2, r1
 8008ca6:	bf04      	itt	eq
 8008ca8:	6811      	ldreq	r1, [r2, #0]
 8008caa:	6852      	ldreq	r2, [r2, #4]
 8008cac:	6062      	str	r2, [r4, #4]
 8008cae:	bf04      	itt	eq
 8008cb0:	1809      	addeq	r1, r1, r0
 8008cb2:	6021      	streq	r1, [r4, #0]
 8008cb4:	605c      	str	r4, [r3, #4]
 8008cb6:	e7c7      	b.n	8008c48 <_free_r+0x24>
 8008cb8:	bd38      	pop	{r3, r4, r5, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000208 	.word	0x20000208

08008cc0 <_malloc_r>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	1ccd      	adds	r5, r1, #3
 8008cc4:	f025 0503 	bic.w	r5, r5, #3
 8008cc8:	3508      	adds	r5, #8
 8008cca:	2d0c      	cmp	r5, #12
 8008ccc:	bf38      	it	cc
 8008cce:	250c      	movcc	r5, #12
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	db01      	blt.n	8008cda <_malloc_r+0x1a>
 8008cd6:	42a9      	cmp	r1, r5
 8008cd8:	d903      	bls.n	8008ce2 <_malloc_r+0x22>
 8008cda:	230c      	movs	r3, #12
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	2000      	movs	r0, #0
 8008ce0:	bd70      	pop	{r4, r5, r6, pc}
 8008ce2:	f000 f939 	bl	8008f58 <__malloc_lock>
 8008ce6:	4a21      	ldr	r2, [pc, #132]	; (8008d6c <_malloc_r+0xac>)
 8008ce8:	6814      	ldr	r4, [r2, #0]
 8008cea:	4621      	mov	r1, r4
 8008cec:	b991      	cbnz	r1, 8008d14 <_malloc_r+0x54>
 8008cee:	4c20      	ldr	r4, [pc, #128]	; (8008d70 <_malloc_r+0xb0>)
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	b91b      	cbnz	r3, 8008cfc <_malloc_r+0x3c>
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f000 f855 	bl	8008da4 <_sbrk_r>
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f000 f850 	bl	8008da4 <_sbrk_r>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	d124      	bne.n	8008d52 <_malloc_r+0x92>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f000 f924 	bl	8008f5a <__malloc_unlock>
 8008d12:	e7e4      	b.n	8008cde <_malloc_r+0x1e>
 8008d14:	680b      	ldr	r3, [r1, #0]
 8008d16:	1b5b      	subs	r3, r3, r5
 8008d18:	d418      	bmi.n	8008d4c <_malloc_r+0x8c>
 8008d1a:	2b0b      	cmp	r3, #11
 8008d1c:	d90f      	bls.n	8008d3e <_malloc_r+0x7e>
 8008d1e:	600b      	str	r3, [r1, #0]
 8008d20:	50cd      	str	r5, [r1, r3]
 8008d22:	18cc      	adds	r4, r1, r3
 8008d24:	4630      	mov	r0, r6
 8008d26:	f000 f918 	bl	8008f5a <__malloc_unlock>
 8008d2a:	f104 000b 	add.w	r0, r4, #11
 8008d2e:	1d23      	adds	r3, r4, #4
 8008d30:	f020 0007 	bic.w	r0, r0, #7
 8008d34:	1ac3      	subs	r3, r0, r3
 8008d36:	d0d3      	beq.n	8008ce0 <_malloc_r+0x20>
 8008d38:	425a      	negs	r2, r3
 8008d3a:	50e2      	str	r2, [r4, r3]
 8008d3c:	e7d0      	b.n	8008ce0 <_malloc_r+0x20>
 8008d3e:	428c      	cmp	r4, r1
 8008d40:	684b      	ldr	r3, [r1, #4]
 8008d42:	bf16      	itet	ne
 8008d44:	6063      	strne	r3, [r4, #4]
 8008d46:	6013      	streq	r3, [r2, #0]
 8008d48:	460c      	movne	r4, r1
 8008d4a:	e7eb      	b.n	8008d24 <_malloc_r+0x64>
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	6849      	ldr	r1, [r1, #4]
 8008d50:	e7cc      	b.n	8008cec <_malloc_r+0x2c>
 8008d52:	1cc4      	adds	r4, r0, #3
 8008d54:	f024 0403 	bic.w	r4, r4, #3
 8008d58:	42a0      	cmp	r0, r4
 8008d5a:	d005      	beq.n	8008d68 <_malloc_r+0xa8>
 8008d5c:	1a21      	subs	r1, r4, r0
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 f820 	bl	8008da4 <_sbrk_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d0cf      	beq.n	8008d08 <_malloc_r+0x48>
 8008d68:	6025      	str	r5, [r4, #0]
 8008d6a:	e7db      	b.n	8008d24 <_malloc_r+0x64>
 8008d6c:	20000208 	.word	0x20000208
 8008d70:	2000020c 	.word	0x2000020c

08008d74 <iprintf>:
 8008d74:	b40f      	push	{r0, r1, r2, r3}
 8008d76:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <iprintf+0x2c>)
 8008d78:	b513      	push	{r0, r1, r4, lr}
 8008d7a:	681c      	ldr	r4, [r3, #0]
 8008d7c:	b124      	cbz	r4, 8008d88 <iprintf+0x14>
 8008d7e:	69a3      	ldr	r3, [r4, #24]
 8008d80:	b913      	cbnz	r3, 8008d88 <iprintf+0x14>
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f85e 	bl	8008e44 <__sinit>
 8008d88:	ab05      	add	r3, sp, #20
 8008d8a:	9a04      	ldr	r2, [sp, #16]
 8008d8c:	68a1      	ldr	r1, [r4, #8]
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 f90d 	bl	8008fb0 <_vfiprintf_r>
 8008d96:	b002      	add	sp, #8
 8008d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9c:	b004      	add	sp, #16
 8008d9e:	4770      	bx	lr
 8008da0:	20000180 	.word	0x20000180

08008da4 <_sbrk_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4c06      	ldr	r4, [pc, #24]	; (8008dc0 <_sbrk_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4605      	mov	r5, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	f7f8 f81c 	bl	8000dec <_sbrk>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_sbrk_r+0x1a>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_sbrk_r+0x1a>
 8008dbc:	602b      	str	r3, [r5, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20001ce0 	.word	0x20001ce0

08008dc4 <std>:
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	4604      	mov	r4, r0
 8008dca:	e9c0 3300 	strd	r3, r3, [r0]
 8008dce:	6083      	str	r3, [r0, #8]
 8008dd0:	8181      	strh	r1, [r0, #12]
 8008dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008dd4:	81c2      	strh	r2, [r0, #14]
 8008dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dda:	6183      	str	r3, [r0, #24]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	2208      	movs	r2, #8
 8008de0:	305c      	adds	r0, #92	; 0x5c
 8008de2:	f7ff ff17 	bl	8008c14 <memset>
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x38>)
 8008de8:	6263      	str	r3, [r4, #36]	; 0x24
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <std+0x3c>)
 8008dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <std+0x40>)
 8008df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <std+0x44>)
 8008df4:	6224      	str	r4, [r4, #32]
 8008df6:	6323      	str	r3, [r4, #48]	; 0x30
 8008df8:	bd10      	pop	{r4, pc}
 8008dfa:	bf00      	nop
 8008dfc:	080094ed 	.word	0x080094ed
 8008e00:	0800950f 	.word	0x0800950f
 8008e04:	08009547 	.word	0x08009547
 8008e08:	0800956b 	.word	0x0800956b

08008e0c <_cleanup_r>:
 8008e0c:	4901      	ldr	r1, [pc, #4]	; (8008e14 <_cleanup_r+0x8>)
 8008e0e:	f000 b885 	b.w	8008f1c <_fwalk_reent>
 8008e12:	bf00      	nop
 8008e14:	08009845 	.word	0x08009845

08008e18 <__sfmoreglue>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	1e4a      	subs	r2, r1, #1
 8008e1c:	2568      	movs	r5, #104	; 0x68
 8008e1e:	4355      	muls	r5, r2
 8008e20:	460e      	mov	r6, r1
 8008e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e26:	f7ff ff4b 	bl	8008cc0 <_malloc_r>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	b140      	cbz	r0, 8008e40 <__sfmoreglue+0x28>
 8008e2e:	2100      	movs	r1, #0
 8008e30:	e9c0 1600 	strd	r1, r6, [r0]
 8008e34:	300c      	adds	r0, #12
 8008e36:	60a0      	str	r0, [r4, #8]
 8008e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e3c:	f7ff feea 	bl	8008c14 <memset>
 8008e40:	4620      	mov	r0, r4
 8008e42:	bd70      	pop	{r4, r5, r6, pc}

08008e44 <__sinit>:
 8008e44:	6983      	ldr	r3, [r0, #24]
 8008e46:	b510      	push	{r4, lr}
 8008e48:	4604      	mov	r4, r0
 8008e4a:	bb33      	cbnz	r3, 8008e9a <__sinit+0x56>
 8008e4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008e50:	6503      	str	r3, [r0, #80]	; 0x50
 8008e52:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <__sinit+0x58>)
 8008e54:	4a12      	ldr	r2, [pc, #72]	; (8008ea0 <__sinit+0x5c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6282      	str	r2, [r0, #40]	; 0x28
 8008e5a:	4298      	cmp	r0, r3
 8008e5c:	bf04      	itt	eq
 8008e5e:	2301      	moveq	r3, #1
 8008e60:	6183      	streq	r3, [r0, #24]
 8008e62:	f000 f81f 	bl	8008ea4 <__sfp>
 8008e66:	6060      	str	r0, [r4, #4]
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 f81b 	bl	8008ea4 <__sfp>
 8008e6e:	60a0      	str	r0, [r4, #8]
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 f817 	bl	8008ea4 <__sfp>
 8008e76:	2200      	movs	r2, #0
 8008e78:	60e0      	str	r0, [r4, #12]
 8008e7a:	2104      	movs	r1, #4
 8008e7c:	6860      	ldr	r0, [r4, #4]
 8008e7e:	f7ff ffa1 	bl	8008dc4 <std>
 8008e82:	2201      	movs	r2, #1
 8008e84:	2109      	movs	r1, #9
 8008e86:	68a0      	ldr	r0, [r4, #8]
 8008e88:	f7ff ff9c 	bl	8008dc4 <std>
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	2112      	movs	r1, #18
 8008e90:	68e0      	ldr	r0, [r4, #12]
 8008e92:	f7ff ff97 	bl	8008dc4 <std>
 8008e96:	2301      	movs	r3, #1
 8008e98:	61a3      	str	r3, [r4, #24]
 8008e9a:	bd10      	pop	{r4, pc}
 8008e9c:	08009a7c 	.word	0x08009a7c
 8008ea0:	08008e0d 	.word	0x08008e0d

08008ea4 <__sfp>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <__sfp+0x70>)
 8008ea8:	681e      	ldr	r6, [r3, #0]
 8008eaa:	69b3      	ldr	r3, [r6, #24]
 8008eac:	4607      	mov	r7, r0
 8008eae:	b913      	cbnz	r3, 8008eb6 <__sfp+0x12>
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff ffc7 	bl	8008e44 <__sinit>
 8008eb6:	3648      	adds	r6, #72	; 0x48
 8008eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	d503      	bpl.n	8008ec8 <__sfp+0x24>
 8008ec0:	6833      	ldr	r3, [r6, #0]
 8008ec2:	b133      	cbz	r3, 8008ed2 <__sfp+0x2e>
 8008ec4:	6836      	ldr	r6, [r6, #0]
 8008ec6:	e7f7      	b.n	8008eb8 <__sfp+0x14>
 8008ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ecc:	b16d      	cbz	r5, 8008eea <__sfp+0x46>
 8008ece:	3468      	adds	r4, #104	; 0x68
 8008ed0:	e7f4      	b.n	8008ebc <__sfp+0x18>
 8008ed2:	2104      	movs	r1, #4
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f7ff ff9f 	bl	8008e18 <__sfmoreglue>
 8008eda:	6030      	str	r0, [r6, #0]
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1f1      	bne.n	8008ec4 <__sfp+0x20>
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <__sfp+0x74>)
 8008eec:	6665      	str	r5, [r4, #100]	; 0x64
 8008eee:	e9c4 5500 	strd	r5, r5, [r4]
 8008ef2:	60a5      	str	r5, [r4, #8]
 8008ef4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008ef8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008efc:	2208      	movs	r2, #8
 8008efe:	4629      	mov	r1, r5
 8008f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f04:	f7ff fe86 	bl	8008c14 <memset>
 8008f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f10:	e7e9      	b.n	8008ee6 <__sfp+0x42>
 8008f12:	bf00      	nop
 8008f14:	08009a7c 	.word	0x08009a7c
 8008f18:	ffff0001 	.word	0xffff0001

08008f1c <_fwalk_reent>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	4680      	mov	r8, r0
 8008f22:	4689      	mov	r9, r1
 8008f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f28:	2600      	movs	r6, #0
 8008f2a:	b914      	cbnz	r4, 8008f32 <_fwalk_reent+0x16>
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008f36:	3f01      	subs	r7, #1
 8008f38:	d501      	bpl.n	8008f3e <_fwalk_reent+0x22>
 8008f3a:	6824      	ldr	r4, [r4, #0]
 8008f3c:	e7f5      	b.n	8008f2a <_fwalk_reent+0xe>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d907      	bls.n	8008f54 <_fwalk_reent+0x38>
 8008f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	d003      	beq.n	8008f54 <_fwalk_reent+0x38>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4640      	mov	r0, r8
 8008f50:	47c8      	blx	r9
 8008f52:	4306      	orrs	r6, r0
 8008f54:	3568      	adds	r5, #104	; 0x68
 8008f56:	e7ee      	b.n	8008f36 <_fwalk_reent+0x1a>

08008f58 <__malloc_lock>:
 8008f58:	4770      	bx	lr

08008f5a <__malloc_unlock>:
 8008f5a:	4770      	bx	lr

08008f5c <__sfputc_r>:
 8008f5c:	6893      	ldr	r3, [r2, #8]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	b410      	push	{r4}
 8008f64:	6093      	str	r3, [r2, #8]
 8008f66:	da08      	bge.n	8008f7a <__sfputc_r+0x1e>
 8008f68:	6994      	ldr	r4, [r2, #24]
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	db01      	blt.n	8008f72 <__sfputc_r+0x16>
 8008f6e:	290a      	cmp	r1, #10
 8008f70:	d103      	bne.n	8008f7a <__sfputc_r+0x1e>
 8008f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f76:	f000 bafd 	b.w	8009574 <__swbuf_r>
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	1c58      	adds	r0, r3, #1
 8008f7e:	6010      	str	r0, [r2, #0]
 8008f80:	7019      	strb	r1, [r3, #0]
 8008f82:	4608      	mov	r0, r1
 8008f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <__sfputs_r>:
 8008f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	4614      	mov	r4, r2
 8008f92:	18d5      	adds	r5, r2, r3
 8008f94:	42ac      	cmp	r4, r5
 8008f96:	d101      	bne.n	8008f9c <__sfputs_r+0x12>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e007      	b.n	8008fac <__sfputs_r+0x22>
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ffda 	bl	8008f5c <__sfputc_r>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d1f3      	bne.n	8008f94 <__sfputs_r+0xa>
 8008fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb0 <_vfiprintf_r>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	b09d      	sub	sp, #116	; 0x74
 8008fb8:	4617      	mov	r7, r2
 8008fba:	461d      	mov	r5, r3
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	b118      	cbz	r0, 8008fc8 <_vfiprintf_r+0x18>
 8008fc0:	6983      	ldr	r3, [r0, #24]
 8008fc2:	b90b      	cbnz	r3, 8008fc8 <_vfiprintf_r+0x18>
 8008fc4:	f7ff ff3e 	bl	8008e44 <__sinit>
 8008fc8:	4b7c      	ldr	r3, [pc, #496]	; (80091bc <_vfiprintf_r+0x20c>)
 8008fca:	429c      	cmp	r4, r3
 8008fcc:	d158      	bne.n	8009080 <_vfiprintf_r+0xd0>
 8008fce:	6874      	ldr	r4, [r6, #4]
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	0718      	lsls	r0, r3, #28
 8008fd4:	d55e      	bpl.n	8009094 <_vfiprintf_r+0xe4>
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d05b      	beq.n	8009094 <_vfiprintf_r+0xe4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fe6:	2330      	movs	r3, #48	; 0x30
 8008fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fec:	9503      	str	r5, [sp, #12]
 8008fee:	f04f 0b01 	mov.w	fp, #1
 8008ff2:	46b8      	mov	r8, r7
 8008ff4:	4645      	mov	r5, r8
 8008ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ffa:	b10b      	cbz	r3, 8009000 <_vfiprintf_r+0x50>
 8008ffc:	2b25      	cmp	r3, #37	; 0x25
 8008ffe:	d154      	bne.n	80090aa <_vfiprintf_r+0xfa>
 8009000:	ebb8 0a07 	subs.w	sl, r8, r7
 8009004:	d00b      	beq.n	800901e <_vfiprintf_r+0x6e>
 8009006:	4653      	mov	r3, sl
 8009008:	463a      	mov	r2, r7
 800900a:	4621      	mov	r1, r4
 800900c:	4630      	mov	r0, r6
 800900e:	f7ff ffbc 	bl	8008f8a <__sfputs_r>
 8009012:	3001      	adds	r0, #1
 8009014:	f000 80c2 	beq.w	800919c <_vfiprintf_r+0x1ec>
 8009018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901a:	4453      	add	r3, sl
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	f898 3000 	ldrb.w	r3, [r8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 80ba 	beq.w	800919c <_vfiprintf_r+0x1ec>
 8009028:	2300      	movs	r3, #0
 800902a:	f04f 32ff 	mov.w	r2, #4294967295
 800902e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	9307      	str	r3, [sp, #28]
 8009036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800903a:	931a      	str	r3, [sp, #104]	; 0x68
 800903c:	46a8      	mov	r8, r5
 800903e:	2205      	movs	r2, #5
 8009040:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009044:	485e      	ldr	r0, [pc, #376]	; (80091c0 <_vfiprintf_r+0x210>)
 8009046:	f7f7 f8cb 	bl	80001e0 <memchr>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	bb78      	cbnz	r0, 80090ae <_vfiprintf_r+0xfe>
 800904e:	06d9      	lsls	r1, r3, #27
 8009050:	bf44      	itt	mi
 8009052:	2220      	movmi	r2, #32
 8009054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009058:	071a      	lsls	r2, r3, #28
 800905a:	bf44      	itt	mi
 800905c:	222b      	movmi	r2, #43	; 0x2b
 800905e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009062:	782a      	ldrb	r2, [r5, #0]
 8009064:	2a2a      	cmp	r2, #42	; 0x2a
 8009066:	d02a      	beq.n	80090be <_vfiprintf_r+0x10e>
 8009068:	9a07      	ldr	r2, [sp, #28]
 800906a:	46a8      	mov	r8, r5
 800906c:	2000      	movs	r0, #0
 800906e:	250a      	movs	r5, #10
 8009070:	4641      	mov	r1, r8
 8009072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009076:	3b30      	subs	r3, #48	; 0x30
 8009078:	2b09      	cmp	r3, #9
 800907a:	d969      	bls.n	8009150 <_vfiprintf_r+0x1a0>
 800907c:	b360      	cbz	r0, 80090d8 <_vfiprintf_r+0x128>
 800907e:	e024      	b.n	80090ca <_vfiprintf_r+0x11a>
 8009080:	4b50      	ldr	r3, [pc, #320]	; (80091c4 <_vfiprintf_r+0x214>)
 8009082:	429c      	cmp	r4, r3
 8009084:	d101      	bne.n	800908a <_vfiprintf_r+0xda>
 8009086:	68b4      	ldr	r4, [r6, #8]
 8009088:	e7a2      	b.n	8008fd0 <_vfiprintf_r+0x20>
 800908a:	4b4f      	ldr	r3, [pc, #316]	; (80091c8 <_vfiprintf_r+0x218>)
 800908c:	429c      	cmp	r4, r3
 800908e:	bf08      	it	eq
 8009090:	68f4      	ldreq	r4, [r6, #12]
 8009092:	e79d      	b.n	8008fd0 <_vfiprintf_r+0x20>
 8009094:	4621      	mov	r1, r4
 8009096:	4630      	mov	r0, r6
 8009098:	f000 fad0 	bl	800963c <__swsetup_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	d09d      	beq.n	8008fdc <_vfiprintf_r+0x2c>
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	b01d      	add	sp, #116	; 0x74
 80090a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090aa:	46a8      	mov	r8, r5
 80090ac:	e7a2      	b.n	8008ff4 <_vfiprintf_r+0x44>
 80090ae:	4a44      	ldr	r2, [pc, #272]	; (80091c0 <_vfiprintf_r+0x210>)
 80090b0:	1a80      	subs	r0, r0, r2
 80090b2:	fa0b f000 	lsl.w	r0, fp, r0
 80090b6:	4318      	orrs	r0, r3
 80090b8:	9004      	str	r0, [sp, #16]
 80090ba:	4645      	mov	r5, r8
 80090bc:	e7be      	b.n	800903c <_vfiprintf_r+0x8c>
 80090be:	9a03      	ldr	r2, [sp, #12]
 80090c0:	1d11      	adds	r1, r2, #4
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	9103      	str	r1, [sp, #12]
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	db01      	blt.n	80090ce <_vfiprintf_r+0x11e>
 80090ca:	9207      	str	r2, [sp, #28]
 80090cc:	e004      	b.n	80090d8 <_vfiprintf_r+0x128>
 80090ce:	4252      	negs	r2, r2
 80090d0:	f043 0302 	orr.w	r3, r3, #2
 80090d4:	9207      	str	r2, [sp, #28]
 80090d6:	9304      	str	r3, [sp, #16]
 80090d8:	f898 3000 	ldrb.w	r3, [r8]
 80090dc:	2b2e      	cmp	r3, #46	; 0x2e
 80090de:	d10e      	bne.n	80090fe <_vfiprintf_r+0x14e>
 80090e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80090e4:	2b2a      	cmp	r3, #42	; 0x2a
 80090e6:	d138      	bne.n	800915a <_vfiprintf_r+0x1aa>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9203      	str	r2, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfb8      	it	lt
 80090f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090f8:	f108 0802 	add.w	r8, r8, #2
 80090fc:	9305      	str	r3, [sp, #20]
 80090fe:	4d33      	ldr	r5, [pc, #204]	; (80091cc <_vfiprintf_r+0x21c>)
 8009100:	f898 1000 	ldrb.w	r1, [r8]
 8009104:	2203      	movs	r2, #3
 8009106:	4628      	mov	r0, r5
 8009108:	f7f7 f86a 	bl	80001e0 <memchr>
 800910c:	b140      	cbz	r0, 8009120 <_vfiprintf_r+0x170>
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	1b40      	subs	r0, r0, r5
 8009112:	fa03 f000 	lsl.w	r0, r3, r0
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	4303      	orrs	r3, r0
 800911a:	f108 0801 	add.w	r8, r8, #1
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	f898 1000 	ldrb.w	r1, [r8]
 8009124:	482a      	ldr	r0, [pc, #168]	; (80091d0 <_vfiprintf_r+0x220>)
 8009126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800912a:	2206      	movs	r2, #6
 800912c:	f108 0701 	add.w	r7, r8, #1
 8009130:	f7f7 f856 	bl	80001e0 <memchr>
 8009134:	2800      	cmp	r0, #0
 8009136:	d037      	beq.n	80091a8 <_vfiprintf_r+0x1f8>
 8009138:	4b26      	ldr	r3, [pc, #152]	; (80091d4 <_vfiprintf_r+0x224>)
 800913a:	bb1b      	cbnz	r3, 8009184 <_vfiprintf_r+0x1d4>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	3307      	adds	r3, #7
 8009140:	f023 0307 	bic.w	r3, r3, #7
 8009144:	3308      	adds	r3, #8
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	444b      	add	r3, r9
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	e750      	b.n	8008ff2 <_vfiprintf_r+0x42>
 8009150:	fb05 3202 	mla	r2, r5, r2, r3
 8009154:	2001      	movs	r0, #1
 8009156:	4688      	mov	r8, r1
 8009158:	e78a      	b.n	8009070 <_vfiprintf_r+0xc0>
 800915a:	2300      	movs	r3, #0
 800915c:	f108 0801 	add.w	r8, r8, #1
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	4619      	mov	r1, r3
 8009164:	250a      	movs	r5, #10
 8009166:	4640      	mov	r0, r8
 8009168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916c:	3a30      	subs	r2, #48	; 0x30
 800916e:	2a09      	cmp	r2, #9
 8009170:	d903      	bls.n	800917a <_vfiprintf_r+0x1ca>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0c3      	beq.n	80090fe <_vfiprintf_r+0x14e>
 8009176:	9105      	str	r1, [sp, #20]
 8009178:	e7c1      	b.n	80090fe <_vfiprintf_r+0x14e>
 800917a:	fb05 2101 	mla	r1, r5, r1, r2
 800917e:	2301      	movs	r3, #1
 8009180:	4680      	mov	r8, r0
 8009182:	e7f0      	b.n	8009166 <_vfiprintf_r+0x1b6>
 8009184:	ab03      	add	r3, sp, #12
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	4622      	mov	r2, r4
 800918a:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <_vfiprintf_r+0x228>)
 800918c:	a904      	add	r1, sp, #16
 800918e:	4630      	mov	r0, r6
 8009190:	f3af 8000 	nop.w
 8009194:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009198:	4681      	mov	r9, r0
 800919a:	d1d5      	bne.n	8009148 <_vfiprintf_r+0x198>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	065b      	lsls	r3, r3, #25
 80091a0:	f53f af7e 	bmi.w	80090a0 <_vfiprintf_r+0xf0>
 80091a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a6:	e77d      	b.n	80090a4 <_vfiprintf_r+0xf4>
 80091a8:	ab03      	add	r3, sp, #12
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	4622      	mov	r2, r4
 80091ae:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <_vfiprintf_r+0x228>)
 80091b0:	a904      	add	r1, sp, #16
 80091b2:	4630      	mov	r0, r6
 80091b4:	f000 f888 	bl	80092c8 <_printf_i>
 80091b8:	e7ec      	b.n	8009194 <_vfiprintf_r+0x1e4>
 80091ba:	bf00      	nop
 80091bc:	08009aa0 	.word	0x08009aa0
 80091c0:	08009ae0 	.word	0x08009ae0
 80091c4:	08009ac0 	.word	0x08009ac0
 80091c8:	08009a80 	.word	0x08009a80
 80091cc:	08009ae6 	.word	0x08009ae6
 80091d0:	08009aea 	.word	0x08009aea
 80091d4:	00000000 	.word	0x00000000
 80091d8:	08008f8b 	.word	0x08008f8b

080091dc <_printf_common>:
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	4691      	mov	r9, r2
 80091e2:	461f      	mov	r7, r3
 80091e4:	688a      	ldr	r2, [r1, #8]
 80091e6:	690b      	ldr	r3, [r1, #16]
 80091e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	bfb8      	it	lt
 80091f0:	4613      	movlt	r3, r2
 80091f2:	f8c9 3000 	str.w	r3, [r9]
 80091f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091fa:	4606      	mov	r6, r0
 80091fc:	460c      	mov	r4, r1
 80091fe:	b112      	cbz	r2, 8009206 <_printf_common+0x2a>
 8009200:	3301      	adds	r3, #1
 8009202:	f8c9 3000 	str.w	r3, [r9]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	0699      	lsls	r1, r3, #26
 800920a:	bf42      	ittt	mi
 800920c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009210:	3302      	addmi	r3, #2
 8009212:	f8c9 3000 	strmi.w	r3, [r9]
 8009216:	6825      	ldr	r5, [r4, #0]
 8009218:	f015 0506 	ands.w	r5, r5, #6
 800921c:	d107      	bne.n	800922e <_printf_common+0x52>
 800921e:	f104 0a19 	add.w	sl, r4, #25
 8009222:	68e3      	ldr	r3, [r4, #12]
 8009224:	f8d9 2000 	ldr.w	r2, [r9]
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	42ab      	cmp	r3, r5
 800922c:	dc28      	bgt.n	8009280 <_printf_common+0xa4>
 800922e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	3300      	adds	r3, #0
 8009236:	bf18      	it	ne
 8009238:	2301      	movne	r3, #1
 800923a:	0692      	lsls	r2, r2, #26
 800923c:	d42d      	bmi.n	800929a <_printf_common+0xbe>
 800923e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009242:	4639      	mov	r1, r7
 8009244:	4630      	mov	r0, r6
 8009246:	47c0      	blx	r8
 8009248:	3001      	adds	r0, #1
 800924a:	d020      	beq.n	800928e <_printf_common+0xb2>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	68e5      	ldr	r5, [r4, #12]
 8009250:	f8d9 2000 	ldr.w	r2, [r9]
 8009254:	f003 0306 	and.w	r3, r3, #6
 8009258:	2b04      	cmp	r3, #4
 800925a:	bf08      	it	eq
 800925c:	1aad      	subeq	r5, r5, r2
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	6922      	ldr	r2, [r4, #16]
 8009262:	bf0c      	ite	eq
 8009264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009268:	2500      	movne	r5, #0
 800926a:	4293      	cmp	r3, r2
 800926c:	bfc4      	itt	gt
 800926e:	1a9b      	subgt	r3, r3, r2
 8009270:	18ed      	addgt	r5, r5, r3
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	341a      	adds	r4, #26
 8009278:	454d      	cmp	r5, r9
 800927a:	d11a      	bne.n	80092b2 <_printf_common+0xd6>
 800927c:	2000      	movs	r0, #0
 800927e:	e008      	b.n	8009292 <_printf_common+0xb6>
 8009280:	2301      	movs	r3, #1
 8009282:	4652      	mov	r2, sl
 8009284:	4639      	mov	r1, r7
 8009286:	4630      	mov	r0, r6
 8009288:	47c0      	blx	r8
 800928a:	3001      	adds	r0, #1
 800928c:	d103      	bne.n	8009296 <_printf_common+0xba>
 800928e:	f04f 30ff 	mov.w	r0, #4294967295
 8009292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009296:	3501      	adds	r5, #1
 8009298:	e7c3      	b.n	8009222 <_printf_common+0x46>
 800929a:	18e1      	adds	r1, r4, r3
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	2030      	movs	r0, #48	; 0x30
 80092a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092a4:	4422      	add	r2, r4
 80092a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092ae:	3302      	adds	r3, #2
 80092b0:	e7c5      	b.n	800923e <_printf_common+0x62>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4622      	mov	r2, r4
 80092b6:	4639      	mov	r1, r7
 80092b8:	4630      	mov	r0, r6
 80092ba:	47c0      	blx	r8
 80092bc:	3001      	adds	r0, #1
 80092be:	d0e6      	beq.n	800928e <_printf_common+0xb2>
 80092c0:	f109 0901 	add.w	r9, r9, #1
 80092c4:	e7d8      	b.n	8009278 <_printf_common+0x9c>
	...

080092c8 <_printf_i>:
 80092c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80092d0:	460c      	mov	r4, r1
 80092d2:	7e09      	ldrb	r1, [r1, #24]
 80092d4:	b085      	sub	sp, #20
 80092d6:	296e      	cmp	r1, #110	; 0x6e
 80092d8:	4617      	mov	r7, r2
 80092da:	4606      	mov	r6, r0
 80092dc:	4698      	mov	r8, r3
 80092de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092e0:	f000 80b3 	beq.w	800944a <_printf_i+0x182>
 80092e4:	d822      	bhi.n	800932c <_printf_i+0x64>
 80092e6:	2963      	cmp	r1, #99	; 0x63
 80092e8:	d036      	beq.n	8009358 <_printf_i+0x90>
 80092ea:	d80a      	bhi.n	8009302 <_printf_i+0x3a>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	f000 80b9 	beq.w	8009464 <_printf_i+0x19c>
 80092f2:	2958      	cmp	r1, #88	; 0x58
 80092f4:	f000 8083 	beq.w	80093fe <_printf_i+0x136>
 80092f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009300:	e032      	b.n	8009368 <_printf_i+0xa0>
 8009302:	2964      	cmp	r1, #100	; 0x64
 8009304:	d001      	beq.n	800930a <_printf_i+0x42>
 8009306:	2969      	cmp	r1, #105	; 0x69
 8009308:	d1f6      	bne.n	80092f8 <_printf_i+0x30>
 800930a:	6820      	ldr	r0, [r4, #0]
 800930c:	6813      	ldr	r3, [r2, #0]
 800930e:	0605      	lsls	r5, r0, #24
 8009310:	f103 0104 	add.w	r1, r3, #4
 8009314:	d52a      	bpl.n	800936c <_printf_i+0xa4>
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6011      	str	r1, [r2, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	da03      	bge.n	8009326 <_printf_i+0x5e>
 800931e:	222d      	movs	r2, #45	; 0x2d
 8009320:	425b      	negs	r3, r3
 8009322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009326:	486f      	ldr	r0, [pc, #444]	; (80094e4 <_printf_i+0x21c>)
 8009328:	220a      	movs	r2, #10
 800932a:	e039      	b.n	80093a0 <_printf_i+0xd8>
 800932c:	2973      	cmp	r1, #115	; 0x73
 800932e:	f000 809d 	beq.w	800946c <_printf_i+0x1a4>
 8009332:	d808      	bhi.n	8009346 <_printf_i+0x7e>
 8009334:	296f      	cmp	r1, #111	; 0x6f
 8009336:	d020      	beq.n	800937a <_printf_i+0xb2>
 8009338:	2970      	cmp	r1, #112	; 0x70
 800933a:	d1dd      	bne.n	80092f8 <_printf_i+0x30>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	f043 0320 	orr.w	r3, r3, #32
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	e003      	b.n	800934e <_printf_i+0x86>
 8009346:	2975      	cmp	r1, #117	; 0x75
 8009348:	d017      	beq.n	800937a <_printf_i+0xb2>
 800934a:	2978      	cmp	r1, #120	; 0x78
 800934c:	d1d4      	bne.n	80092f8 <_printf_i+0x30>
 800934e:	2378      	movs	r3, #120	; 0x78
 8009350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009354:	4864      	ldr	r0, [pc, #400]	; (80094e8 <_printf_i+0x220>)
 8009356:	e055      	b.n	8009404 <_printf_i+0x13c>
 8009358:	6813      	ldr	r3, [r2, #0]
 800935a:	1d19      	adds	r1, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6011      	str	r1, [r2, #0]
 8009360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009368:	2301      	movs	r3, #1
 800936a:	e08c      	b.n	8009486 <_printf_i+0x1be>
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6011      	str	r1, [r2, #0]
 8009370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009374:	bf18      	it	ne
 8009376:	b21b      	sxthne	r3, r3
 8009378:	e7cf      	b.n	800931a <_printf_i+0x52>
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	6825      	ldr	r5, [r4, #0]
 800937e:	1d18      	adds	r0, r3, #4
 8009380:	6010      	str	r0, [r2, #0]
 8009382:	0628      	lsls	r0, r5, #24
 8009384:	d501      	bpl.n	800938a <_printf_i+0xc2>
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	e002      	b.n	8009390 <_printf_i+0xc8>
 800938a:	0668      	lsls	r0, r5, #25
 800938c:	d5fb      	bpl.n	8009386 <_printf_i+0xbe>
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	4854      	ldr	r0, [pc, #336]	; (80094e4 <_printf_i+0x21c>)
 8009392:	296f      	cmp	r1, #111	; 0x6f
 8009394:	bf14      	ite	ne
 8009396:	220a      	movne	r2, #10
 8009398:	2208      	moveq	r2, #8
 800939a:	2100      	movs	r1, #0
 800939c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093a0:	6865      	ldr	r5, [r4, #4]
 80093a2:	60a5      	str	r5, [r4, #8]
 80093a4:	2d00      	cmp	r5, #0
 80093a6:	f2c0 8095 	blt.w	80094d4 <_printf_i+0x20c>
 80093aa:	6821      	ldr	r1, [r4, #0]
 80093ac:	f021 0104 	bic.w	r1, r1, #4
 80093b0:	6021      	str	r1, [r4, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d13d      	bne.n	8009432 <_printf_i+0x16a>
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	f040 808e 	bne.w	80094d8 <_printf_i+0x210>
 80093bc:	4665      	mov	r5, ip
 80093be:	2a08      	cmp	r2, #8
 80093c0:	d10b      	bne.n	80093da <_printf_i+0x112>
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	07db      	lsls	r3, r3, #31
 80093c6:	d508      	bpl.n	80093da <_printf_i+0x112>
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	bfde      	ittt	le
 80093d0:	2330      	movle	r3, #48	; 0x30
 80093d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093da:	ebac 0305 	sub.w	r3, ip, r5
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	f8cd 8000 	str.w	r8, [sp]
 80093e4:	463b      	mov	r3, r7
 80093e6:	aa03      	add	r2, sp, #12
 80093e8:	4621      	mov	r1, r4
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7ff fef6 	bl	80091dc <_printf_common>
 80093f0:	3001      	adds	r0, #1
 80093f2:	d14d      	bne.n	8009490 <_printf_i+0x1c8>
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	b005      	add	sp, #20
 80093fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fe:	4839      	ldr	r0, [pc, #228]	; (80094e4 <_printf_i+0x21c>)
 8009400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009404:	6813      	ldr	r3, [r2, #0]
 8009406:	6821      	ldr	r1, [r4, #0]
 8009408:	1d1d      	adds	r5, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6015      	str	r5, [r2, #0]
 800940e:	060a      	lsls	r2, r1, #24
 8009410:	d50b      	bpl.n	800942a <_printf_i+0x162>
 8009412:	07ca      	lsls	r2, r1, #31
 8009414:	bf44      	itt	mi
 8009416:	f041 0120 	orrmi.w	r1, r1, #32
 800941a:	6021      	strmi	r1, [r4, #0]
 800941c:	b91b      	cbnz	r3, 8009426 <_printf_i+0x15e>
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	f022 0220 	bic.w	r2, r2, #32
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	2210      	movs	r2, #16
 8009428:	e7b7      	b.n	800939a <_printf_i+0xd2>
 800942a:	064d      	lsls	r5, r1, #25
 800942c:	bf48      	it	mi
 800942e:	b29b      	uxthmi	r3, r3
 8009430:	e7ef      	b.n	8009412 <_printf_i+0x14a>
 8009432:	4665      	mov	r5, ip
 8009434:	fbb3 f1f2 	udiv	r1, r3, r2
 8009438:	fb02 3311 	mls	r3, r2, r1, r3
 800943c:	5cc3      	ldrb	r3, [r0, r3]
 800943e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009442:	460b      	mov	r3, r1
 8009444:	2900      	cmp	r1, #0
 8009446:	d1f5      	bne.n	8009434 <_printf_i+0x16c>
 8009448:	e7b9      	b.n	80093be <_printf_i+0xf6>
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	6961      	ldr	r1, [r4, #20]
 8009450:	1d18      	adds	r0, r3, #4
 8009452:	6010      	str	r0, [r2, #0]
 8009454:	0628      	lsls	r0, r5, #24
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	d501      	bpl.n	800945e <_printf_i+0x196>
 800945a:	6019      	str	r1, [r3, #0]
 800945c:	e002      	b.n	8009464 <_printf_i+0x19c>
 800945e:	066a      	lsls	r2, r5, #25
 8009460:	d5fb      	bpl.n	800945a <_printf_i+0x192>
 8009462:	8019      	strh	r1, [r3, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	4665      	mov	r5, ip
 800946a:	e7b9      	b.n	80093e0 <_printf_i+0x118>
 800946c:	6813      	ldr	r3, [r2, #0]
 800946e:	1d19      	adds	r1, r3, #4
 8009470:	6011      	str	r1, [r2, #0]
 8009472:	681d      	ldr	r5, [r3, #0]
 8009474:	6862      	ldr	r2, [r4, #4]
 8009476:	2100      	movs	r1, #0
 8009478:	4628      	mov	r0, r5
 800947a:	f7f6 feb1 	bl	80001e0 <memchr>
 800947e:	b108      	cbz	r0, 8009484 <_printf_i+0x1bc>
 8009480:	1b40      	subs	r0, r0, r5
 8009482:	6060      	str	r0, [r4, #4]
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	2300      	movs	r3, #0
 800948a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948e:	e7a7      	b.n	80093e0 <_printf_i+0x118>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	462a      	mov	r2, r5
 8009494:	4639      	mov	r1, r7
 8009496:	4630      	mov	r0, r6
 8009498:	47c0      	blx	r8
 800949a:	3001      	adds	r0, #1
 800949c:	d0aa      	beq.n	80093f4 <_printf_i+0x12c>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	079b      	lsls	r3, r3, #30
 80094a2:	d413      	bmi.n	80094cc <_printf_i+0x204>
 80094a4:	68e0      	ldr	r0, [r4, #12]
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	4298      	cmp	r0, r3
 80094aa:	bfb8      	it	lt
 80094ac:	4618      	movlt	r0, r3
 80094ae:	e7a3      	b.n	80093f8 <_printf_i+0x130>
 80094b0:	2301      	movs	r3, #1
 80094b2:	464a      	mov	r2, r9
 80094b4:	4639      	mov	r1, r7
 80094b6:	4630      	mov	r0, r6
 80094b8:	47c0      	blx	r8
 80094ba:	3001      	adds	r0, #1
 80094bc:	d09a      	beq.n	80093f4 <_printf_i+0x12c>
 80094be:	3501      	adds	r5, #1
 80094c0:	68e3      	ldr	r3, [r4, #12]
 80094c2:	9a03      	ldr	r2, [sp, #12]
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	42ab      	cmp	r3, r5
 80094c8:	dcf2      	bgt.n	80094b0 <_printf_i+0x1e8>
 80094ca:	e7eb      	b.n	80094a4 <_printf_i+0x1dc>
 80094cc:	2500      	movs	r5, #0
 80094ce:	f104 0919 	add.w	r9, r4, #25
 80094d2:	e7f5      	b.n	80094c0 <_printf_i+0x1f8>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1ac      	bne.n	8009432 <_printf_i+0x16a>
 80094d8:	7803      	ldrb	r3, [r0, #0]
 80094da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094e2:	e76c      	b.n	80093be <_printf_i+0xf6>
 80094e4:	08009af1 	.word	0x08009af1
 80094e8:	08009b02 	.word	0x08009b02

080094ec <__sread>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	460c      	mov	r4, r1
 80094f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f4:	f000 fa46 	bl	8009984 <_read_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	bfab      	itete	ge
 80094fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009500:	181b      	addge	r3, r3, r0
 8009502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009506:	bfac      	ite	ge
 8009508:	6563      	strge	r3, [r4, #84]	; 0x54
 800950a:	81a3      	strhlt	r3, [r4, #12]
 800950c:	bd10      	pop	{r4, pc}

0800950e <__swrite>:
 800950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	461f      	mov	r7, r3
 8009514:	898b      	ldrh	r3, [r1, #12]
 8009516:	05db      	lsls	r3, r3, #23
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	4616      	mov	r6, r2
 800951e:	d505      	bpl.n	800952c <__swrite+0x1e>
 8009520:	2302      	movs	r3, #2
 8009522:	2200      	movs	r2, #0
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	f000 f9b6 	bl	8009898 <_lseek_r>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	4628      	mov	r0, r5
 800953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	f000 b869 	b.w	8009618 <_write_r>

08009546 <__sseek>:
 8009546:	b510      	push	{r4, lr}
 8009548:	460c      	mov	r4, r1
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f000 f9a3 	bl	8009898 <_lseek_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	bf15      	itete	ne
 8009558:	6560      	strne	r0, [r4, #84]	; 0x54
 800955a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800955e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strheq	r3, [r4, #12]
 8009564:	bf18      	it	ne
 8009566:	81a3      	strhne	r3, [r4, #12]
 8009568:	bd10      	pop	{r4, pc}

0800956a <__sclose>:
 800956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956e:	f000 b8d3 	b.w	8009718 <_close_r>
	...

08009574 <__swbuf_r>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	460e      	mov	r6, r1
 8009578:	4614      	mov	r4, r2
 800957a:	4605      	mov	r5, r0
 800957c:	b118      	cbz	r0, 8009586 <__swbuf_r+0x12>
 800957e:	6983      	ldr	r3, [r0, #24]
 8009580:	b90b      	cbnz	r3, 8009586 <__swbuf_r+0x12>
 8009582:	f7ff fc5f 	bl	8008e44 <__sinit>
 8009586:	4b21      	ldr	r3, [pc, #132]	; (800960c <__swbuf_r+0x98>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d12a      	bne.n	80095e2 <__swbuf_r+0x6e>
 800958c:	686c      	ldr	r4, [r5, #4]
 800958e:	69a3      	ldr	r3, [r4, #24]
 8009590:	60a3      	str	r3, [r4, #8]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	071a      	lsls	r2, r3, #28
 8009596:	d52e      	bpl.n	80095f6 <__swbuf_r+0x82>
 8009598:	6923      	ldr	r3, [r4, #16]
 800959a:	b363      	cbz	r3, 80095f6 <__swbuf_r+0x82>
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	1ac0      	subs	r0, r0, r3
 80095a2:	6963      	ldr	r3, [r4, #20]
 80095a4:	b2f6      	uxtb	r6, r6
 80095a6:	4283      	cmp	r3, r0
 80095a8:	4637      	mov	r7, r6
 80095aa:	dc04      	bgt.n	80095b6 <__swbuf_r+0x42>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f948 	bl	8009844 <_fflush_r>
 80095b4:	bb28      	cbnz	r0, 8009602 <__swbuf_r+0x8e>
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	60a3      	str	r3, [r4, #8]
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	6022      	str	r2, [r4, #0]
 80095c2:	701e      	strb	r6, [r3, #0]
 80095c4:	6963      	ldr	r3, [r4, #20]
 80095c6:	3001      	adds	r0, #1
 80095c8:	4283      	cmp	r3, r0
 80095ca:	d004      	beq.n	80095d6 <__swbuf_r+0x62>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	07db      	lsls	r3, r3, #31
 80095d0:	d519      	bpl.n	8009606 <__swbuf_r+0x92>
 80095d2:	2e0a      	cmp	r6, #10
 80095d4:	d117      	bne.n	8009606 <__swbuf_r+0x92>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f933 	bl	8009844 <_fflush_r>
 80095de:	b190      	cbz	r0, 8009606 <__swbuf_r+0x92>
 80095e0:	e00f      	b.n	8009602 <__swbuf_r+0x8e>
 80095e2:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <__swbuf_r+0x9c>)
 80095e4:	429c      	cmp	r4, r3
 80095e6:	d101      	bne.n	80095ec <__swbuf_r+0x78>
 80095e8:	68ac      	ldr	r4, [r5, #8]
 80095ea:	e7d0      	b.n	800958e <__swbuf_r+0x1a>
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <__swbuf_r+0xa0>)
 80095ee:	429c      	cmp	r4, r3
 80095f0:	bf08      	it	eq
 80095f2:	68ec      	ldreq	r4, [r5, #12]
 80095f4:	e7cb      	b.n	800958e <__swbuf_r+0x1a>
 80095f6:	4621      	mov	r1, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	f000 f81f 	bl	800963c <__swsetup_r>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d0cc      	beq.n	800959c <__swbuf_r+0x28>
 8009602:	f04f 37ff 	mov.w	r7, #4294967295
 8009606:	4638      	mov	r0, r7
 8009608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960a:	bf00      	nop
 800960c:	08009aa0 	.word	0x08009aa0
 8009610:	08009ac0 	.word	0x08009ac0
 8009614:	08009a80 	.word	0x08009a80

08009618 <_write_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4c07      	ldr	r4, [pc, #28]	; (8009638 <_write_r+0x20>)
 800961c:	4605      	mov	r5, r0
 800961e:	4608      	mov	r0, r1
 8009620:	4611      	mov	r1, r2
 8009622:	2200      	movs	r2, #0
 8009624:	6022      	str	r2, [r4, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f7f7 fb8f 	bl	8000d4a <_write>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_write_r+0x1e>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	b103      	cbz	r3, 8009636 <_write_r+0x1e>
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	20001ce0 	.word	0x20001ce0

0800963c <__swsetup_r>:
 800963c:	4b32      	ldr	r3, [pc, #200]	; (8009708 <__swsetup_r+0xcc>)
 800963e:	b570      	push	{r4, r5, r6, lr}
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	4606      	mov	r6, r0
 8009644:	460c      	mov	r4, r1
 8009646:	b125      	cbz	r5, 8009652 <__swsetup_r+0x16>
 8009648:	69ab      	ldr	r3, [r5, #24]
 800964a:	b913      	cbnz	r3, 8009652 <__swsetup_r+0x16>
 800964c:	4628      	mov	r0, r5
 800964e:	f7ff fbf9 	bl	8008e44 <__sinit>
 8009652:	4b2e      	ldr	r3, [pc, #184]	; (800970c <__swsetup_r+0xd0>)
 8009654:	429c      	cmp	r4, r3
 8009656:	d10f      	bne.n	8009678 <__swsetup_r+0x3c>
 8009658:	686c      	ldr	r4, [r5, #4]
 800965a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965e:	b29a      	uxth	r2, r3
 8009660:	0715      	lsls	r5, r2, #28
 8009662:	d42c      	bmi.n	80096be <__swsetup_r+0x82>
 8009664:	06d0      	lsls	r0, r2, #27
 8009666:	d411      	bmi.n	800968c <__swsetup_r+0x50>
 8009668:	2209      	movs	r2, #9
 800966a:	6032      	str	r2, [r6, #0]
 800966c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	f04f 30ff 	mov.w	r0, #4294967295
 8009676:	e03e      	b.n	80096f6 <__swsetup_r+0xba>
 8009678:	4b25      	ldr	r3, [pc, #148]	; (8009710 <__swsetup_r+0xd4>)
 800967a:	429c      	cmp	r4, r3
 800967c:	d101      	bne.n	8009682 <__swsetup_r+0x46>
 800967e:	68ac      	ldr	r4, [r5, #8]
 8009680:	e7eb      	b.n	800965a <__swsetup_r+0x1e>
 8009682:	4b24      	ldr	r3, [pc, #144]	; (8009714 <__swsetup_r+0xd8>)
 8009684:	429c      	cmp	r4, r3
 8009686:	bf08      	it	eq
 8009688:	68ec      	ldreq	r4, [r5, #12]
 800968a:	e7e6      	b.n	800965a <__swsetup_r+0x1e>
 800968c:	0751      	lsls	r1, r2, #29
 800968e:	d512      	bpl.n	80096b6 <__swsetup_r+0x7a>
 8009690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009692:	b141      	cbz	r1, 80096a6 <__swsetup_r+0x6a>
 8009694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009698:	4299      	cmp	r1, r3
 800969a:	d002      	beq.n	80096a2 <__swsetup_r+0x66>
 800969c:	4630      	mov	r0, r6
 800969e:	f7ff fac1 	bl	8008c24 <_free_r>
 80096a2:	2300      	movs	r3, #0
 80096a4:	6363      	str	r3, [r4, #52]	; 0x34
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	2300      	movs	r3, #0
 80096b0:	6063      	str	r3, [r4, #4]
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f043 0308 	orr.w	r3, r3, #8
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	b94b      	cbnz	r3, 80096d6 <__swsetup_r+0x9a>
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096cc:	d003      	beq.n	80096d6 <__swsetup_r+0x9a>
 80096ce:	4621      	mov	r1, r4
 80096d0:	4630      	mov	r0, r6
 80096d2:	f000 f917 	bl	8009904 <__smakebuf_r>
 80096d6:	89a2      	ldrh	r2, [r4, #12]
 80096d8:	f012 0301 	ands.w	r3, r2, #1
 80096dc:	d00c      	beq.n	80096f8 <__swsetup_r+0xbc>
 80096de:	2300      	movs	r3, #0
 80096e0:	60a3      	str	r3, [r4, #8]
 80096e2:	6963      	ldr	r3, [r4, #20]
 80096e4:	425b      	negs	r3, r3
 80096e6:	61a3      	str	r3, [r4, #24]
 80096e8:	6923      	ldr	r3, [r4, #16]
 80096ea:	b953      	cbnz	r3, 8009702 <__swsetup_r+0xc6>
 80096ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80096f4:	d1ba      	bne.n	800966c <__swsetup_r+0x30>
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	0792      	lsls	r2, r2, #30
 80096fa:	bf58      	it	pl
 80096fc:	6963      	ldrpl	r3, [r4, #20]
 80096fe:	60a3      	str	r3, [r4, #8]
 8009700:	e7f2      	b.n	80096e8 <__swsetup_r+0xac>
 8009702:	2000      	movs	r0, #0
 8009704:	e7f7      	b.n	80096f6 <__swsetup_r+0xba>
 8009706:	bf00      	nop
 8009708:	20000180 	.word	0x20000180
 800970c:	08009aa0 	.word	0x08009aa0
 8009710:	08009ac0 	.word	0x08009ac0
 8009714:	08009a80 	.word	0x08009a80

08009718 <_close_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4c06      	ldr	r4, [pc, #24]	; (8009734 <_close_r+0x1c>)
 800971c:	2300      	movs	r3, #0
 800971e:	4605      	mov	r5, r0
 8009720:	4608      	mov	r0, r1
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	f7f7 fb2d 	bl	8000d82 <_close>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_close_r+0x1a>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	b103      	cbz	r3, 8009732 <_close_r+0x1a>
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20001ce0 	.word	0x20001ce0

08009738 <__sflush_r>:
 8009738:	898a      	ldrh	r2, [r1, #12]
 800973a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973e:	4605      	mov	r5, r0
 8009740:	0710      	lsls	r0, r2, #28
 8009742:	460c      	mov	r4, r1
 8009744:	d458      	bmi.n	80097f8 <__sflush_r+0xc0>
 8009746:	684b      	ldr	r3, [r1, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dc05      	bgt.n	8009758 <__sflush_r+0x20>
 800974c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	dc02      	bgt.n	8009758 <__sflush_r+0x20>
 8009752:	2000      	movs	r0, #0
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800975a:	2e00      	cmp	r6, #0
 800975c:	d0f9      	beq.n	8009752 <__sflush_r+0x1a>
 800975e:	2300      	movs	r3, #0
 8009760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009764:	682f      	ldr	r7, [r5, #0]
 8009766:	6a21      	ldr	r1, [r4, #32]
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	d032      	beq.n	80097d2 <__sflush_r+0x9a>
 800976c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	075a      	lsls	r2, r3, #29
 8009772:	d505      	bpl.n	8009780 <__sflush_r+0x48>
 8009774:	6863      	ldr	r3, [r4, #4]
 8009776:	1ac0      	subs	r0, r0, r3
 8009778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800977a:	b10b      	cbz	r3, 8009780 <__sflush_r+0x48>
 800977c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800977e:	1ac0      	subs	r0, r0, r3
 8009780:	2300      	movs	r3, #0
 8009782:	4602      	mov	r2, r0
 8009784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009786:	6a21      	ldr	r1, [r4, #32]
 8009788:	4628      	mov	r0, r5
 800978a:	47b0      	blx	r6
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	d106      	bne.n	80097a0 <__sflush_r+0x68>
 8009792:	6829      	ldr	r1, [r5, #0]
 8009794:	291d      	cmp	r1, #29
 8009796:	d848      	bhi.n	800982a <__sflush_r+0xf2>
 8009798:	4a29      	ldr	r2, [pc, #164]	; (8009840 <__sflush_r+0x108>)
 800979a:	40ca      	lsrs	r2, r1
 800979c:	07d6      	lsls	r6, r2, #31
 800979e:	d544      	bpl.n	800982a <__sflush_r+0xf2>
 80097a0:	2200      	movs	r2, #0
 80097a2:	6062      	str	r2, [r4, #4]
 80097a4:	04d9      	lsls	r1, r3, #19
 80097a6:	6922      	ldr	r2, [r4, #16]
 80097a8:	6022      	str	r2, [r4, #0]
 80097aa:	d504      	bpl.n	80097b6 <__sflush_r+0x7e>
 80097ac:	1c42      	adds	r2, r0, #1
 80097ae:	d101      	bne.n	80097b4 <__sflush_r+0x7c>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b903      	cbnz	r3, 80097b6 <__sflush_r+0x7e>
 80097b4:	6560      	str	r0, [r4, #84]	; 0x54
 80097b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097b8:	602f      	str	r7, [r5, #0]
 80097ba:	2900      	cmp	r1, #0
 80097bc:	d0c9      	beq.n	8009752 <__sflush_r+0x1a>
 80097be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097c2:	4299      	cmp	r1, r3
 80097c4:	d002      	beq.n	80097cc <__sflush_r+0x94>
 80097c6:	4628      	mov	r0, r5
 80097c8:	f7ff fa2c 	bl	8008c24 <_free_r>
 80097cc:	2000      	movs	r0, #0
 80097ce:	6360      	str	r0, [r4, #52]	; 0x34
 80097d0:	e7c0      	b.n	8009754 <__sflush_r+0x1c>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4628      	mov	r0, r5
 80097d6:	47b0      	blx	r6
 80097d8:	1c41      	adds	r1, r0, #1
 80097da:	d1c8      	bne.n	800976e <__sflush_r+0x36>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0c5      	beq.n	800976e <__sflush_r+0x36>
 80097e2:	2b1d      	cmp	r3, #29
 80097e4:	d001      	beq.n	80097ea <__sflush_r+0xb2>
 80097e6:	2b16      	cmp	r3, #22
 80097e8:	d101      	bne.n	80097ee <__sflush_r+0xb6>
 80097ea:	602f      	str	r7, [r5, #0]
 80097ec:	e7b1      	b.n	8009752 <__sflush_r+0x1a>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	e7ad      	b.n	8009754 <__sflush_r+0x1c>
 80097f8:	690f      	ldr	r7, [r1, #16]
 80097fa:	2f00      	cmp	r7, #0
 80097fc:	d0a9      	beq.n	8009752 <__sflush_r+0x1a>
 80097fe:	0793      	lsls	r3, r2, #30
 8009800:	680e      	ldr	r6, [r1, #0]
 8009802:	bf08      	it	eq
 8009804:	694b      	ldreq	r3, [r1, #20]
 8009806:	600f      	str	r7, [r1, #0]
 8009808:	bf18      	it	ne
 800980a:	2300      	movne	r3, #0
 800980c:	eba6 0807 	sub.w	r8, r6, r7
 8009810:	608b      	str	r3, [r1, #8]
 8009812:	f1b8 0f00 	cmp.w	r8, #0
 8009816:	dd9c      	ble.n	8009752 <__sflush_r+0x1a>
 8009818:	4643      	mov	r3, r8
 800981a:	463a      	mov	r2, r7
 800981c:	6a21      	ldr	r1, [r4, #32]
 800981e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009820:	4628      	mov	r0, r5
 8009822:	47b0      	blx	r6
 8009824:	2800      	cmp	r0, #0
 8009826:	dc06      	bgt.n	8009836 <__sflush_r+0xfe>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e78e      	b.n	8009754 <__sflush_r+0x1c>
 8009836:	4407      	add	r7, r0
 8009838:	eba8 0800 	sub.w	r8, r8, r0
 800983c:	e7e9      	b.n	8009812 <__sflush_r+0xda>
 800983e:	bf00      	nop
 8009840:	20400001 	.word	0x20400001

08009844 <_fflush_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	690b      	ldr	r3, [r1, #16]
 8009848:	4605      	mov	r5, r0
 800984a:	460c      	mov	r4, r1
 800984c:	b1db      	cbz	r3, 8009886 <_fflush_r+0x42>
 800984e:	b118      	cbz	r0, 8009858 <_fflush_r+0x14>
 8009850:	6983      	ldr	r3, [r0, #24]
 8009852:	b90b      	cbnz	r3, 8009858 <_fflush_r+0x14>
 8009854:	f7ff faf6 	bl	8008e44 <__sinit>
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <_fflush_r+0x48>)
 800985a:	429c      	cmp	r4, r3
 800985c:	d109      	bne.n	8009872 <_fflush_r+0x2e>
 800985e:	686c      	ldr	r4, [r5, #4]
 8009860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009864:	b17b      	cbz	r3, 8009886 <_fflush_r+0x42>
 8009866:	4621      	mov	r1, r4
 8009868:	4628      	mov	r0, r5
 800986a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986e:	f7ff bf63 	b.w	8009738 <__sflush_r>
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <_fflush_r+0x4c>)
 8009874:	429c      	cmp	r4, r3
 8009876:	d101      	bne.n	800987c <_fflush_r+0x38>
 8009878:	68ac      	ldr	r4, [r5, #8]
 800987a:	e7f1      	b.n	8009860 <_fflush_r+0x1c>
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <_fflush_r+0x50>)
 800987e:	429c      	cmp	r4, r3
 8009880:	bf08      	it	eq
 8009882:	68ec      	ldreq	r4, [r5, #12]
 8009884:	e7ec      	b.n	8009860 <_fflush_r+0x1c>
 8009886:	2000      	movs	r0, #0
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	bf00      	nop
 800988c:	08009aa0 	.word	0x08009aa0
 8009890:	08009ac0 	.word	0x08009ac0
 8009894:	08009a80 	.word	0x08009a80

08009898 <_lseek_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4c07      	ldr	r4, [pc, #28]	; (80098b8 <_lseek_r+0x20>)
 800989c:	4605      	mov	r5, r0
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	2200      	movs	r2, #0
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	f7f7 fa92 	bl	8000dd0 <_lseek>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_lseek_r+0x1e>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_lseek_r+0x1e>
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	20001ce0 	.word	0x20001ce0

080098bc <__swhatbuf_r>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	460e      	mov	r6, r1
 80098c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c4:	2900      	cmp	r1, #0
 80098c6:	b096      	sub	sp, #88	; 0x58
 80098c8:	4614      	mov	r4, r2
 80098ca:	461d      	mov	r5, r3
 80098cc:	da07      	bge.n	80098de <__swhatbuf_r+0x22>
 80098ce:	2300      	movs	r3, #0
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	89b3      	ldrh	r3, [r6, #12]
 80098d4:	061a      	lsls	r2, r3, #24
 80098d6:	d410      	bmi.n	80098fa <__swhatbuf_r+0x3e>
 80098d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098dc:	e00e      	b.n	80098fc <__swhatbuf_r+0x40>
 80098de:	466a      	mov	r2, sp
 80098e0:	f000 f862 	bl	80099a8 <_fstat_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	dbf2      	blt.n	80098ce <__swhatbuf_r+0x12>
 80098e8:	9a01      	ldr	r2, [sp, #4]
 80098ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098f2:	425a      	negs	r2, r3
 80098f4:	415a      	adcs	r2, r3
 80098f6:	602a      	str	r2, [r5, #0]
 80098f8:	e7ee      	b.n	80098d8 <__swhatbuf_r+0x1c>
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	2000      	movs	r0, #0
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	b016      	add	sp, #88	; 0x58
 8009902:	bd70      	pop	{r4, r5, r6, pc}

08009904 <__smakebuf_r>:
 8009904:	898b      	ldrh	r3, [r1, #12]
 8009906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009908:	079d      	lsls	r5, r3, #30
 800990a:	4606      	mov	r6, r0
 800990c:	460c      	mov	r4, r1
 800990e:	d507      	bpl.n	8009920 <__smakebuf_r+0x1c>
 8009910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	2301      	movs	r3, #1
 800991a:	6163      	str	r3, [r4, #20]
 800991c:	b002      	add	sp, #8
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	ab01      	add	r3, sp, #4
 8009922:	466a      	mov	r2, sp
 8009924:	f7ff ffca 	bl	80098bc <__swhatbuf_r>
 8009928:	9900      	ldr	r1, [sp, #0]
 800992a:	4605      	mov	r5, r0
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff f9c7 	bl	8008cc0 <_malloc_r>
 8009932:	b948      	cbnz	r0, 8009948 <__smakebuf_r+0x44>
 8009934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009938:	059a      	lsls	r2, r3, #22
 800993a:	d4ef      	bmi.n	800991c <__smakebuf_r+0x18>
 800993c:	f023 0303 	bic.w	r3, r3, #3
 8009940:	f043 0302 	orr.w	r3, r3, #2
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e7e3      	b.n	8009910 <__smakebuf_r+0xc>
 8009948:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <__smakebuf_r+0x7c>)
 800994a:	62b3      	str	r3, [r6, #40]	; 0x28
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	6020      	str	r0, [r4, #0]
 8009950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	6163      	str	r3, [r4, #20]
 800995a:	9b01      	ldr	r3, [sp, #4]
 800995c:	6120      	str	r0, [r4, #16]
 800995e:	b15b      	cbz	r3, 8009978 <__smakebuf_r+0x74>
 8009960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009964:	4630      	mov	r0, r6
 8009966:	f000 f831 	bl	80099cc <_isatty_r>
 800996a:	b128      	cbz	r0, 8009978 <__smakebuf_r+0x74>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f023 0303 	bic.w	r3, r3, #3
 8009972:	f043 0301 	orr.w	r3, r3, #1
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	431d      	orrs	r5, r3
 800997c:	81a5      	strh	r5, [r4, #12]
 800997e:	e7cd      	b.n	800991c <__smakebuf_r+0x18>
 8009980:	08008e0d 	.word	0x08008e0d

08009984 <_read_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4c07      	ldr	r4, [pc, #28]	; (80099a4 <_read_r+0x20>)
 8009988:	4605      	mov	r5, r0
 800998a:	4608      	mov	r0, r1
 800998c:	4611      	mov	r1, r2
 800998e:	2200      	movs	r2, #0
 8009990:	6022      	str	r2, [r4, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	f7f7 f9bc 	bl	8000d10 <_read>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_read_r+0x1e>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_read_r+0x1e>
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	20001ce0 	.word	0x20001ce0

080099a8 <_fstat_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4c07      	ldr	r4, [pc, #28]	; (80099c8 <_fstat_r+0x20>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4605      	mov	r5, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	f7f7 f9f0 	bl	8000d9a <_fstat>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d102      	bne.n	80099c4 <_fstat_r+0x1c>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	b103      	cbz	r3, 80099c4 <_fstat_r+0x1c>
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20001ce0 	.word	0x20001ce0

080099cc <_isatty_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4c06      	ldr	r4, [pc, #24]	; (80099e8 <_isatty_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4605      	mov	r5, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	f7f7 f9ef 	bl	8000dba <_isatty>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_isatty_r+0x1a>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_isatty_r+0x1a>
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20001ce0 	.word	0x20001ce0

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
