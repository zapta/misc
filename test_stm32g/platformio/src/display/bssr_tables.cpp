// Auto generated lookup tables to drive the 16 bit parallel output
// to the TFT.

#include "bssr_tables.h"

namespace bssr_tables {

// Generated with the following Java program:

//public class BssrMasksGenerator64bits {
//
//    // Assuming two ports. Generating 64 BSSR bits, 32 for
//    // port B and 32 for port A.
//    enum Port {
//        A,
//        B
//    }
//
//    // A port pin identifier.
//    static class Pin {
//        final Port port;
//        final int pin_index;  // MSB=15, LSB=0;
//
//        public Pin(Port port, int pin_index) {
//            this.port = port;
//            this.pin_index = pin_index;
//        }
//
//        public String toString() {
//            return "P" + port.name() + pin_index;
//        }
//    }
//
//    // In addition to the 16 bit parallel data, we also
//    // want to reset the WR pin.
//    static final Pin WR_PIN = new Pin(Port.A, 0);
//
//    // Maps the 16 data bit index to pin.
//    static final Pin[] DATA_PINS = new Pin[]{
//            new Pin(Port.B, 12),  // D0
//            new Pin(Port.B, 13),  // D1
//            new Pin(Port.B, 14),  // D2
//            new Pin(Port.B, 15),  // D3
//
//            new Pin(Port.B, 10),  // D4
//            new Pin(Port.A, 9),   // D5
//            new Pin(Port.A, 10),  // D6
//            new Pin(Port.A, 7),   // D7
//
//            new Pin(Port.A, 6),   // D8
//            new Pin(Port.A, 5),   // D9
//            new Pin(Port.A, 15),  // D10
//            new Pin(Port.A, 4),   // D11
//
//            new Pin(Port.A, 3),   // D12
//            new Pin(Port.B, 4),   // D13
//            new Pin(Port.A, 2),   // D14
//            new Pin(Port.B, 5),   // D15
//    };
//
//    // Maps a color value from src_bits to dst_bits.
//    private static int resize_color_channel(int srv_val, int src_bits, int dst_bits) {
//        final double ratio = (double) srv_val / ((1 << src_bits) - 1);
//        final long result = Math.round(((1 << dst_bits) - 1) * ratio);
//        return (int) result;
//    }
//
//    // Map a 8 bit rgb332 color to 16 bit rgb565 color.
//    private static int color8_to_color16(int c8) {
//        final int r3 = (c8 >> 5) & 0x7;
//        final int g3 = (c8 >> 2) & 0x7;
//        final int b2 = c8 & 0x3;
//
//        final int r5 = resize_color_channel(r3, 3, 5);
//        final int g6 = resize_color_channel(g3, 3, 6);
//        final int b5 = resize_color_channel(b2, 2, 5);
//
//        final int rgb565 = r5 << 11 | g6 << 5 | b5;
//        return rgb565;
//    }
//
//    // Given a 16 bits data value and a port, returns the BSSR mask to set
//    // the pins of that port.
//    private static long value_to_port_bssr_mask(int uint16_value, Port port) {
//        // If WR is on this port, we return a mask that resets it.
//        long bssr_bits = (port == WR_PIN.port) ? 1l << (WR_PIN.pin_index + 16) : 0;
//        for (int bit = 0; bit < 16; bit++) {
//            if (DATA_PINS[bit].port != port) {
//                continue;
//            }
//            final int pin_index = DATA_PINS[bit].pin_index;
//            if ((uint16_value & (1 << bit)) == 0) {
//                bssr_bits |= 1l << (pin_index + 16);  // set pin low
//            } else {
//                // Mark for high level
//                bssr_bits |= 1l << pin_index;  // set pin high
//            }
//        }
//        return bssr_bits;
//    }
//
//    // A common method to output the table data.
//    private static void generate_table_data(int uint16_values[], String table_name) {
//        System.out.printf("\n\nconst uint64_t %s[] = {\n", table_name);
//        for (int i = 0; i < 256; i++) {
//            long bssr_mask_a = value_to_port_bssr_mask(uint16_values[i], Port.A);
//            long bssr_mask_b = value_to_port_bssr_mask(uint16_values[i], Port.B);
//            System.out.printf("0x%08x%08x,", bssr_mask_b, bssr_mask_a);
//            if (i % 2 == 1) {
//                System.out.printf("  // 0x%02x, 0x%02x\n", i - 1, i);
//            }
//        }
//        System.out.println("};");
//    }
//
//    public static void main(String ignored[]) {
//        // Print pin map
//        System.out.println("// Pin map:");
//        System.out.printf("//   WR    %4s\n", WR_PIN);
//        for (int i = 0; i < 16; i++) {
//            System.out.printf("//   D%-2d   %4s\n", i, DATA_PINS[i]);
//        }
//
//        // Generate direct bssr table
//        {
//            int values[] = new int[256];
//            for (int i = 0; i < 256; i++) {
//                values[i] = i;
//            }
//            generate_table_data(values, "direct_bssr_table");
//        }
//
//        // Generate color8 to color16 map bssr table
//        {
//            int values[] = new int[256];
//            for (int i = 0; i < 256; i++) {
//                values[i] = color8_to_color16(i);
//            }
//            generate_table_data(values, "color_bssr_table");
//        }
//    }
//}


// Pin map:
//   WR     PA0
//   D0    PB12
//   D1    PB13
//   D2    PB14
//   D3    PB15
//   D4    PB10
//   D5     PA9
//   D6    PA10
//   D7     PA7
//   D8     PA6
//   D9     PA5
//   D10   PA15
//   D11    PA4
//   D12    PA3
//   D13    PB4
//   D14    PA2
//   D15    PB5

const uint64_t direct_bssr_table[] = {
    0xf430000086fd0000, 0xe430100086fd0000,  // 0x00, 0x01
    0xd430200086fd0000, 0xc430300086fd0000,  // 0x02, 0x03
    0xb430400086fd0000, 0xa430500086fd0000,  // 0x04, 0x05
    0x9430600086fd0000, 0x8430700086fd0000,  // 0x06, 0x07
    0x7430800086fd0000, 0x6430900086fd0000,  // 0x08, 0x09
    0x5430a00086fd0000, 0x4430b00086fd0000,  // 0x0a, 0x0b
    0x3430c00086fd0000, 0x2430d00086fd0000,  // 0x0c, 0x0d
    0x1430e00086fd0000, 0x0430f00086fd0000,  // 0x0e, 0x0f
    0xf030040086fd0000, 0xe030140086fd0000,  // 0x10, 0x11
    0xd030240086fd0000, 0xc030340086fd0000,  // 0x12, 0x13
    0xb030440086fd0000, 0xa030540086fd0000,  // 0x14, 0x15
    0x9030640086fd0000, 0x8030740086fd0000,  // 0x16, 0x17
    0x7030840086fd0000, 0x6030940086fd0000,  // 0x18, 0x19
    0x5030a40086fd0000, 0x4030b40086fd0000,  // 0x1a, 0x1b
    0x3030c40086fd0000, 0x2030d40086fd0000,  // 0x1c, 0x1d
    0x1030e40086fd0000, 0x0030f40086fd0000,  // 0x1e, 0x1f
    0xf430000084fd0200, 0xe430100084fd0200,  // 0x20, 0x21
    0xd430200084fd0200, 0xc430300084fd0200,  // 0x22, 0x23
    0xb430400084fd0200, 0xa430500084fd0200,  // 0x24, 0x25
    0x9430600084fd0200, 0x8430700084fd0200,  // 0x26, 0x27
    0x7430800084fd0200, 0x6430900084fd0200,  // 0x28, 0x29
    0x5430a00084fd0200, 0x4430b00084fd0200,  // 0x2a, 0x2b
    0x3430c00084fd0200, 0x2430d00084fd0200,  // 0x2c, 0x2d
    0x1430e00084fd0200, 0x0430f00084fd0200,  // 0x2e, 0x2f
    0xf030040084fd0200, 0xe030140084fd0200,  // 0x30, 0x31
    0xd030240084fd0200, 0xc030340084fd0200,  // 0x32, 0x33
    0xb030440084fd0200, 0xa030540084fd0200,  // 0x34, 0x35
    0x9030640084fd0200, 0x8030740084fd0200,  // 0x36, 0x37
    0x7030840084fd0200, 0x6030940084fd0200,  // 0x38, 0x39
    0x5030a40084fd0200, 0x4030b40084fd0200,  // 0x3a, 0x3b
    0x3030c40084fd0200, 0x2030d40084fd0200,  // 0x3c, 0x3d
    0x1030e40084fd0200, 0x0030f40084fd0200,  // 0x3e, 0x3f
    0xf430000082fd0400, 0xe430100082fd0400,  // 0x40, 0x41
    0xd430200082fd0400, 0xc430300082fd0400,  // 0x42, 0x43
    0xb430400082fd0400, 0xa430500082fd0400,  // 0x44, 0x45
    0x9430600082fd0400, 0x8430700082fd0400,  // 0x46, 0x47
    0x7430800082fd0400, 0x6430900082fd0400,  // 0x48, 0x49
    0x5430a00082fd0400, 0x4430b00082fd0400,  // 0x4a, 0x4b
    0x3430c00082fd0400, 0x2430d00082fd0400,  // 0x4c, 0x4d
    0x1430e00082fd0400, 0x0430f00082fd0400,  // 0x4e, 0x4f
    0xf030040082fd0400, 0xe030140082fd0400,  // 0x50, 0x51
    0xd030240082fd0400, 0xc030340082fd0400,  // 0x52, 0x53
    0xb030440082fd0400, 0xa030540082fd0400,  // 0x54, 0x55
    0x9030640082fd0400, 0x8030740082fd0400,  // 0x56, 0x57
    0x7030840082fd0400, 0x6030940082fd0400,  // 0x58, 0x59
    0x5030a40082fd0400, 0x4030b40082fd0400,  // 0x5a, 0x5b
    0x3030c40082fd0400, 0x2030d40082fd0400,  // 0x5c, 0x5d
    0x1030e40082fd0400, 0x0030f40082fd0400,  // 0x5e, 0x5f
    0xf430000080fd0600, 0xe430100080fd0600,  // 0x60, 0x61
    0xd430200080fd0600, 0xc430300080fd0600,  // 0x62, 0x63
    0xb430400080fd0600, 0xa430500080fd0600,  // 0x64, 0x65
    0x9430600080fd0600, 0x8430700080fd0600,  // 0x66, 0x67
    0x7430800080fd0600, 0x6430900080fd0600,  // 0x68, 0x69
    0x5430a00080fd0600, 0x4430b00080fd0600,  // 0x6a, 0x6b
    0x3430c00080fd0600, 0x2430d00080fd0600,  // 0x6c, 0x6d
    0x1430e00080fd0600, 0x0430f00080fd0600,  // 0x6e, 0x6f
    0xf030040080fd0600, 0xe030140080fd0600,  // 0x70, 0x71
    0xd030240080fd0600, 0xc030340080fd0600,  // 0x72, 0x73
    0xb030440080fd0600, 0xa030540080fd0600,  // 0x74, 0x75
    0x9030640080fd0600, 0x8030740080fd0600,  // 0x76, 0x77
    0x7030840080fd0600, 0x6030940080fd0600,  // 0x78, 0x79
    0x5030a40080fd0600, 0x4030b40080fd0600,  // 0x7a, 0x7b
    0x3030c40080fd0600, 0x2030d40080fd0600,  // 0x7c, 0x7d
    0x1030e40080fd0600, 0x0030f40080fd0600,  // 0x7e, 0x7f
    0xf4300000867d0080, 0xe4301000867d0080,  // 0x80, 0x81
    0xd4302000867d0080, 0xc4303000867d0080,  // 0x82, 0x83
    0xb4304000867d0080, 0xa4305000867d0080,  // 0x84, 0x85
    0x94306000867d0080, 0x84307000867d0080,  // 0x86, 0x87
    0x74308000867d0080, 0x64309000867d0080,  // 0x88, 0x89
    0x5430a000867d0080, 0x4430b000867d0080,  // 0x8a, 0x8b
    0x3430c000867d0080, 0x2430d000867d0080,  // 0x8c, 0x8d
    0x1430e000867d0080, 0x0430f000867d0080,  // 0x8e, 0x8f
    0xf0300400867d0080, 0xe0301400867d0080,  // 0x90, 0x91
    0xd0302400867d0080, 0xc0303400867d0080,  // 0x92, 0x93
    0xb0304400867d0080, 0xa0305400867d0080,  // 0x94, 0x95
    0x90306400867d0080, 0x80307400867d0080,  // 0x96, 0x97
    0x70308400867d0080, 0x60309400867d0080,  // 0x98, 0x99
    0x5030a400867d0080, 0x4030b400867d0080,  // 0x9a, 0x9b
    0x3030c400867d0080, 0x2030d400867d0080,  // 0x9c, 0x9d
    0x1030e400867d0080, 0x0030f400867d0080,  // 0x9e, 0x9f
    0xf4300000847d0280, 0xe4301000847d0280,  // 0xa0, 0xa1
    0xd4302000847d0280, 0xc4303000847d0280,  // 0xa2, 0xa3
    0xb4304000847d0280, 0xa4305000847d0280,  // 0xa4, 0xa5
    0x94306000847d0280, 0x84307000847d0280,  // 0xa6, 0xa7
    0x74308000847d0280, 0x64309000847d0280,  // 0xa8, 0xa9
    0x5430a000847d0280, 0x4430b000847d0280,  // 0xaa, 0xab
    0x3430c000847d0280, 0x2430d000847d0280,  // 0xac, 0xad
    0x1430e000847d0280, 0x0430f000847d0280,  // 0xae, 0xaf
    0xf0300400847d0280, 0xe0301400847d0280,  // 0xb0, 0xb1
    0xd0302400847d0280, 0xc0303400847d0280,  // 0xb2, 0xb3
    0xb0304400847d0280, 0xa0305400847d0280,  // 0xb4, 0xb5
    0x90306400847d0280, 0x80307400847d0280,  // 0xb6, 0xb7
    0x70308400847d0280, 0x60309400847d0280,  // 0xb8, 0xb9
    0x5030a400847d0280, 0x4030b400847d0280,  // 0xba, 0xbb
    0x3030c400847d0280, 0x2030d400847d0280,  // 0xbc, 0xbd
    0x1030e400847d0280, 0x0030f400847d0280,  // 0xbe, 0xbf
    0xf4300000827d0480, 0xe4301000827d0480,  // 0xc0, 0xc1
    0xd4302000827d0480, 0xc4303000827d0480,  // 0xc2, 0xc3
    0xb4304000827d0480, 0xa4305000827d0480,  // 0xc4, 0xc5
    0x94306000827d0480, 0x84307000827d0480,  // 0xc6, 0xc7
    0x74308000827d0480, 0x64309000827d0480,  // 0xc8, 0xc9
    0x5430a000827d0480, 0x4430b000827d0480,  // 0xca, 0xcb
    0x3430c000827d0480, 0x2430d000827d0480,  // 0xcc, 0xcd
    0x1430e000827d0480, 0x0430f000827d0480,  // 0xce, 0xcf
    0xf0300400827d0480, 0xe0301400827d0480,  // 0xd0, 0xd1
    0xd0302400827d0480, 0xc0303400827d0480,  // 0xd2, 0xd3
    0xb0304400827d0480, 0xa0305400827d0480,  // 0xd4, 0xd5
    0x90306400827d0480, 0x80307400827d0480,  // 0xd6, 0xd7
    0x70308400827d0480, 0x60309400827d0480,  // 0xd8, 0xd9
    0x5030a400827d0480, 0x4030b400827d0480,  // 0xda, 0xdb
    0x3030c400827d0480, 0x2030d400827d0480,  // 0xdc, 0xdd
    0x1030e400827d0480, 0x0030f400827d0480,  // 0xde, 0xdf
    0xf4300000807d0680, 0xe4301000807d0680,  // 0xe0, 0xe1
    0xd4302000807d0680, 0xc4303000807d0680,  // 0xe2, 0xe3
    0xb4304000807d0680, 0xa4305000807d0680,  // 0xe4, 0xe5
    0x94306000807d0680, 0x84307000807d0680,  // 0xe6, 0xe7
    0x74308000807d0680, 0x64309000807d0680,  // 0xe8, 0xe9
    0x5430a000807d0680, 0x4430b000807d0680,  // 0xea, 0xeb
    0x3430c000807d0680, 0x2430d000807d0680,  // 0xec, 0xed
    0x1430e000807d0680, 0x0430f000807d0680,  // 0xee, 0xef
    0xf0300400807d0680, 0xe0301400807d0680,  // 0xf0, 0xf1
    0xd0302400807d0680, 0xc0303400807d0680,  // 0xf2, 0xf3
    0xb0304400807d0680, 0xa0305400807d0680,  // 0xf4, 0xf5
    0x90306400807d0680, 0x80307400807d0680,  // 0xf6, 0xf7
    0x70308400807d0680, 0x60309400807d0680,  // 0xf8, 0xf9
    0x5030a400807d0680, 0x4030b400807d0680,  // 0xfa, 0xfb
    0x3030c400807d0680, 0x2030d400807d0680,  // 0xfc, 0xfd
    0x1030e400807d0680, 0x0030f400807d0680,  // 0xfe, 0xff
};

const uint64_t color_bssr_table[] = {
    0xf430000086fd0000, 0x5430a00086fd0000,  // 0x00, 0x01
    0xa030540086fd0000, 0x0030f40086fd0000,  // 0x02, 0x03
    0xf430000084bd0240, 0x5430a00084bd0240,  // 0x04, 0x05
    0xa030540084bd0240, 0x0030f40084bd0240,  // 0x06, 0x07
    0xf430000082dd0420, 0x5430a00082dd0420,  // 0x08, 0x09
    0xa030540082dd0420, 0x0030f40082dd0420,  // 0x0a, 0x0b
    0xf4300000809d0660, 0x5430a000809d0660,  // 0x0c, 0x0d
    0xa0305400809d0660, 0x0030f400809d0660,  // 0x0e, 0x0f
    0xf4300000067d8080, 0x5430a000067d8080,  // 0x10, 0x11
    0xa0305400067d8080, 0x0030f400067d8080,  // 0x12, 0x13
    0xf4300000043d82c0, 0x5430a000043d82c0,  // 0x14, 0x15
    0xa0305400043d82c0, 0x0030f400043d82c0,  // 0x16, 0x17
    0xf4300000025d84a0, 0x5430a000025d84a0,  // 0x18, 0x19
    0xa0305400025d84a0, 0x0030f400025d84a0,  // 0x1a, 0x1b
    0xf4300000001d86e0, 0x5430a000001d86e0,  // 0x1c, 0x1d
    0xa0305400001d86e0, 0x0030f400001d86e0,  // 0x1e, 0x1f
    0xf420001086fd0000, 0x5420a01086fd0000,  // 0x20, 0x21
    0xa020541086fd0000, 0x0020f41086fd0000,  // 0x22, 0x23
    0xf420001084bd0240, 0x5420a01084bd0240,  // 0x24, 0x25
    0xa020541084bd0240, 0x0020f41084bd0240,  // 0x26, 0x27
    0xf420001082dd0420, 0x5420a01082dd0420,  // 0x28, 0x29
    0xa020541082dd0420, 0x0020f41082dd0420,  // 0x2a, 0x2b
    0xf4200010809d0660, 0x5420a010809d0660,  // 0x2c, 0x2d
    0xa0205410809d0660, 0x0020f410809d0660,  // 0x2e, 0x2f
    0xf4200010067d8080, 0x5420a010067d8080,  // 0x30, 0x31
    0xa0205410067d8080, 0x0020f410067d8080,  // 0x32, 0x33
    0xf4200010043d82c0, 0x5420a010043d82c0,  // 0x34, 0x35
    0xa0205410043d82c0, 0x0020f410043d82c0,  // 0x36, 0x37
    0xf4200010025d84a0, 0x5420a010025d84a0,  // 0x38, 0x39
    0xa0205410025d84a0, 0x0020f410025d84a0,  // 0x3a, 0x3b
    0xf4200010001d86e0, 0x5420a010001d86e0,  // 0x3c, 0x3d
    0xa0205410001d86e0, 0x0020f410001d86e0,  // 0x3e, 0x3f
    0xf430000086e90014, 0x5430a00086e90014,  // 0x40, 0x41
    0xa030540086e90014, 0x0030f40086e90014,  // 0x42, 0x43
    0xf430000084a90254, 0x5430a00084a90254,  // 0x44, 0x45
    0xa030540084a90254, 0x0030f40084a90254,  // 0x46, 0x47
    0xf430000082c90434, 0x5430a00082c90434,  // 0x48, 0x49
    0xa030540082c90434, 0x0030f40082c90434,  // 0x4a, 0x4b
    0xf430000080890674, 0x5430a00080890674,  // 0x4c, 0x4d
    0xa030540080890674, 0x0030f40080890674,  // 0x4e, 0x4f
    0xf430000006698094, 0x5430a00006698094,  // 0x50, 0x51
    0xa030540006698094, 0x0030f40006698094,  // 0x52, 0x53
    0xf4300000042982d4, 0x5430a000042982d4,  // 0x54, 0x55
    0xa0305400042982d4, 0x0030f400042982d4,  // 0x56, 0x57
    0xf4300000024984b4, 0x5430a000024984b4,  // 0x58, 0x59
    0xa0305400024984b4, 0x0030f400024984b4,  // 0x5a, 0x5b
    0xf4300000000986f4, 0x5430a000000986f4,  // 0x5c, 0x5d
    0xa0305400000986f4, 0x0030f400000986f4,  // 0x5e, 0x5f
    0xf420001086e90014, 0x5420a01086e90014,  // 0x60, 0x61
    0xa020541086e90014, 0x0020f41086e90014,  // 0x62, 0x63
    0xf420001084a90254, 0x5420a01084a90254,  // 0x64, 0x65
    0xa020541084a90254, 0x0020f41084a90254,  // 0x66, 0x67
    0xf420001082c90434, 0x5420a01082c90434,  // 0x68, 0x69
    0xa020541082c90434, 0x0020f41082c90434,  // 0x6a, 0x6b
    0xf420001080890674, 0x5420a01080890674,  // 0x6c, 0x6d
    0xa020541080890674, 0x0020f41080890674,  // 0x6e, 0x6f
    0xf420001006698094, 0x5420a01006698094,  // 0x70, 0x71
    0xa020541006698094, 0x0020f41006698094,  // 0x72, 0x73
    0xf4200010042982d4, 0x5420a010042982d4,  // 0x74, 0x75
    0xa0205410042982d4, 0x0020f410042982d4,  // 0x76, 0x77
    0xf4200010024984b4, 0x5420a010024984b4,  // 0x78, 0x79
    0xa0205410024984b4, 0x0020f410024984b4,  // 0x7a, 0x7b
    0xf4200010000986f4, 0x5420a010000986f4,  // 0x7c, 0x7d
    0xa0205410000986f4, 0x0020f410000986f4,  // 0x7e, 0x7f
    0xf410002086f50008, 0x5410a02086f50008,  // 0x80, 0x81
    0xa010542086f50008, 0x0010f42086f50008,  // 0x82, 0x83
    0xf410002084b50248, 0x5410a02084b50248,  // 0x84, 0x85
    0xa010542084b50248, 0x0010f42084b50248,  // 0x86, 0x87
    0xf410002082d50428, 0x5410a02082d50428,  // 0x88, 0x89
    0xa010542082d50428, 0x0010f42082d50428,  // 0x8a, 0x8b
    0xf410002080950668, 0x5410a02080950668,  // 0x8c, 0x8d
    0xa010542080950668, 0x0010f42080950668,  // 0x8e, 0x8f
    0xf410002006758088, 0x5410a02006758088,  // 0x90, 0x91
    0xa010542006758088, 0x0010f42006758088,  // 0x92, 0x93
    0xf4100020043582c8, 0x5410a020043582c8,  // 0x94, 0x95
    0xa0105420043582c8, 0x0010f420043582c8,  // 0x96, 0x97
    0xf4100020025584a8, 0x5410a020025584a8,  // 0x98, 0x99
    0xa0105420025584a8, 0x0010f420025584a8,  // 0x9a, 0x9b
    0xf4100020001586e8, 0x5410a020001586e8,  // 0x9c, 0x9d
    0xa0105420001586e8, 0x0010f420001586e8,  // 0x9e, 0x9f
    0xf400003086f50008, 0x5400a03086f50008,  // 0xa0, 0xa1
    0xa000543086f50008, 0x0000f43086f50008,  // 0xa2, 0xa3
    0xf400003084b50248, 0x5400a03084b50248,  // 0xa4, 0xa5
    0xa000543084b50248, 0x0000f43084b50248,  // 0xa6, 0xa7
    0xf400003082d50428, 0x5400a03082d50428,  // 0xa8, 0xa9
    0xa000543082d50428, 0x0000f43082d50428,  // 0xaa, 0xab
    0xf400003080950668, 0x5400a03080950668,  // 0xac, 0xad
    0xa000543080950668, 0x0000f43080950668,  // 0xae, 0xaf
    0xf400003006758088, 0x5400a03006758088,  // 0xb0, 0xb1
    0xa000543006758088, 0x0000f43006758088,  // 0xb2, 0xb3
    0xf4000030043582c8, 0x5400a030043582c8,  // 0xb4, 0xb5
    0xa0005430043582c8, 0x0000f430043582c8,  // 0xb6, 0xb7
    0xf4000030025584a8, 0x5400a030025584a8,  // 0xb8, 0xb9
    0xa0005430025584a8, 0x0000f430025584a8,  // 0xba, 0xbb
    0xf4000030001586e8, 0x5400a030001586e8,  // 0xbc, 0xbd
    0xa0005430001586e8, 0x0000f430001586e8,  // 0xbe, 0xbf
    0xf410002086e1001c, 0x5410a02086e1001c,  // 0xc0, 0xc1
    0xa010542086e1001c, 0x0010f42086e1001c,  // 0xc2, 0xc3
    0xf410002084a1025c, 0x5410a02084a1025c,  // 0xc4, 0xc5
    0xa010542084a1025c, 0x0010f42084a1025c,  // 0xc6, 0xc7
    0xf410002082c1043c, 0x5410a02082c1043c,  // 0xc8, 0xc9
    0xa010542082c1043c, 0x0010f42082c1043c,  // 0xca, 0xcb
    0xf41000208081067c, 0x5410a0208081067c,  // 0xcc, 0xcd
    0xa01054208081067c, 0x0010f4208081067c,  // 0xce, 0xcf
    0xf41000200661809c, 0x5410a0200661809c,  // 0xd0, 0xd1
    0xa01054200661809c, 0x0010f4200661809c,  // 0xd2, 0xd3
    0xf4100020042182dc, 0x5410a020042182dc,  // 0xd4, 0xd5
    0xa0105420042182dc, 0x0010f420042182dc,  // 0xd6, 0xd7
    0xf4100020024184bc, 0x5410a020024184bc,  // 0xd8, 0xd9
    0xa0105420024184bc, 0x0010f420024184bc,  // 0xda, 0xdb
    0xf4100020000186fc, 0x5410a020000186fc,  // 0xdc, 0xdd
    0xa0105420000186fc, 0x0010f420000186fc,  // 0xde, 0xdf
    0xf400003086e1001c, 0x5400a03086e1001c,  // 0xe0, 0xe1
    0xa000543086e1001c, 0x0000f43086e1001c,  // 0xe2, 0xe3
    0xf400003084a1025c, 0x5400a03084a1025c,  // 0xe4, 0xe5
    0xa000543084a1025c, 0x0000f43084a1025c,  // 0xe6, 0xe7
    0xf400003082c1043c, 0x5400a03082c1043c,  // 0xe8, 0xe9
    0xa000543082c1043c, 0x0000f43082c1043c,  // 0xea, 0xeb
    0xf40000308081067c, 0x5400a0308081067c,  // 0xec, 0xed
    0xa00054308081067c, 0x0000f4308081067c,  // 0xee, 0xef
    0xf40000300661809c, 0x5400a0300661809c,  // 0xf0, 0xf1
    0xa00054300661809c, 0x0000f4300661809c,  // 0xf2, 0xf3
    0xf4000030042182dc, 0x5400a030042182dc,  // 0xf4, 0xf5
    0xa0005430042182dc, 0x0000f430042182dc,  // 0xf6, 0xf7
    0xf4000030024184bc, 0x5400a030024184bc,  // 0xf8, 0xf9
    0xa0005430024184bc, 0x0000f430024184bc,  // 0xfa, 0xfb
    0xf4000030000186fc, 0x5400a030000186fc,  // 0xfc, 0xfd
    0xa0005430000186fc, 0x0000f430000186fc,  // 0xfe, 0xff
};

}  // namespace bssr_tables