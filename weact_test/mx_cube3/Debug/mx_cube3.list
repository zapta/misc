
mx_cube3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  24000010  08003584  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000044  08003584  00020044  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009554  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018c8  00000000  00000000  00029592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000007b0  00000000  00000000  0002ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000006d8  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000354ac  00000000  00000000  0002bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000a523  00000000  00000000  00061194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150173  00000000  00000000  0006b6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001bb82a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cf4  00000000  00000000  001bb87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003544 	.word	0x08003544

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003544 	.word	0x08003544

080002d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_GPIO_Init+0xa0>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a20      	ldr	r2, [pc, #128]	; (8000378 <MX_GPIO_Init+0xa0>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_GPIO_Init+0xa0>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_GPIO_Init+0xa0>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_GPIO_Init+0xa0>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0xa0>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2108      	movs	r1, #8
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0xa4>)
 800034e:	f000 fd1f 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PE3_Pin;
 8000352:	2308      	movs	r3, #8
 8000354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0xa4>)
 800036a:	f000 fb61 	bl	8000a30 <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	58024400 	.word	0x58024400
 800037c:	58021000 	.word	0x58021000

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 f9d2 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f806 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f7ff ffa4 	bl	80002d8 <MX_GPIO_Init>
  MX_RNG_Init();
 8000390:	f000 f886 	bl	80004a0 <MX_RNG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000394:	e7fe      	b.n	8000394 <main+0x14>
	...

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b09c      	sub	sp, #112	; 0x70
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a2:	224c      	movs	r2, #76	; 0x4c
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 f8c4 	bl	8003534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2220      	movs	r2, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 f8be 	bl	8003534 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003b8:	2002      	movs	r0, #2
 80003ba:	f000 fd03 	bl	8000dc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80003be:	2300      	movs	r3, #0
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	4b32      	ldr	r3, [pc, #200]	; (800048c <SystemClock_Config+0xf4>)
 80003c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003c6:	4a31      	ldr	r2, [pc, #196]	; (800048c <SystemClock_Config+0xf4>)
 80003c8:	f023 0301 	bic.w	r3, r3, #1
 80003cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <SystemClock_Config+0xf4>)
 80003d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <SystemClock_Config+0xf8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003e0:	4a2b      	ldr	r2, [pc, #172]	; (8000490 <SystemClock_Config+0xf8>)
 80003e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b29      	ldr	r3, [pc, #164]	; (8000490 <SystemClock_Config+0xf8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f4:	bf00      	nop
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <SystemClock_Config+0xf8>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000402:	d1f8      	bne.n	80003f6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000404:	2321      	movs	r3, #33	; 0x21
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800040e:	2301      	movs	r3, #1
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2302      	movs	r3, #2
 8000414:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000416:	2302      	movs	r3, #2
 8000418:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800041a:	2305      	movs	r3, #5
 800041c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800041e:	23c0      	movs	r3, #192	; 0xc0
 8000420:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000422:	2304      	movs	r3, #4
 8000424:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000426:	2302      	movs	r3, #2
 8000428:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800042a:	2302      	movs	r3, #2
 800042c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800042e:	2308      	movs	r3, #8
 8000430:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000432:	2300      	movs	r3, #0
 8000434:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fcfa 	bl	8000e38 <HAL_RCC_OscConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800044a:	f000 f823 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	233f      	movs	r3, #63	; 0x3f
 8000450:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	2303      	movs	r3, #3
 8000454:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800045a:	2308      	movs	r3, #8
 800045c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800045e:	2340      	movs	r3, #64	; 0x40
 8000460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000462:	2340      	movs	r3, #64	; 0x40
 8000464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800046c:	2340      	movs	r3, #64	; 0x40
 800046e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2102      	movs	r1, #2
 8000474:	4618      	mov	r0, r3
 8000476:	f001 f939 	bl	80016ec <HAL_RCC_ClockConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000480:	f000 f808 	bl	8000494 <Error_Handler>
  }
}
 8000484:	bf00      	nop
 8000486:	3770      	adds	r7, #112	; 0x70
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	58000400 	.word	0x58000400
 8000490:	58024800 	.word	0x58024800

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <MX_RNG_Init+0x24>)
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <MX_RNG_Init+0x28>)
 80004a8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_RNG_Init+0x24>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_RNG_Init+0x24>)
 80004b2:	f002 ffb9 	bl	8003428 <HAL_RNG_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80004bc:	f7ff ffea 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2400002c 	.word	0x2400002c
 80004c8:	48021800 	.word	0x48021800

080004cc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0b4      	sub	sp, #208	; 0xd0
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	22c0      	movs	r2, #192	; 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f003 f829 	bl	8003534 <memset>
  if(rngHandle->Instance==RNG)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_RNG_MspInit+0x6c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d121      	bne.n	8000530 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80004ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80004f8:	2300      	movs	r3, #0
 80004fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fc22 	bl	8001d4c <HAL_RCCEx_PeriphCLKConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800050e:	f7ff ffc1 	bl	8000494 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_RNG_MspInit+0x70>)
 8000514:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_RNG_MspInit+0x70>)
 800051a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_RNG_MspInit+0x70>)
 8000524:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000530:	bf00      	nop
 8000532:	37d0      	adds	r7, #208	; 0xd0
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	48021800 	.word	0x48021800
 800053c:	58024400 	.word	0x58024400

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x30>)
 8000548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_MspInit+0x30>)
 800054e:	f043 0302 	orr.w	r3, r3, #2
 8000552:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_MspInit+0x30>)
 8000558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	58024400 	.word	0x58024400

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <MemManage_Handler+0x4>

08000586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler+0x4>

08000592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c0:	f000 f926 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <SystemInit+0xe4>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d2:	4a36      	ldr	r2, [pc, #216]	; (80006ac <SystemInit+0xe4>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005dc:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <SystemInit+0xe8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f003 030f 	and.w	r3, r3, #15
 80005e4:	2b06      	cmp	r3, #6
 80005e6:	d807      	bhi.n	80005f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005e8:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <SystemInit+0xe8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f023 030f 	bic.w	r3, r3, #15
 80005f0:	4a2f      	ldr	r2, [pc, #188]	; (80006b0 <SystemInit+0xe8>)
 80005f2:	f043 0307 	orr.w	r3, r3, #7
 80005f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <SystemInit+0xec>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a2d      	ldr	r2, [pc, #180]	; (80006b4 <SystemInit+0xec>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <SystemInit+0xec>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <SystemInit+0xec>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4929      	ldr	r1, [pc, #164]	; (80006b4 <SystemInit+0xec>)
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemInit+0xf0>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemInit+0xe8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemInit+0xe8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f023 030f 	bic.w	r3, r3, #15
 800062a:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemInit+0xe8>)
 800062c:	f043 0307 	orr.w	r3, r3, #7
 8000630:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemInit+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <SystemInit+0xec>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <SystemInit+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SystemInit+0xec>)
 8000646:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <SystemInit+0xf4>)
 8000648:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <SystemInit+0xec>)
 800064c:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <SystemInit+0xf8>)
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <SystemInit+0xec>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <SystemInit+0xfc>)
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <SystemInit+0xec>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <SystemInit+0xec>)
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <SystemInit+0xfc>)
 8000660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <SystemInit+0xec>)
 8000664:	2200      	movs	r2, #0
 8000666:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <SystemInit+0xec>)
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <SystemInit+0xfc>)
 800066c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <SystemInit+0xec>)
 8000670:	2200      	movs	r2, #0
 8000672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <SystemInit+0xec>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <SystemInit+0xec>)
 800067a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800067e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <SystemInit+0xec>)
 8000682:	2200      	movs	r2, #0
 8000684:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <SystemInit+0x100>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <SystemInit+0x104>)
 800068c:	4013      	ands	r3, r2
 800068e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000692:	d202      	bcs.n	800069a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <SystemInit+0x108>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <SystemInit+0x10c>)
 800069c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	52002000 	.word	0x52002000
 80006b4:	58024400 	.word	0x58024400
 80006b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006bc:	02020200 	.word	0x02020200
 80006c0:	01ff0000 	.word	0x01ff0000
 80006c4:	01010280 	.word	0x01010280
 80006c8:	5c001000 	.word	0x5c001000
 80006cc:	ffff0000 	.word	0xffff0000
 80006d0:	51008108 	.word	0x51008108
 80006d4:	52004000 	.word	0x52004000

080006d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006dc:	f7ff ff74 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	; (8000724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000706:	f002 fef1 	bl	80034ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070a:	f7ff fe39 	bl	8000380 <main>
  bx  lr
 800070e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000710:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000714:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000718:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800071c:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 8000720:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000724:	24000044 	.word	0x24000044

08000728 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC3_IRQHandler>
	...

0800072c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000732:	2003      	movs	r0, #3
 8000734:	f000 f94a 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000738:	f001 f98e 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 800073c:	4602      	mov	r2, r0
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_Init+0x68>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	4913      	ldr	r1, [pc, #76]	; (8000798 <HAL_Init+0x6c>)
 800074a:	5ccb      	ldrb	r3, [r1, r3]
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	fa22 f303 	lsr.w	r3, r2, r3
 8000754:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_Init+0x68>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_Init+0x6c>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	f003 031f 	and.w	r3, r3, #31
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	fa22 f303 	lsr.w	r3, r2, r3
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <HAL_Init+0x70>)
 800076e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_Init+0x74>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f814 	bl	80007a4 <HAL_InitTick>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e002      	b.n	800078c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000786:	f7ff fedb 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	58024400 	.word	0x58024400
 8000798:	0800355c 	.word	0x0800355c
 800079c:	24000004 	.word	0x24000004
 80007a0:	24000000 	.word	0x24000000

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_InitTick+0x60>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e021      	b.n	80007fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <HAL_InitTick+0x64>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_InitTick+0x60>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f921 	bl	8000a16 <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f8f9 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x68>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2400000c 	.word	0x2400000c
 8000808:	24000000 	.word	0x24000000
 800080c:	24000008 	.word	0x24000008

08000810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2400000c 	.word	0x2400000c
 8000834:	24000040 	.word	0x24000040

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	24000040 	.word	0x24000040

08000850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetREVID+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	0c1b      	lsrs	r3, r3, #16
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	5c001000 	.word	0x5c001000

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <__NVIC_SetPriorityGrouping+0x40>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	4313      	orrs	r3, r2
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	05fa0000 	.word	0x05fa0000

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db0a      	blt.n	80008f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <__NVIC_SetPriority+0x4c>)
 80008e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f4:	e00a      	b.n	800090c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4908      	ldr	r1, [pc, #32]	; (800091c <__NVIC_SetPriority+0x50>)
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	440b      	add	r3, r1
 800090a:	761a      	strb	r2, [r3, #24]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f1c3 0307 	rsb	r3, r3, #7
 800093a:	2b04      	cmp	r3, #4
 800093c:	bf28      	it	cs
 800093e:	2304      	movcs	r3, #4
 8000940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3304      	adds	r3, #4
 8000946:	2b06      	cmp	r3, #6
 8000948:	d902      	bls.n	8000950 <NVIC_EncodePriority+0x30>
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3b03      	subs	r3, #3
 800094e:	e000      	b.n	8000952 <NVIC_EncodePriority+0x32>
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 32ff 	mov.w	r2, #4294967295
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43d9      	mvns	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	4313      	orrs	r3, r2
         );
}
 800097a:	4618      	mov	r0, r3
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ff8e 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff47 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff5e 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff90 	bl	8000920 <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5f 	bl	80008cc <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ffb2 	bl	8000988 <SysTick_Config>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a3e:	4b89      	ldr	r3, [pc, #548]	; (8000c64 <HAL_GPIO_Init+0x234>)
 8000a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a42:	e194      	b.n	8000d6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 8186 	beq.w	8000d68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d005      	beq.n	8000a74 <HAL_GPIO_Init+0x44>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d130      	bne.n	8000ad6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aaa:	2201      	movs	r2, #1
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	091b      	lsrs	r3, r3, #4
 8000ac0:	f003 0201 	and.w	r2, r3, #1
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d017      	beq.n	8000b12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d123      	bne.n	8000b66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	08da      	lsrs	r2, r3, #3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3208      	adds	r2, #8
 8000b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	220f      	movs	r2, #15
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	691a      	ldr	r2, [r3, #16]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	08da      	lsrs	r2, r3, #3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3208      	adds	r2, #8
 8000b60:	69b9      	ldr	r1, [r7, #24]
 8000b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0203 	and.w	r2, r3, #3
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80e0 	beq.w	8000d68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <HAL_GPIO_Init+0x238>)
 8000baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bae:	4a2e      	ldr	r2, [pc, #184]	; (8000c68 <HAL_GPIO_Init+0x238>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <HAL_GPIO_Init+0x238>)
 8000bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <HAL_GPIO_Init+0x23c>)
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a20      	ldr	r2, [pc, #128]	; (8000c70 <HAL_GPIO_Init+0x240>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d052      	beq.n	8000c98 <HAL_GPIO_Init+0x268>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_GPIO_Init+0x244>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d031      	beq.n	8000c5e <HAL_GPIO_Init+0x22e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_GPIO_Init+0x248>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d02b      	beq.n	8000c5a <HAL_GPIO_Init+0x22a>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_GPIO_Init+0x24c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d025      	beq.n	8000c56 <HAL_GPIO_Init+0x226>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_GPIO_Init+0x250>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01f      	beq.n	8000c52 <HAL_GPIO_Init+0x222>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <HAL_GPIO_Init+0x254>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d019      	beq.n	8000c4e <HAL_GPIO_Init+0x21e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <HAL_GPIO_Init+0x258>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0x21a>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_GPIO_Init+0x25c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00d      	beq.n	8000c46 <HAL_GPIO_Init+0x216>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_GPIO_Init+0x260>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d007      	beq.n	8000c42 <HAL_GPIO_Init+0x212>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_GPIO_Init+0x264>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_GPIO_Init+0x20e>
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	e02d      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c3e:	230a      	movs	r3, #10
 8000c40:	e02b      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c42:	2308      	movs	r3, #8
 8000c44:	e029      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c46:	2307      	movs	r3, #7
 8000c48:	e027      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	e025      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c4e:	2305      	movs	r3, #5
 8000c50:	e023      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c52:	2304      	movs	r3, #4
 8000c54:	e021      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c56:	2303      	movs	r3, #3
 8000c58:	e01f      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e01d      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e01b      	b.n	8000c9a <HAL_GPIO_Init+0x26a>
 8000c62:	bf00      	nop
 8000c64:	58000080 	.word	0x58000080
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58000400 	.word	0x58000400
 8000c70:	58020000 	.word	0x58020000
 8000c74:	58020400 	.word	0x58020400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020c00 	.word	0x58020c00
 8000c80:	58021000 	.word	0x58021000
 8000c84:	58021400 	.word	0x58021400
 8000c88:	58021800 	.word	0x58021800
 8000c8c:	58021c00 	.word	0x58021c00
 8000c90:	58022000 	.word	0x58022000
 8000c94:	58022400 	.word	0x58022400
 8000c98:	2300      	movs	r3, #0
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	f002 0203 	and.w	r2, r2, #3
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000caa:	4938      	ldr	r1, [pc, #224]	; (8000d8c <HAL_GPIO_Init+0x35c>)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f47f ae63 	bne.w	8000a44 <HAL_GPIO_Init+0x14>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3724      	adds	r7, #36	; 0x24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58000400 	.word	0x58000400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	041a      	lsls	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	619a      	str	r2, [r3, #24]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_PWREx_ConfigSupply+0x70>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d00a      	beq.n	8000dee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_PWREx_ConfigSupply+0x70>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d001      	beq.n	8000dea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e01f      	b.n	8000e2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e01d      	b.n	8000e2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_PWREx_ConfigSupply+0x70>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f023 0207 	bic.w	r2, r3, #7
 8000df6:	490f      	ldr	r1, [pc, #60]	; (8000e34 <HAL_PWREx_ConfigSupply+0x70>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000dfe:	f7ff fd1b 	bl	8000838 <HAL_GetTick>
 8000e02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e04:	e009      	b.n	8000e1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000e06:	f7ff fd17 	bl	8000838 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e14:	d901      	bls.n	8000e1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e007      	b.n	8000e2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_PWREx_ConfigSupply+0x70>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e26:	d1ee      	bne.n	8000e06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	58024800 	.word	0x58024800

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 bc48 	b.w	80016dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8088 	beq.w	8000f6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e5a:	4b99      	ldr	r3, [pc, #612]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e64:	4b96      	ldr	r3, [pc, #600]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d007      	beq.n	8000e80 <HAL_RCC_OscConfig+0x48>
 8000e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e72:	2b18      	cmp	r3, #24
 8000e74:	d111      	bne.n	8000e9a <HAL_RCC_OscConfig+0x62>
 8000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4b8f      	ldr	r3, [pc, #572]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d06d      	beq.n	8000f68 <HAL_RCC_OscConfig+0x130>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d169      	bne.n	8000f68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f000 bc21 	b.w	80016dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x7a>
 8000ea4:	4b86      	ldr	r3, [pc, #536]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a85      	ldr	r2, [pc, #532]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e02e      	b.n	8000f10 <HAL_RCC_OscConfig+0xd8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x9c>
 8000eba:	4b81      	ldr	r3, [pc, #516]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a80      	ldr	r2, [pc, #512]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a7d      	ldr	r2, [pc, #500]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0xd8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xc0>
 8000ede:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a77      	ldr	r2, [pc, #476]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a74      	ldr	r2, [pc, #464]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0xd8>
 8000ef8:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a70      	ldr	r2, [pc, #448]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a6d      	ldr	r2, [pc, #436]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc8e 	bl	8000838 <HAL_GetTick>
 8000f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fc8a 	bl	8000838 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e3d4      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f32:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xe8>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fc7a 	bl	8000838 <HAL_GetTick>
 8000f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fc76 	bl	8000838 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e3c0      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x110>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80ca 	beq.w	800110c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f78:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f82:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_RCC_OscConfig+0x166>
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	2b18      	cmp	r3, #24
 8000f92:	d156      	bne.n	8001042 <HAL_RCC_OscConfig+0x20a>
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d151      	bne.n	8001042 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x17e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e392      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 0219 	bic.w	r2, r3, #25
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	493f      	ldr	r1, [pc, #252]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc36 	bl	8000838 <HAL_GetTick>
 8000fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fc32 	bl	8000838 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e37c      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	f7ff fc2f 	bl	8000850 <HAL_GetREVID>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f241 0203 	movw	r2, #4099	; 0x1003
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d817      	bhi.n	800102c <HAL_RCC_OscConfig+0x1f4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b40      	cmp	r3, #64	; 0x40
 8001002:	d108      	bne.n	8001016 <HAL_RCC_OscConfig+0x1de>
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800100c:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001012:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001014:	e07a      	b.n	800110c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	4926      	ldr	r1, [pc, #152]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800102a:	e06f      	b.n	800110c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	4921      	ldr	r1, [pc, #132]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001040:	e064      	b.n	800110c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d047      	beq.n	80010da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 0219 	bic.w	r2, r3, #25
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	491a      	ldr	r1, [pc, #104]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105c:	f7ff fbec 	bl	8000838 <HAL_GetTick>
 8001060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001064:	f7ff fbe8 	bl	8000838 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e332      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	f7ff fbe5 	bl	8000850 <HAL_GetREVID>
 8001086:	4603      	mov	r3, r0
 8001088:	f241 0203 	movw	r2, #4099	; 0x1003
 800108c:	4293      	cmp	r3, r2
 800108e:	d819      	bhi.n	80010c4 <HAL_RCC_OscConfig+0x28c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b40      	cmp	r3, #64	; 0x40
 8001096:	d108      	bne.n	80010aa <HAL_RCC_OscConfig+0x272>
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 80010a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a6:	6053      	str	r3, [r2, #4]
 80010a8:	e030      	b.n	800110c <HAL_RCC_OscConfig+0x2d4>
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	031b      	lsls	r3, r3, #12
 80010b8:	4901      	ldr	r1, [pc, #4]	; (80010c0 <HAL_RCC_OscConfig+0x288>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	604b      	str	r3, [r1, #4]
 80010be:	e025      	b.n	800110c <HAL_RCC_OscConfig+0x2d4>
 80010c0:	58024400 	.word	0x58024400
 80010c4:	4b9a      	ldr	r3, [pc, #616]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	4997      	ldr	r1, [pc, #604]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e018      	b.n	800110c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b95      	ldr	r3, [pc, #596]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a94      	ldr	r2, [pc, #592]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fba7 	bl	8000838 <HAL_GetTick>
 80010ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fba3 	bl	8000838 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e2ed      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001100:	4b8b      	ldr	r3, [pc, #556]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a9 	beq.w	800126c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001122:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001124:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b08      	cmp	r3, #8
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0x308>
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b18      	cmp	r3, #24
 8001134:	d13a      	bne.n	80011ac <HAL_RCC_OscConfig+0x374>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d135      	bne.n	80011ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001140:	4b7b      	ldr	r3, [pc, #492]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x320>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b80      	cmp	r3, #128	; 0x80
 8001152:	d001      	beq.n	8001158 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e2c1      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001158:	f7ff fb7a 	bl	8000850 <HAL_GetREVID>
 800115c:	4603      	mov	r3, r0
 800115e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001162:	4293      	cmp	r3, r2
 8001164:	d817      	bhi.n	8001196 <HAL_RCC_OscConfig+0x35e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	2b20      	cmp	r3, #32
 800116c:	d108      	bne.n	8001180 <HAL_RCC_OscConfig+0x348>
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001176:	4a6e      	ldr	r2, [pc, #440]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800117c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800117e:	e075      	b.n	800126c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001180:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	069b      	lsls	r3, r3, #26
 800118e:	4968      	ldr	r1, [pc, #416]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001194:	e06a      	b.n	800126c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001196:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	061b      	lsls	r3, r3, #24
 80011a4:	4962      	ldr	r1, [pc, #392]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011aa:	e05f      	b.n	800126c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d042      	beq.n	800123a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80011b4:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a5d      	ldr	r2, [pc, #372]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80011ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fb3a 	bl	8000838 <HAL_GetTick>
 80011c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80011c8:	f7ff fb36 	bl	8000838 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e280      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011e6:	f7ff fb33 	bl	8000850 <HAL_GetREVID>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d817      	bhi.n	8001224 <HAL_RCC_OscConfig+0x3ec>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	2b20      	cmp	r3, #32
 80011fa:	d108      	bne.n	800120e <HAL_RCC_OscConfig+0x3d6>
 80011fc:	4b4c      	ldr	r3, [pc, #304]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800120a:	6053      	str	r3, [r2, #4]
 800120c:	e02e      	b.n	800126c <HAL_RCC_OscConfig+0x434>
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	069b      	lsls	r3, r3, #26
 800121c:	4944      	ldr	r1, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
 8001222:	e023      	b.n	800126c <HAL_RCC_OscConfig+0x434>
 8001224:	4b42      	ldr	r3, [pc, #264]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	493f      	ldr	r1, [pc, #252]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001234:	4313      	orrs	r3, r2
 8001236:	60cb      	str	r3, [r1, #12]
 8001238:	e018      	b.n	800126c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff faf7 	bl	8000838 <HAL_GetTick>
 800124a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800124e:	f7ff faf3 	bl	8000838 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e23d      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001260:	4b33      	ldr	r3, [pc, #204]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d036      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d019      	beq.n	80012b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001284:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fad4 	bl	8000838 <HAL_GetTick>
 8001290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fad0 	bl	8000838 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e21a      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80012a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x45c>
 80012b2:	e018      	b.n	80012e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80012b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff faba 	bl	8000838 <HAL_GetTick>
 80012c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fab6 	bl	8000838 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e200      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d039      	beq.n	8001366 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01c      	beq.n	8001334 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001304:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001306:	f7ff fa97 	bl	8000838 <HAL_GetTick>
 800130a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800130e:	f7ff fa93 	bl	8000838 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1dd      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x4d6>
 800132c:	e01b      	b.n	8001366 <HAL_RCC_OscConfig+0x52e>
 800132e:	bf00      	nop
 8001330:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001334:	4b9b      	ldr	r3, [pc, #620]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a9a      	ldr	r2, [pc, #616]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001340:	f7ff fa7a 	bl	8000838 <HAL_GetTick>
 8001344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001348:	f7ff fa76 	bl	8000838 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1c0      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800135a:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8081 	beq.w	8001476 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <HAL_RCC_OscConfig+0x770>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a8b      	ldr	r2, [pc, #556]	; (80015a8 <HAL_RCC_OscConfig+0x770>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001380:	f7ff fa5a 	bl	8000838 <HAL_GetTick>
 8001384:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001388:	f7ff fa56 	bl	8000838 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1a0      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800139a:	4b83      	ldr	r3, [pc, #524]	; (80015a8 <HAL_RCC_OscConfig+0x770>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x584>
 80013ae:	4b7d      	ldr	r3, [pc, #500]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	4a7c      	ldr	r2, [pc, #496]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ba:	e02d      	b.n	8001418 <HAL_RCC_OscConfig+0x5e0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x5a6>
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a76      	ldr	r2, [pc, #472]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	4a73      	ldr	r2, [pc, #460]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013d6:	f023 0304 	bic.w	r3, r3, #4
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x5e0>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c8>
 80013e6:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a6b      	ldr	r2, [pc, #428]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0x5e0>
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a67      	ldr	r2, [pc, #412]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	4b65      	ldr	r3, [pc, #404]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	4a64      	ldr	r2, [pc, #400]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001412:	f023 0304 	bic.w	r3, r3, #4
 8001416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fa0a 	bl	8000838 <HAL_GetTick>
 8001424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fa06 	bl	8000838 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e14e      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800143e:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ee      	beq.n	8001428 <HAL_RCC_OscConfig+0x5f0>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff f9f4 	bl	8000838 <HAL_GetTick>
 8001450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff f9f0 	bl	8000838 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e138      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ee      	bne.n	8001454 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 812d 	beq.w	80016da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001488:	2b18      	cmp	r3, #24
 800148a:	f000 80bd 	beq.w	8001608 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	2b02      	cmp	r3, #2
 8001494:	f040 809e 	bne.w	80015d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a41      	ldr	r2, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800149e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff f9c8 	bl	8000838 <HAL_GetTick>
 80014a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff f9c4 	bl	8000838 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e10e      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80014cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_RCC_OscConfig+0x774>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	430a      	orrs	r2, r1
 80014de:	4931      	ldr	r1, [pc, #196]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	628b      	str	r3, [r1, #40]	; 0x28
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	3b01      	subs	r3, #1
 80014ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	3b01      	subs	r3, #1
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fe:	3b01      	subs	r3, #1
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150c:	3b01      	subs	r3, #1
 800150e:	061b      	lsls	r3, r3, #24
 8001510:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001514:	4923      	ldr	r1, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001516:	4313      	orrs	r3, r2
 8001518:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x778>)
 800152c:	4013      	ands	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001532:	00d2      	lsls	r2, r2, #3
 8001534:	491b      	ldr	r1, [pc, #108]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001536:	4313      	orrs	r3, r2
 8001538:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	f023 020c 	bic.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4917      	ldr	r1, [pc, #92]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001548:	4313      	orrs	r3, r2
 800154a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	f023 0202 	bic.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	4912      	ldr	r1, [pc, #72]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800155a:	4313      	orrs	r3, r2
 800155c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_RCC_OscConfig+0x76c>)
 8001594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff f94d 	bl	8000838 <HAL_GetTick>
 800159e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015a0:	e011      	b.n	80015c6 <HAL_RCC_OscConfig+0x78e>
 80015a2:	bf00      	nop
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58024800 	.word	0x58024800
 80015ac:	fffffc0c 	.word	0xfffffc0c
 80015b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff f940 	bl	8000838 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e08a      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x77c>
 80015d2:	e082      	b.n	80016da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80015da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff f92a 	bl	8000838 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff f926 	bl	8000838 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e070      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x7b0>
 8001606:	e068      	b.n	80016da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2b01      	cmp	r3, #1
 800161a:	d031      	beq.n	8001680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0203 	and.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d12a      	bne.n	8001680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d122      	bne.n	8001680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d11a      	bne.n	8001680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0a5b      	lsrs	r3, r3, #9
 800164e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d111      	bne.n	8001680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	0e1b      	lsrs	r3, r3, #24
 8001672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e02b      	b.n	80016dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 8001686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800168e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	429a      	cmp	r2, r3
 8001698:	d01f      	beq.n	80016da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016a6:	f7ff f8c7 	bl	8000838 <HAL_GetTick>
 80016aa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80016ac:	bf00      	nop
 80016ae:	f7ff f8c3 	bl	8000838 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d0f9      	beq.n	80016ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80016bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_RCC_OscConfig+0x8b0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016c6:	00d2      	lsls	r2, r2, #3
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_RCC_OscConfig+0x8ac>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58024400 	.word	0x58024400
 80016e8:	ffff0007 	.word	0xffff0007

080016ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e19c      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b8a      	ldr	r3, [pc, #552]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d910      	bls.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b87      	ldr	r3, [pc, #540]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 020f 	bic.w	r2, r3, #15
 8001716:	4985      	ldr	r1, [pc, #532]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b83      	ldr	r3, [pc, #524]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e184      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d010      	beq.n	800175e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001748:	429a      	cmp	r2, r3
 800174a:	d908      	bls.n	800175e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4975      	ldr	r1, [pc, #468]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800175a:	4313      	orrs	r3, r2
 800175c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001776:	429a      	cmp	r2, r3
 8001778:	d908      	bls.n	800178c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800177a:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	496a      	ldr	r1, [pc, #424]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001788:	4313      	orrs	r3, r2
 800178a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d010      	beq.n	80017ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	4b64      	ldr	r3, [pc, #400]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d908      	bls.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	495e      	ldr	r1, [pc, #376]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d010      	beq.n	80017e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d908      	bls.n	80017e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4953      	ldr	r1, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d010      	beq.n	8001816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	429a      	cmp	r2, r3
 8001802:	d908      	bls.n	8001816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f023 020f 	bic.w	r2, r3, #15
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4947      	ldr	r1, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001812:	4313      	orrs	r3, r2
 8001814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d055      	beq.n	80018ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4940      	ldr	r1, [pc, #256]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001830:	4313      	orrs	r3, r2
 8001832:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d107      	bne.n	800184c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800183c:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d121      	bne.n	800188c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0f6      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d107      	bne.n	8001864 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d115      	bne.n	800188c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0ea      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800186c:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0de      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0d6      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f023 0207 	bic.w	r2, r3, #7
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4925      	ldr	r1, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 800189a:	4313      	orrs	r3, r2
 800189c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800189e:	f7fe ffcb 	bl	8000838 <HAL_GetTick>
 80018a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7fe ffc7 	bl	8000838 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0be      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d1eb      	bne.n	80018a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d010      	beq.n	80018fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d208      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f023 020f 	bic.w	r2, r3, #15
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x244>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d214      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 020f 	bic.w	r2, r3, #15
 8001912:	4906      	ldr	r1, [pc, #24]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_RCC_ClockConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e086      	b.n	8001a3a <HAL_RCC_ClockConfig+0x34e>
 800192c:	52002000 	.word	0x52002000
 8001930:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800194c:	429a      	cmp	r2, r3
 800194e:	d208      	bcs.n	8001962 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	4939      	ldr	r1, [pc, #228]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 800195e:	4313      	orrs	r3, r2
 8001960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800197a:	429a      	cmp	r2, r3
 800197c:	d208      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	492e      	ldr	r1, [pc, #184]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d208      	bcs.n	80019be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d010      	beq.n	80019ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d208      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4917      	ldr	r1, [pc, #92]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ec:	f000 f834 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	4912      	ldr	r1, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x35c>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x358>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_RCC_ClockConfig+0x35c>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x360>)
 8001a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x364>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x368>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe feb8 	bl	80007a4 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	58024400 	.word	0x58024400
 8001a48:	0800355c 	.word	0x0800355c
 8001a4c:	24000004 	.word	0x24000004
 8001a50:	24000000 	.word	0x24000000
 8001a54:	24000008 	.word	0x24000008

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a5e:	4bb3      	ldr	r3, [pc, #716]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a66:	2b18      	cmp	r3, #24
 8001a68:	f200 8155 	bhi.w	8001d16 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001ad9 	.word	0x08001ad9
 8001a78:	08001d17 	.word	0x08001d17
 8001a7c:	08001d17 	.word	0x08001d17
 8001a80:	08001d17 	.word	0x08001d17
 8001a84:	08001d17 	.word	0x08001d17
 8001a88:	08001d17 	.word	0x08001d17
 8001a8c:	08001d17 	.word	0x08001d17
 8001a90:	08001d17 	.word	0x08001d17
 8001a94:	08001aff 	.word	0x08001aff
 8001a98:	08001d17 	.word	0x08001d17
 8001a9c:	08001d17 	.word	0x08001d17
 8001aa0:	08001d17 	.word	0x08001d17
 8001aa4:	08001d17 	.word	0x08001d17
 8001aa8:	08001d17 	.word	0x08001d17
 8001aac:	08001d17 	.word	0x08001d17
 8001ab0:	08001d17 	.word	0x08001d17
 8001ab4:	08001b05 	.word	0x08001b05
 8001ab8:	08001d17 	.word	0x08001d17
 8001abc:	08001d17 	.word	0x08001d17
 8001ac0:	08001d17 	.word	0x08001d17
 8001ac4:	08001d17 	.word	0x08001d17
 8001ac8:	08001d17 	.word	0x08001d17
 8001acc:	08001d17 	.word	0x08001d17
 8001ad0:	08001d17 	.word	0x08001d17
 8001ad4:	08001b0b 	.word	0x08001b0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ad8:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ae4:	4b91      	ldr	r3, [pc, #580]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	4a90      	ldr	r2, [pc, #576]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001af6:	e111      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001af8:	4b8d      	ldr	r3, [pc, #564]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001afa:	61bb      	str	r3, [r7, #24]
      break;
 8001afc:	e10e      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001afe:	4b8d      	ldr	r3, [pc, #564]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b00:	61bb      	str	r3, [r7, #24]
      break;
 8001b02:	e10b      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001b04:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001b06:	61bb      	str	r3, [r7, #24]
      break;
 8001b08:	e108      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001b14:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001b20:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80e1 	beq.w	8001d10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	f000 8083 	beq.w	8001c5c <HAL_RCC_GetSysClockFreq+0x204>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f200 80a1 	bhi.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x248>
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x114>
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d056      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b6a:	e099      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02d      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b78:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001bd2:	e087      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001d40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c16:	e065      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c5a:	e043      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001d48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c9e:	e021      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001caa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ce2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	0a5b      	lsrs	r3, r3, #9
 8001cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cee:	3301      	adds	r3, #1
 8001cf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d08:	ee17 3a90 	vmov	r3, s15
 8001d0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001d0e:	e005      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
      break;
 8001d14:	e002      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d18:	61bb      	str	r3, [r7, #24]
      break;
 8001d1a:	bf00      	nop
  }

  return sysclockfreq;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	03d09000 	.word	0x03d09000
 8001d34:	003d0900 	.word	0x003d0900
 8001d38:	017d7840 	.word	0x017d7840
 8001d3c:	46000000 	.word	0x46000000
 8001d40:	4c742400 	.word	0x4c742400
 8001d44:	4a742400 	.word	0x4a742400
 8001d48:	4bbebc20 	.word	0x4bbebc20

08001d4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d50:	b0ca      	sub	sp, #296	; 0x128
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8001d70:	2500      	movs	r5, #0
 8001d72:	ea54 0305 	orrs.w	r3, r4, r5
 8001d76:	d049      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d82:	d02f      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001d84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d88:	d828      	bhi.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d8e:	d01a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d94:	d822      	bhi.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d9e:	d007      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001da0:	e01c      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001da2:	4bb8      	ldr	r3, [pc, #736]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	4ab7      	ldr	r2, [pc, #732]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001dae:	e01a      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001db4:	3308      	adds	r3, #8
 8001db6:	2102      	movs	r1, #2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 f9d1 	bl	8003160 <RCCEx_PLL2_Config>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001dc4:	e00f      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dca:	3328      	adds	r3, #40	; 0x28
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fa78 	bl	80032c4 <RCCEx_PLL3_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001dda:	e004      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001de2:	e000      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8001de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001dee:	4ba5      	ldr	r3, [pc, #660]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dfc:	4aa1      	ldr	r2, [pc, #644]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	6513      	str	r3, [r2, #80]	; 0x50
 8001e02:	e003      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8001e18:	f04f 0900 	mov.w	r9, #0
 8001e1c:	ea58 0309 	orrs.w	r3, r8, r9
 8001e20:	d047      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8001e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d82a      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e49 	.word	0x08001e49
 8001e38:	08001e57 	.word	0x08001e57
 8001e3c:	08001e6d 	.word	0x08001e6d
 8001e40:	08001e8b 	.word	0x08001e8b
 8001e44:	08001e8b 	.word	0x08001e8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e48:	4b8e      	ldr	r3, [pc, #568]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	4a8d      	ldr	r2, [pc, #564]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001e54:	e01a      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 f97e 	bl	8003160 <RCCEx_PLL2_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e70:	3328      	adds	r3, #40	; 0x28
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fa25 	bl	80032c4 <RCCEx_PLL3_Config>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001e80:	e004      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001e88:	e000      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8001e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e94:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e98:	f023 0107 	bic.w	r1, r3, #7
 8001e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a78      	ldr	r2, [pc, #480]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6513      	str	r3, [r2, #80]	; 0x50
 8001ea8:	e003      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8001ebe:	f04f 0b00 	mov.w	fp, #0
 8001ec2:	ea5a 030b 	orrs.w	r3, sl, fp
 8001ec6:	d04c      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8001ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed2:	d030      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed8:	d829      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001eda:	2bc0      	cmp	r3, #192	; 0xc0
 8001edc:	d02d      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8001ede:	2bc0      	cmp	r3, #192	; 0xc0
 8001ee0:	d825      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d018      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d821      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d007      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8001ef2:	e01c      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	4a62      	ldr	r2, [pc, #392]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8001f00:	e01c      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f06:	3308      	adds	r3, #8
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 f928 	bl	8003160 <RCCEx_PLL2_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8001f16:	e011      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f1c:	3328      	adds	r3, #40	; 0x28
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 f9cf 	bl	80032c4 <RCCEx_PLL3_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8001f2c:	e006      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001f34:	e002      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8001f36:	bf00      	nop
 8001f38:	e000      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8001f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001f44:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8001f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6513      	str	r3, [r2, #80]	; 0x50
 8001f58:	e003      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8001f6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001f78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	d053      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8001f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f8e:	d035      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001f90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f94:	d82e      	bhi.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8001f96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f9a:	d031      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8001f9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001fa0:	d828      	bhi.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa6:	d01a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x292>
 8001fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fac:	d822      	bhi.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8001fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fb6:	d007      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	4a31      	ldr	r2, [pc, #196]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001fc6:	e01c      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fcc:	3308      	adds	r3, #8
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 f8c5 	bl	8003160 <RCCEx_PLL2_Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8001fdc:	e011      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fe2:	3328      	adds	r3, #40	; 0x28
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 f96c 	bl	80032c4 <RCCEx_PLL3_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001ff2:	e006      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10b      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002016:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800201c:	430b      	orrs	r3, r1
 800201e:	6593      	str	r3, [r2, #88]	; 0x58
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800202a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002036:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002040:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002044:	460b      	mov	r3, r1
 8002046:	4313      	orrs	r3, r2
 8002048:	d056      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800204a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800204e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002056:	d038      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800205c:	d831      	bhi.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800205e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002062:	d034      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002068:	d82b      	bhi.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800206a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800206e:	d01d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002074:	d825      	bhi.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800207a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002080:	e01f      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002082:	bf00      	nop
 8002084:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002088:	4ba2      	ldr	r3, [pc, #648]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4aa1      	ldr	r2, [pc, #644]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800208e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002094:	e01c      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800209a:	3308      	adds	r3, #8
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 f85e 	bl	8003160 <RCCEx_PLL2_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80020aa:	e011      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020b0:	3328      	adds	r3, #40	; 0x28
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f905 	bl	80032c4 <RCCEx_PLL3_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020c0:	e006      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80020c8:	e002      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80020ca:	bf00      	nop
 80020cc:	e000      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80020ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80020d8:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80020e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80020e8:	4a8a      	ldr	r2, [pc, #552]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	e003      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80020f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002104:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800210e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002112:	460b      	mov	r3, r1
 8002114:	4313      	orrs	r3, r2
 8002116:	d03a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	2b30      	cmp	r3, #48	; 0x30
 8002120:	d01f      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002122:	2b30      	cmp	r3, #48	; 0x30
 8002124:	d819      	bhi.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002126:	2b20      	cmp	r3, #32
 8002128:	d00c      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800212a:	2b20      	cmp	r3, #32
 800212c:	d815      	bhi.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d019      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002132:	2b10      	cmp	r3, #16
 8002134:	d111      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002136:	4b77      	ldr	r3, [pc, #476]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	4a76      	ldr	r2, [pc, #472]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002142:	e011      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002148:	3308      	adds	r3, #8
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f807 	bl	8003160 <RCCEx_PLL2_Config>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002160:	e002      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a65      	ldr	r2, [pc, #404]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002180:	430b      	orrs	r3, r1
 8002182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002184:	e003      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800218a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800218e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800219a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80021a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4313      	orrs	r3, r2
 80021ac:	d051      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80021ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b8:	d035      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80021ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021be:	d82e      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80021c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021c4:	d031      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80021c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021ca:	d828      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80021cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d0:	d01a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d822      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e0:	d007      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80021e2:	e01c      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80021f0:	e01c      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021f6:	3308      	adds	r3, #8
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 ffb0 	bl	8003160 <RCCEx_PLL2_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002206:	e011      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800220c:	3328      	adds	r3, #40	; 0x28
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f001 f857 	bl	80032c4 <RCCEx_PLL3_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800221c:	e006      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002224:	e002      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800222a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800222c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800223c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002244:	430b      	orrs	r3, r1
 8002246:	6513      	str	r3, [r2, #80]	; 0x50
 8002248:	e003      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800224e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800225e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002268:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800226c:	460b      	mov	r3, r1
 800226e:	4313      	orrs	r3, r2
 8002270:	d056      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d033      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800227e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002282:	d82c      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002288:	d02f      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800228a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800228e:	d826      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002294:	d02b      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002296:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800229a:	d820      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800229c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022a0:	d012      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80022a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022a6:	d81a      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d022      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d115      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80022b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022b6:	3308      	adds	r3, #8
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 ff50 	bl	8003160 <RCCEx_PLL2_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80022c6:	e015      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80022c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022cc:	3328      	adds	r3, #40	; 0x28
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fff7 	bl	80032c4 <RCCEx_PLL3_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80022dc:	e00a      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80022e4:	e006      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80022e6:	bf00      	nop
 80022e8:	e004      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80022ea:	bf00      	nop
 80022ec:	e002      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80022f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230a:	4a02      	ldr	r2, [pc, #8]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800230c:	430b      	orrs	r3, r1
 800230e:	6513      	str	r3, [r2, #80]	; 0x50
 8002310:	e006      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002312:	bf00      	nop
 8002314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800231c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800232c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002336:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800233a:	460b      	mov	r3, r1
 800233c:	4313      	orrs	r3, r2
 800233e:	d055      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002344:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800234c:	d033      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800234e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002352:	d82c      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d02f      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d826      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002360:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002364:	d02b      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800236a:	d820      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800236c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002370:	d012      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002376:	d81a      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d022      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800237c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002380:	d115      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002386:	3308      	adds	r3, #8
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fee8 	bl	8003160 <RCCEx_PLL2_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002396:	e015      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800239c:	3328      	adds	r3, #40	; 0x28
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 ff8f 	bl	80032c4 <RCCEx_PLL3_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80023ac:	e00a      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80023b4:	e006      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80023b6:	bf00      	nop
 80023b8:	e004      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80023ba:	bf00      	nop
 80023bc:	e002      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80023c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80023cc:	4ba3      	ldr	r3, [pc, #652]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80023d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023dc:	4a9f      	ldr	r2, [pc, #636]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80023de:	430b      	orrs	r3, r1
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	e003      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80023f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002406:	460b      	mov	r3, r1
 8002408:	4313      	orrs	r3, r2
 800240a:	d037      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800240c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002416:	d00e      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241c:	d816      	bhi.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d018      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002426:	d111      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002428:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	4a8b      	ldr	r2, [pc, #556]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800242e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002434:	e00f      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800243a:	3308      	adds	r3, #8
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fe8e 	bl	8003160 <RCCEx_PLL2_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800244a:	e004      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002452:	e000      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800245e:	4b7f      	ldr	r3, [pc, #508]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002462:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a7b      	ldr	r2, [pc, #492]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800246e:	430b      	orrs	r3, r1
 8002470:	6513      	str	r3, [r2, #80]	; 0x50
 8002472:	e003      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002478:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800247c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002492:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002496:	460b      	mov	r3, r1
 8002498:	4313      	orrs	r3, r2
 800249a:	d039      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800249c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d81c      	bhi.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024e9 	.word	0x080024e9
 80024b0:	080024bd 	.word	0x080024bd
 80024b4:	080024cb 	.word	0x080024cb
 80024b8:	080024e9 	.word	0x080024e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024bc:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80024c8:	e00f      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024ce:	3308      	adds	r3, #8
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fe44 	bl	8003160 <RCCEx_PLL2_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80024de:	e004      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80024e6:	e000      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80024e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80024f2:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f023 0103 	bic.w	r1, r3, #3
 80024fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002502:	430b      	orrs	r3, r1
 8002504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002506:	e003      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800250c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800251c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002526:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800252a:	460b      	mov	r3, r1
 800252c:	4313      	orrs	r3, r2
 800252e:	f000 809f 	beq.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002532:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800253e:	f7fe f97b 	bl	8000838 <HAL_GetTick>
 8002542:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002546:	e00b      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe f976 	bl	8000838 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d903      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800255e:	e005      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002560:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ed      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800256c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002570:	2b00      	cmp	r3, #0
 8002572:	d179      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800257c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002580:	4053      	eors	r3, r2
 8002582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80025ae:	4a2b      	ldr	r2, [pc, #172]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80025b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80025be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c2:	d118      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe f938 	bl	8000838 <HAL_GetTick>
 80025c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025cc:	e00d      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe f933 	bl	8000838 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	f241 3388 	movw	r3, #5000	; 0x1388
 80025de:	429a      	cmp	r2, r3
 80025e0:	d903      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80025e8:	e005      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0eb      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80025f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d129      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800260e:	d10e      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800261c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002620:	091a      	lsrs	r2, r3, #4
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002624:	4013      	ands	r3, r2
 8002626:	4a0d      	ldr	r2, [pc, #52]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002628:	430b      	orrs	r3, r1
 800262a:	6113      	str	r3, [r2, #16]
 800262c:	e005      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002634:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002638:	6113      	str	r3, [r2, #16]
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800263c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800263e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800264c:	430b      	orrs	r3, r1
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
 8002650:	e00e      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800265a:	e009      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800265c:	58024400 	.word	0x58024400
 8002660:	58024800 	.word	0x58024800
 8002664:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800266c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f002 0301 	and.w	r3, r2, #1
 800267c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002686:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800268a:	460b      	mov	r3, r1
 800268c:	4313      	orrs	r3, r2
 800268e:	f000 8089 	beq.w	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002698:	2b28      	cmp	r3, #40	; 0x28
 800269a:	d86b      	bhi.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800269c:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	0800277d 	.word	0x0800277d
 80026a8:	08002775 	.word	0x08002775
 80026ac:	08002775 	.word	0x08002775
 80026b0:	08002775 	.word	0x08002775
 80026b4:	08002775 	.word	0x08002775
 80026b8:	08002775 	.word	0x08002775
 80026bc:	08002775 	.word	0x08002775
 80026c0:	08002775 	.word	0x08002775
 80026c4:	08002749 	.word	0x08002749
 80026c8:	08002775 	.word	0x08002775
 80026cc:	08002775 	.word	0x08002775
 80026d0:	08002775 	.word	0x08002775
 80026d4:	08002775 	.word	0x08002775
 80026d8:	08002775 	.word	0x08002775
 80026dc:	08002775 	.word	0x08002775
 80026e0:	08002775 	.word	0x08002775
 80026e4:	0800275f 	.word	0x0800275f
 80026e8:	08002775 	.word	0x08002775
 80026ec:	08002775 	.word	0x08002775
 80026f0:	08002775 	.word	0x08002775
 80026f4:	08002775 	.word	0x08002775
 80026f8:	08002775 	.word	0x08002775
 80026fc:	08002775 	.word	0x08002775
 8002700:	08002775 	.word	0x08002775
 8002704:	0800277d 	.word	0x0800277d
 8002708:	08002775 	.word	0x08002775
 800270c:	08002775 	.word	0x08002775
 8002710:	08002775 	.word	0x08002775
 8002714:	08002775 	.word	0x08002775
 8002718:	08002775 	.word	0x08002775
 800271c:	08002775 	.word	0x08002775
 8002720:	08002775 	.word	0x08002775
 8002724:	0800277d 	.word	0x0800277d
 8002728:	08002775 	.word	0x08002775
 800272c:	08002775 	.word	0x08002775
 8002730:	08002775 	.word	0x08002775
 8002734:	08002775 	.word	0x08002775
 8002738:	08002775 	.word	0x08002775
 800273c:	08002775 	.word	0x08002775
 8002740:	08002775 	.word	0x08002775
 8002744:	0800277d 	.word	0x0800277d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800274c:	3308      	adds	r3, #8
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd05 	bl	8003160 <RCCEx_PLL2_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800275c:	e00f      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800275e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002762:	3328      	adds	r3, #40	; 0x28
 8002764:	2101      	movs	r1, #1
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fdac 	bl	80032c4 <RCCEx_PLL3_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002772:	e004      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800277a:	e000      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800277c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800277e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002786:	4bbf      	ldr	r3, [pc, #764]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800278e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002794:	4abb      	ldr	r2, [pc, #748]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002796:	430b      	orrs	r3, r1
 8002798:	6553      	str	r3, [r2, #84]	; 0x54
 800279a:	e003      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80027a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f002 0302 	and.w	r3, r2, #2
 80027b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80027be:	460b      	mov	r3, r1
 80027c0:	4313      	orrs	r3, r2
 80027c2:	d041      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80027c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d824      	bhi.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	08002821 	.word	0x08002821
 80027d8:	080027ed 	.word	0x080027ed
 80027dc:	08002803 	.word	0x08002803
 80027e0:	08002821 	.word	0x08002821
 80027e4:	08002821 	.word	0x08002821
 80027e8:	08002821 	.word	0x08002821
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f0:	3308      	adds	r3, #8
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fcb3 	bl	8003160 <RCCEx_PLL2_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002800:	e00f      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002806:	3328      	adds	r3, #40	; 0x28
 8002808:	2101      	movs	r1, #1
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fd5a 	bl	80032c4 <RCCEx_PLL3_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002816:	e004      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800281e:	e000      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800282a:	4b96      	ldr	r3, [pc, #600]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f023 0107 	bic.w	r1, r3, #7
 8002832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002838:	4a92      	ldr	r2, [pc, #584]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800283a:	430b      	orrs	r3, r1
 800283c:	6553      	str	r3, [r2, #84]	; 0x54
 800283e:	e003      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f002 0304 	and.w	r3, r2, #4
 8002854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800285e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002862:	460b      	mov	r3, r1
 8002864:	4313      	orrs	r3, r2
 8002866:	d044      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	2b05      	cmp	r3, #5
 8002872:	d825      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	080028c9 	.word	0x080028c9
 8002880:	08002895 	.word	0x08002895
 8002884:	080028ab 	.word	0x080028ab
 8002888:	080028c9 	.word	0x080028c9
 800288c:	080028c9 	.word	0x080028c9
 8002890:	080028c9 	.word	0x080028c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002898:	3308      	adds	r3, #8
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fc5f 	bl	8003160 <RCCEx_PLL2_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80028a8:	e00f      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ae:	3328      	adds	r3, #40	; 0x28
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fd06 	bl	80032c4 <RCCEx_PLL3_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80028be:	e004      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028c6:	e000      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80028c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f023 0107 	bic.w	r1, r3, #7
 80028da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e2:	4a68      	ldr	r2, [pc, #416]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f002 0320 	and.w	r3, r2, #32
 80028fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002908:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800290c:	460b      	mov	r3, r1
 800290e:	4313      	orrs	r3, r2
 8002910:	d055      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291e:	d033      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002924:	d82c      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d02f      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d826      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002936:	d02b      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800293c:	d820      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800293e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002942:	d012      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002948:	d81a      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d022      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800294e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002952:	d115      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002958:	3308      	adds	r3, #8
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fbff 	bl	8003160 <RCCEx_PLL2_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002968:	e015      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296e:	3328      	adds	r3, #40	; 0x28
 8002970:	2102      	movs	r1, #2
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fca6 	bl	80032c4 <RCCEx_PLL3_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800297e:	e00a      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002986:	e006      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002988:	bf00      	nop
 800298a:	e004      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800298c:	bf00      	nop
 800298e:	e002      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80029a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a35      	ldr	r2, [pc, #212]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6553      	str	r3, [r2, #84]	; 0x54
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80029be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80029ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80029d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80029d8:	460b      	mov	r3, r1
 80029da:	4313      	orrs	r3, r2
 80029dc:	d058      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80029de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029ea:	d033      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80029ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029f0:	d82c      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f6:	d02f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fc:	d826      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80029fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a02:	d02b      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a08:	d820      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0e:	d012      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a14:	d81a      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d022      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d115      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a24:	3308      	adds	r3, #8
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fb99 	bl	8003160 <RCCEx_PLL2_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002a34:	e015      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a3a:	3328      	adds	r3, #40	; 0x28
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fc40 	bl	80032c4 <RCCEx_PLL3_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a52:	e006      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002a54:	bf00      	nop
 8002a56:	e004      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7a:	4a02      	ldr	r2, [pc, #8]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a80:	e006      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4313      	orrs	r3, r2
 8002aae:	d055      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ab8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002abc:	d033      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002abe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ac2:	d82c      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac8:	d02f      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ace:	d826      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ad0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ad4:	d02b      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002ad6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ada:	d820      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae0:	d012      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae6:	d81a      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d022      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af0:	d115      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af6:	3308      	adds	r3, #8
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fb30 	bl	8003160 <RCCEx_PLL2_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002b06:	e015      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b0c:	3328      	adds	r3, #40	; 0x28
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fbd7 	bl	80032c4 <RCCEx_PLL3_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002b26:	bf00      	nop
 8002b28:	e004      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002b2a:	bf00      	nop
 8002b2c:	e002      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b3c:	4ba1      	ldr	r3, [pc, #644]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b4c:	4a9d      	ldr	r2, [pc, #628]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
 8002b52:	e003      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f002 0308 	and.w	r3, r2, #8
 8002b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002b76:	460b      	mov	r3, r1
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	d01e      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8e:	3328      	adds	r3, #40	; 0x28
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fb96 	bl	80032c4 <RCCEx_PLL3_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ba4:	4b87      	ldr	r3, [pc, #540]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	4a83      	ldr	r2, [pc, #524]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f002 0310 	and.w	r3, r2, #16
 8002bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bd0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	d01e      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bec:	3328      	adds	r3, #40	; 0x28
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fb67 	bl	80032c4 <RCCEx_PLL3_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c02:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c12:	4a6c      	ldr	r2, [pc, #432]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002c32:	460b      	mov	r3, r1
 8002c34:	4313      	orrs	r3, r2
 8002c36:	d03e      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c44:	d022      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c4a:	d81b      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002c56:	e015      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fa7d 	bl	8003160 <RCCEx_PLL2_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002c6c:	e00f      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c72:	3328      	adds	r3, #40	; 0x28
 8002c74:	2102      	movs	r1, #2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fb24 	bl	80032c4 <RCCEx_PLL3_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002c82:	e004      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c8a:	e000      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c96:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ca6:	4a47      	ldr	r2, [pc, #284]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	e003      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002cc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cde:	d01f      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce4:	d818      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cea:	d003      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002cf2:	e011      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf4:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002d00:	e00f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d06:	3328      	adds	r3, #40	; 0x28
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fada 	bl	80032c4 <RCCEx_PLL3_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002d16:	e004      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6553      	str	r3, [r2, #84]	; 0x54
 8002d40:	e003      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002d56:	673b      	str	r3, [r7, #112]	; 0x70
 8002d58:	2300      	movs	r3, #0
 8002d5a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002d60:	460b      	mov	r3, r1
 8002d62:	4313      	orrs	r3, r2
 8002d64:	d034      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d007      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8002d76:	e011      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002d84:	e00e      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f9e6 	bl	8003160 <RCCEx_PLL2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002d9a:	e003      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dba:	4a02      	ldr	r2, [pc, #8]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc0:	e006      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8002dc2:	bf00      	nop
 8002dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dde:	2300      	movs	r3, #0
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002de2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002de6:	460b      	mov	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	d00c      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df0:	3328      	adds	r3, #40	; 0x28
 8002df2:	2102      	movs	r1, #2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa65 	bl	80032c4 <RCCEx_PLL3_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002e12:	663b      	str	r3, [r7, #96]	; 0x60
 8002e14:	2300      	movs	r3, #0
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
 8002e18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d038      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e2e:	d018      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8002e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e34:	d811      	bhi.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8002e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3a:	d014      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8002e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e40:	d80b      	bhi.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8002e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4c:	4bc3      	ldr	r3, [pc, #780]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4ac2      	ldr	r2, [pc, #776]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8002e58:	e008      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e60:	e004      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8002e62:	bf00      	nop
 8002e64:	e002      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8002e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e74:	4bb9      	ldr	r3, [pc, #740]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e84:	4ab5      	ldr	r2, [pc, #724]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6553      	str	r3, [r2, #84]	; 0x54
 8002e8a:	e003      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8002ea0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4313      	orrs	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eb0:	4baa      	ldr	r3, [pc, #680]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	4aa7      	ldr	r2, [pc, #668]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8002ed0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8002ed6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002eda:	460b      	mov	r3, r1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002ee0:	4b9e      	ldr	r3, [pc, #632]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8002ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ef0:	4a9a      	ldr	r2, [pc, #616]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f04:	2300      	movs	r3, #0
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f12:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8002f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f20:	4a8e      	ldr	r2, [pc, #568]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
 8002f34:	2300      	movs	r3, #0
 8002f36:	647b      	str	r3, [r7, #68]	; 0x44
 8002f38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f42:	4b86      	ldr	r3, [pc, #536]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	4a85      	ldr	r2, [pc, #532]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f4c:	6113      	str	r3, [r2, #16]
 8002f4e:	4b83      	ldr	r3, [pc, #524]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f5a:	4a80      	ldr	r2, [pc, #512]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002f76:	460b      	mov	r3, r1
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f7c:	4b77      	ldr	r3, [pc, #476]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbc:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	2100      	movs	r1, #0
 8002fcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	d011      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8ba 	bl	8003160 <RCCEx_PLL2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8002ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ffe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	2100      	movs	r1, #0
 800300c:	6239      	str	r1, [r7, #32]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003018:	460b      	mov	r3, r1
 800301a:	4313      	orrs	r3, r2
 800301c:	d011      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003022:	3308      	adds	r3, #8
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f89a 	bl	8003160 <RCCEx_PLL2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	2100      	movs	r1, #0
 800304c:	61b9      	str	r1, [r7, #24]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003058:	460b      	mov	r3, r1
 800305a:	4313      	orrs	r3, r2
 800305c:	d011      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800305e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003062:	3308      	adds	r3, #8
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f87a 	bl	8003160 <RCCEx_PLL2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800307e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	2100      	movs	r1, #0
 800308c:	6139      	str	r1, [r7, #16]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003098:	460b      	mov	r3, r1
 800309a:	4313      	orrs	r3, r2
 800309c:	d011      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800309e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a2:	3328      	adds	r3, #40	; 0x28
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f90c 	bl	80032c4 <RCCEx_PLL3_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80030b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	2100      	movs	r1, #0
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80030d8:	460b      	mov	r3, r1
 80030da:	4313      	orrs	r3, r2
 80030dc:	d011      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e2:	3328      	adds	r3, #40	; 0x28
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f8ec 	bl	80032c4 <RCCEx_PLL3_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80030f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	2100      	movs	r1, #0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d011      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003122:	3328      	adds	r3, #40	; 0x28
 8003124:	2102      	movs	r1, #2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f8cc 	bl	80032c4 <RCCEx_PLL3_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003142:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315c:	58024400 	.word	0x58024400

08003160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800316e:	4b53      	ldr	r3, [pc, #332]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b03      	cmp	r3, #3
 8003178:	d101      	bne.n	800317e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e099      	b.n	80032b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800317e:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a4e      	ldr	r2, [pc, #312]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003184:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318a:	f7fd fb55 	bl	8000838 <HAL_GetTick>
 800318e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003190:	e008      	b.n	80031a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003192:	f7fd fb51 	bl	8000838 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e086      	b.n	80032b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80031a4:	4b45      	ldr	r3, [pc, #276]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80031b0:	4b42      	ldr	r3, [pc, #264]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	493f      	ldr	r1, [pc, #252]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	628b      	str	r3, [r1, #40]	; 0x28
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	025b      	lsls	r3, r3, #9
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	3b01      	subs	r3, #1
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031f4:	4931      	ldr	r1, [pc, #196]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	492d      	ldr	r1, [pc, #180]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	f023 0220 	bic.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	4928      	ldr	r1, [pc, #160]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	4a26      	ldr	r2, [pc, #152]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003224:	f023 0310 	bic.w	r3, r3, #16
 8003228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 800322c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <RCCEx_PLL2_Config+0x160>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	69d2      	ldr	r2, [r2, #28]
 8003236:	00d2      	lsls	r2, r2, #3
 8003238:	4920      	ldr	r1, [pc, #128]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003244:	f043 0310 	orr.w	r3, r3, #16
 8003248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800325c:	e00f      	b.n	800327e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003270:	e005      	b.n	800327e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	4a11      	ldr	r2, [pc, #68]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800327c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 8003284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328a:	f7fd fad5 	bl	8000838 <HAL_GetTick>
 800328e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003290:	e008      	b.n	80032a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003292:	f7fd fad1 	bl	8000838 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e006      	b.n	80032b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <RCCEx_PLL2_Config+0x15c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	ffff0007 	.word	0xffff0007

080032c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80032d2:	4b53      	ldr	r3, [pc, #332]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d101      	bne.n	80032e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e099      	b.n	8003416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80032e2:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4e      	ldr	r2, [pc, #312]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ee:	f7fd faa3 	bl	8000838 <HAL_GetTick>
 80032f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80032f4:	e008      	b.n	8003308 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80032f6:	f7fd fa9f 	bl	8000838 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e086      	b.n	8003416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003308:	4b45      	ldr	r3, [pc, #276]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003314:	4b42      	ldr	r3, [pc, #264]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	051b      	lsls	r3, r3, #20
 8003322:	493f      	ldr	r1, [pc, #252]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	628b      	str	r3, [r1, #40]	; 0x28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	3b01      	subs	r3, #1
 800332e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	3b01      	subs	r3, #1
 8003338:	025b      	lsls	r3, r3, #9
 800333a:	b29b      	uxth	r3, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	3b01      	subs	r3, #1
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003358:	4931      	ldr	r1, [pc, #196]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 800335a:	4313      	orrs	r3, r2
 800335c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800335e:	4b30      	ldr	r3, [pc, #192]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	492d      	ldr	r1, [pc, #180]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4928      	ldr	r1, [pc, #160]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003382:	4b27      	ldr	r3, [pc, #156]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	4a26      	ldr	r2, [pc, #152]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800338c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 8003390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <RCCEx_PLL3_Config+0x160>)
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	69d2      	ldr	r2, [r2, #28]
 800339a:	00d2      	lsls	r2, r2, #3
 800339c:	4920      	ldr	r1, [pc, #128]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033c0:	e00f      	b.n	80033e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033d4:	e005      	b.n	80033e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	4a11      	ldr	r2, [pc, #68]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 80033e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ee:	f7fd fa23 	bl	8000838 <HAL_GetTick>
 80033f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80033f4:	e008      	b.n	8003408 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80033f6:	f7fd fa1f 	bl	8000838 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <RCCEx_PLL3_Config+0x15c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
 8003424:	ffff0007 	.word	0xffff0007

08003428 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e054      	b.n	80034e4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7a5b      	ldrb	r3, [r3, #9]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd f83e 	bl	80004cc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 0120 	bic.w	r1, r3, #32
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0204 	orr.w	r2, r2, #4
 800347a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d104      	bne.n	8003494 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2204      	movs	r2, #4
 800348e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e027      	b.n	80034e4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003494:	f7fd f9d0 	bl	8000838 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800349a:	e015      	b.n	80034c8 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800349c:	f7fd f9cc 	bl	8000838 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d90e      	bls.n	80034c8 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2204      	movs	r2, #4
 80034bc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e00d      	b.n	80034e4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d0e2      	beq.n	800349c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <__libc_init_array>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4d0d      	ldr	r5, [pc, #52]	; (8003524 <__libc_init_array+0x38>)
 80034f0:	4c0d      	ldr	r4, [pc, #52]	; (8003528 <__libc_init_array+0x3c>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	2600      	movs	r6, #0
 80034f8:	42a6      	cmp	r6, r4
 80034fa:	d109      	bne.n	8003510 <__libc_init_array+0x24>
 80034fc:	4d0b      	ldr	r5, [pc, #44]	; (800352c <__libc_init_array+0x40>)
 80034fe:	4c0c      	ldr	r4, [pc, #48]	; (8003530 <__libc_init_array+0x44>)
 8003500:	f000 f820 	bl	8003544 <_init>
 8003504:	1b64      	subs	r4, r4, r5
 8003506:	10a4      	asrs	r4, r4, #2
 8003508:	2600      	movs	r6, #0
 800350a:	42a6      	cmp	r6, r4
 800350c:	d105      	bne.n	800351a <__libc_init_array+0x2e>
 800350e:	bd70      	pop	{r4, r5, r6, pc}
 8003510:	f855 3b04 	ldr.w	r3, [r5], #4
 8003514:	4798      	blx	r3
 8003516:	3601      	adds	r6, #1
 8003518:	e7ee      	b.n	80034f8 <__libc_init_array+0xc>
 800351a:	f855 3b04 	ldr.w	r3, [r5], #4
 800351e:	4798      	blx	r3
 8003520:	3601      	adds	r6, #1
 8003522:	e7f2      	b.n	800350a <__libc_init_array+0x1e>
 8003524:	0800356c 	.word	0x0800356c
 8003528:	0800356c 	.word	0x0800356c
 800352c:	0800356c 	.word	0x0800356c
 8003530:	08003570 	.word	0x08003570

08003534 <memset>:
 8003534:	4402      	add	r2, r0
 8003536:	4603      	mov	r3, r0
 8003538:	4293      	cmp	r3, r2
 800353a:	d100      	bne.n	800353e <memset+0xa>
 800353c:	4770      	bx	lr
 800353e:	f803 1b01 	strb.w	r1, [r3], #1
 8003542:	e7f9      	b.n	8003538 <memset+0x4>

08003544 <_init>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr

08003550 <_fini>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	bf00      	nop
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr
